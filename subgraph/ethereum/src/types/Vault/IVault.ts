// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DepositMinted extends ethereum.Event {
  get params(): DepositMinted__Params {
    return new DepositMinted__Params(this);
  }
}

export class DepositMinted__Params {
  _event: DepositMinted;

  constructor(event: DepositMinted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get groupId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get depositor(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get claimer(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get claimerId(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get lockedUntil(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[8].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[9].value.toString();
  }
}

export class DepositWithdrawn extends ethereum.Event {
  get params(): DepositWithdrawn__Params {
    return new DepositWithdrawn__Params(this);
  }
}

export class DepositWithdrawn__Params {
  _event: DepositWithdrawn;

  constructor(event: DepositWithdrawn) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get burned(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class Disinvested extends ethereum.Event {
  get params(): Disinvested__Params {
    return new Disinvested__Params(this);
  }
}

export class Disinvested__Params {
  _event: Disinvested;

  constructor(event: Disinvested) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FeeWithdrawn extends ethereum.Event {
  get params(): FeeWithdrawn__Params {
    return new FeeWithdrawn__Params(this);
  }
}

export class FeeWithdrawn__Params {
  _event: FeeWithdrawn;

  constructor(event: FeeWithdrawn) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Invested extends ethereum.Event {
  get params(): Invested__Params {
    return new Invested__Params(this);
  }
}

export class Invested__Params {
  _event: Invested;

  constructor(event: Invested) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class YieldClaimed extends ethereum.Event {
  get params(): YieldClaimed__Params {
    return new YieldClaimed__Params(this);
  }
}

export class YieldClaimed__Params {
  _event: YieldClaimed;

  constructor(event: YieldClaimed) {
    this._event = event;
  }

  get claimerId(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get burnedShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get perfFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalUnderlying(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalShares(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class IVault__depositInput_paramsStruct extends ethereum.Tuple {
  get inputToken(): Address {
    return this[0].toAddress();
  }

  get lockDuration(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get claims(): Array<IVault__depositInput_paramsClaimsStruct> {
    return this[3].toTupleArray<IVault__depositInput_paramsClaimsStruct>();
  }

  get name(): string {
    return this[4].toString();
  }

  get slippage(): BigInt {
    return this[5].toBigInt();
  }
}

export class IVault__depositInput_paramsClaimsStruct extends ethereum.Tuple {
  get pct(): i32 {
    return this[0].toI32();
  }

  get beneficiary(): Address {
    return this[1].toAddress();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class IVault__depositForGroupIdInput_paramsStruct extends ethereum.Tuple {
  get inputToken(): Address {
    return this[0].toAddress();
  }

  get lockDuration(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get claims(): Array<IVault__depositForGroupIdInput_paramsClaimsStruct> {
    return this[3].toTupleArray<
      IVault__depositForGroupIdInput_paramsClaimsStruct
    >();
  }

  get name(): string {
    return this[4].toString();
  }

  get slippage(): BigInt {
    return this[5].toBigInt();
  }
}

export class IVault__depositForGroupIdInput_paramsClaimsStruct extends ethereum.Tuple {
  get pct(): i32 {
    return this[0].toI32();
  }

  get beneficiary(): Address {
    return this[1].toAddress();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class IVault__investStateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class IVault__yieldForResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class IVault extends ethereum.SmartContract {
  static bind(address: Address): IVault {
    return new IVault("IVault", address);
  }

  deposit(_params: IVault__depositInput_paramsStruct): Array<BigInt> {
    let result = super.call(
      "deposit",
      "deposit((address,uint64,uint256,(uint16,address,bytes)[],string,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(_params)]
    );

    return result[0].toBigIntArray();
  }

  try_deposit(
    _params: IVault__depositInput_paramsStruct
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "deposit",
      "deposit((address,uint64,uint256,(uint16,address,bytes)[],string,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  depositForGroupId(
    _groupId: BigInt,
    _params: IVault__depositForGroupIdInput_paramsStruct
  ): Array<BigInt> {
    let result = super.call(
      "depositForGroupId",
      "depositForGroupId(uint256,(address,uint64,uint256,(uint16,address,bytes)[],string,uint256)):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_groupId),
        ethereum.Value.fromTuple(_params)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_depositForGroupId(
    _groupId: BigInt,
    _params: IVault__depositForGroupIdInput_paramsStruct
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "depositForGroupId",
      "depositForGroupId(uint256,(address,uint64,uint256,(uint16,address,bytes)[],string,uint256)):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_groupId),
        ethereum.Value.fromTuple(_params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  investPct(): i32 {
    let result = super.call("investPct", "investPct():(uint16)", []);

    return result[0].toI32();
  }

  try_investPct(): ethereum.CallResult<i32> {
    let result = super.tryCall("investPct", "investPct():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  investState(): IVault__investStateResult {
    let result = super.call(
      "investState",
      "investState():(uint256,uint256)",
      []
    );

    return new IVault__investStateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_investState(): ethereum.CallResult<IVault__investStateResult> {
    let result = super.tryCall(
      "investState",
      "investState():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IVault__investStateResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  minLockPeriod(): BigInt {
    let result = super.call("minLockPeriod", "minLockPeriod():(uint64)", []);

    return result[0].toBigInt();
  }

  try_minLockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minLockPeriod", "minLockPeriod():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnderlying(): BigInt {
    let result = super.call(
      "totalUnderlying",
      "totalUnderlying():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnderlying(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnderlying",
      "totalUnderlying():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yieldFor(_to: Address): IVault__yieldForResult {
    let result = super.call(
      "yieldFor",
      "yieldFor(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_to)]
    );

    return new IVault__yieldForResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_yieldFor(_to: Address): ethereum.CallResult<IVault__yieldForResult> {
    let result = super.tryCall(
      "yieldFor",
      "yieldFor(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IVault__yieldForResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ClaimYieldCall extends ethereum.Call {
  get inputs(): ClaimYieldCall__Inputs {
    return new ClaimYieldCall__Inputs(this);
  }

  get outputs(): ClaimYieldCall__Outputs {
    return new ClaimYieldCall__Outputs(this);
  }
}

export class ClaimYieldCall__Inputs {
  _call: ClaimYieldCall;

  constructor(call: ClaimYieldCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimYieldCall__Outputs {
  _call: ClaimYieldCall;

  constructor(call: ClaimYieldCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _params(): DepositCall_paramsStruct {
    return changetype<DepositCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class DepositCall_paramsStruct extends ethereum.Tuple {
  get inputToken(): Address {
    return this[0].toAddress();
  }

  get lockDuration(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get claims(): Array<DepositCall_paramsClaimsStruct> {
    return this[3].toTupleArray<DepositCall_paramsClaimsStruct>();
  }

  get name(): string {
    return this[4].toString();
  }

  get slippage(): BigInt {
    return this[5].toBigInt();
  }
}

export class DepositCall_paramsClaimsStruct extends ethereum.Tuple {
  get pct(): i32 {
    return this[0].toI32();
  }

  get beneficiary(): Address {
    return this[1].toAddress();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class DepositForGroupIdCall extends ethereum.Call {
  get inputs(): DepositForGroupIdCall__Inputs {
    return new DepositForGroupIdCall__Inputs(this);
  }

  get outputs(): DepositForGroupIdCall__Outputs {
    return new DepositForGroupIdCall__Outputs(this);
  }
}

export class DepositForGroupIdCall__Inputs {
  _call: DepositForGroupIdCall;

  constructor(call: DepositForGroupIdCall) {
    this._call = call;
  }

  get _groupId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _params(): DepositForGroupIdCall_paramsStruct {
    return changetype<DepositForGroupIdCall_paramsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class DepositForGroupIdCall__Outputs {
  _call: DepositForGroupIdCall;

  constructor(call: DepositForGroupIdCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class DepositForGroupIdCall_paramsStruct extends ethereum.Tuple {
  get inputToken(): Address {
    return this[0].toAddress();
  }

  get lockDuration(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get claims(): Array<DepositForGroupIdCall_paramsClaimsStruct> {
    return this[3].toTupleArray<DepositForGroupIdCall_paramsClaimsStruct>();
  }

  get name(): string {
    return this[4].toString();
  }

  get slippage(): BigInt {
    return this[5].toBigInt();
  }
}

export class DepositForGroupIdCall_paramsClaimsStruct extends ethereum.Tuple {
  get pct(): i32 {
    return this[0].toI32();
  }

  get beneficiary(): Address {
    return this[1].toAddress();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class ForceWithdrawCall extends ethereum.Call {
  get inputs(): ForceWithdrawCall__Inputs {
    return new ForceWithdrawCall__Inputs(this);
  }

  get outputs(): ForceWithdrawCall__Outputs {
    return new ForceWithdrawCall__Outputs(this);
  }
}

export class ForceWithdrawCall__Inputs {
  _call: ForceWithdrawCall;

  constructor(call: ForceWithdrawCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ForceWithdrawCall__Outputs {
  _call: ForceWithdrawCall;

  constructor(call: ForceWithdrawCall) {
    this._call = call;
  }
}

export class UpdateInvestedCall extends ethereum.Call {
  get inputs(): UpdateInvestedCall__Inputs {
    return new UpdateInvestedCall__Inputs(this);
  }

  get outputs(): UpdateInvestedCall__Outputs {
    return new UpdateInvestedCall__Outputs(this);
  }
}

export class UpdateInvestedCall__Inputs {
  _call: UpdateInvestedCall;

  constructor(call: UpdateInvestedCall) {
    this._call = call;
  }
}

export class UpdateInvestedCall__Outputs {
  _call: UpdateInvestedCall;

  constructor(call: UpdateInvestedCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawPerformanceFeeCall extends ethereum.Call {
  get inputs(): WithdrawPerformanceFeeCall__Inputs {
    return new WithdrawPerformanceFeeCall__Inputs(this);
  }

  get outputs(): WithdrawPerformanceFeeCall__Outputs {
    return new WithdrawPerformanceFeeCall__Outputs(this);
  }
}

export class WithdrawPerformanceFeeCall__Inputs {
  _call: WithdrawPerformanceFeeCall;

  constructor(call: WithdrawPerformanceFeeCall) {
    this._call = call;
  }
}

export class WithdrawPerformanceFeeCall__Outputs {
  _call: WithdrawPerformanceFeeCall;

  constructor(call: WithdrawPerformanceFeeCall) {
    this._call = call;
  }
}
