// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CurveSwapPoolAdded extends ethereum.Event {
  get params(): CurveSwapPoolAdded__Params {
    return new CurveSwapPoolAdded__Params(this);
  }
}

export class CurveSwapPoolAdded__Params {
  _event: CurveSwapPoolAdded;

  constructor(event: CurveSwapPoolAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenI(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get underlyingI(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CurveSwapPoolRemoved extends ethereum.Event {
  get params(): CurveSwapPoolRemoved__Params {
    return new CurveSwapPoolRemoved__Params(this);
  }
}

export class CurveSwapPoolRemoved__Params {
  _event: CurveSwapPoolRemoved;

  constructor(event: CurveSwapPoolRemoved) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DepositMinted extends ethereum.Event {
  get params(): DepositMinted__Params {
    return new DepositMinted__Params(this);
  }
}

export class DepositMinted__Params {
  _event: DepositMinted;

  constructor(event: DepositMinted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get groupId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get depositor(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get claimer(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get claimerId(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get lockedUntil(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[8].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[9].value.toString();
  }
}

export class DepositWithdrawn extends ethereum.Event {
  get params(): DepositWithdrawn__Params {
    return new DepositWithdrawn__Params(this);
  }
}

export class DepositWithdrawn__Params {
  _event: DepositWithdrawn;

  constructor(event: DepositWithdrawn) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get burned(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class Disinvested extends ethereum.Event {
  get params(): Disinvested__Params {
    return new Disinvested__Params(this);
  }
}

export class Disinvested__Params {
  _event: Disinvested;

  constructor(event: Disinvested) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ExitPaused extends ethereum.Event {
  get params(): ExitPaused__Params {
    return new ExitPaused__Params(this);
  }
}

export class ExitPaused__Params {
  _event: ExitPaused;

  constructor(event: ExitPaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ExitUnpaused extends ethereum.Event {
  get params(): ExitUnpaused__Params {
    return new ExitUnpaused__Params(this);
  }
}

export class ExitUnpaused__Params {
  _event: ExitUnpaused;

  constructor(event: ExitUnpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FeeWithdrawn extends ethereum.Event {
  get params(): FeeWithdrawn__Params {
    return new FeeWithdrawn__Params(this);
  }
}

export class FeeWithdrawn__Params {
  _event: FeeWithdrawn;

  constructor(event: FeeWithdrawn) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class InvestPctUpdated extends ethereum.Event {
  get params(): InvestPctUpdated__Params {
    return new InvestPctUpdated__Params(this);
  }
}

export class InvestPctUpdated__Params {
  _event: InvestPctUpdated;

  constructor(event: InvestPctUpdated) {
    this._event = event;
  }

  get percentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Invested extends ethereum.Event {
  get params(): Invested__Params {
    return new Invested__Params(this);
  }
}

export class Invested__Params {
  _event: Invested;

  constructor(event: Invested) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LossTolerancePctUpdated extends ethereum.Event {
  get params(): LossTolerancePctUpdated__Params {
    return new LossTolerancePctUpdated__Params(this);
  }
}

export class LossTolerancePctUpdated__Params {
  _event: LossTolerancePctUpdated;

  constructor(event: LossTolerancePctUpdated) {
    this._event = event;
  }

  get pct(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PerfFeePctUpdated extends ethereum.Event {
  get params(): PerfFeePctUpdated__Params {
    return new PerfFeePctUpdated__Params(this);
  }
}

export class PerfFeePctUpdated__Params {
  _event: PerfFeePctUpdated;

  constructor(event: PerfFeePctUpdated) {
    this._event = event;
  }

  get pct(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Sponsored extends ethereum.Event {
  get params(): Sponsored__Params {
    return new Sponsored__Params(this);
  }
}

export class Sponsored__Params {
  _event: Sponsored;

  constructor(event: Sponsored) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get depositor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get lockedUntil(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StrategyUpdated extends ethereum.Event {
  get params(): StrategyUpdated__Params {
    return new StrategyUpdated__Params(this);
  }
}

export class StrategyUpdated__Params {
  _event: StrategyUpdated;

  constructor(event: StrategyUpdated) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get fromToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fromAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get toAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TreasuryUpdated extends ethereum.Event {
  get params(): TreasuryUpdated__Params {
    return new TreasuryUpdated__Params(this);
  }
}

export class TreasuryUpdated__Params {
  _event: TreasuryUpdated;

  constructor(event: TreasuryUpdated) {
    this._event = event;
  }

  get treasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unsponsored extends ethereum.Event {
  get params(): Unsponsored__Params {
    return new Unsponsored__Params(this);
  }
}

export class Unsponsored__Params {
  _event: Unsponsored;

  constructor(event: Unsponsored) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get burned(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class YieldClaimed extends ethereum.Event {
  get params(): YieldClaimed__Params {
    return new YieldClaimed__Params(this);
  }
}

export class YieldClaimed__Params {
  _event: YieldClaimed;

  constructor(event: YieldClaimed) {
    this._event = event;
  }

  get claimerId(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get burnedShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get perfFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalUnderlying(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalShares(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Vault__claimerResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Vault__depositInput_paramsStruct extends ethereum.Tuple {
  get inputToken(): Address {
    return this[0].toAddress();
  }

  get lockDuration(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get claims(): Array<Vault__depositInput_paramsClaimsStruct> {
    return this[3].toTupleArray<Vault__depositInput_paramsClaimsStruct>();
  }

  get name(): string {
    return this[4].toString();
  }

  get slippage(): BigInt {
    return this[5].toBigInt();
  }
}

export class Vault__depositInput_paramsClaimsStruct extends ethereum.Tuple {
  get pct(): i32 {
    return this[0].toI32();
  }

  get beneficiary(): Address {
    return this[1].toAddress();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class Vault__depositForGroupIdInput_paramsStruct extends ethereum.Tuple {
  get inputToken(): Address {
    return this[0].toAddress();
  }

  get lockDuration(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get claims(): Array<Vault__depositForGroupIdInput_paramsClaimsStruct> {
    return this[3].toTupleArray<
      Vault__depositForGroupIdInput_paramsClaimsStruct
    >();
  }

  get name(): string {
    return this[4].toString();
  }

  get slippage(): BigInt {
    return this[5].toBigInt();
  }
}

export class Vault__depositForGroupIdInput_paramsClaimsStruct extends ethereum.Tuple {
  get pct(): i32 {
    return this[0].toI32();
  }

  get beneficiary(): Address {
    return this[1].toAddress();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class Vault__depositsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Vault__investStateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Vault__swappersResult {
  value0: Address;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    return map;
  }
}

export class Vault__yieldForResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  KEEPER_ROLE(): Bytes {
    let result = super.call("KEEPER_ROLE", "KEEPER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_KEEPER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("KEEPER_ROLE", "KEEPER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_DEPOSIT_LOCK_DURATION(): BigInt {
    let result = super.call(
      "MAX_DEPOSIT_LOCK_DURATION",
      "MAX_DEPOSIT_LOCK_DURATION():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_DEPOSIT_LOCK_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_DEPOSIT_LOCK_DURATION",
      "MAX_DEPOSIT_LOCK_DURATION():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_SPONSOR_LOCK_DURATION(): BigInt {
    let result = super.call(
      "MAX_SPONSOR_LOCK_DURATION",
      "MAX_SPONSOR_LOCK_DURATION():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_SPONSOR_LOCK_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_SPONSOR_LOCK_DURATION",
      "MAX_SPONSOR_LOCK_DURATION():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_SPONSOR_LOCK_DURATION(): BigInt {
    let result = super.call(
      "MIN_SPONSOR_LOCK_DURATION",
      "MIN_SPONSOR_LOCK_DURATION():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_SPONSOR_LOCK_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_SPONSOR_LOCK_DURATION",
      "MIN_SPONSOR_LOCK_DURATION():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SETTINGS_ROLE(): Bytes {
    let result = super.call("SETTINGS_ROLE", "SETTINGS_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_SETTINGS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SETTINGS_ROLE",
      "SETTINGS_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SHARES_MULTIPLIER(): BigInt {
    let result = super.call(
      "SHARES_MULTIPLIER",
      "SHARES_MULTIPLIER():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SHARES_MULTIPLIER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SHARES_MULTIPLIER",
      "SHARES_MULTIPLIER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SPONSOR_ROLE(): Bytes {
    let result = super.call("SPONSOR_ROLE", "SPONSOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_SPONSOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("SPONSOR_ROLE", "SPONSOR_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  accumulatedPerfFee(): BigInt {
    let result = super.call(
      "accumulatedPerfFee",
      "accumulatedPerfFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accumulatedPerfFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accumulatedPerfFee",
      "accumulatedPerfFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimer(param0: Address): Vault__claimerResult {
    let result = super.call("claimer", "claimer(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new Vault__claimerResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_claimer(param0: Address): ethereum.CallResult<Vault__claimerResult> {
    let result = super.tryCall(
      "claimer",
      "claimer(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__claimerResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  deposit(_params: Vault__depositInput_paramsStruct): Array<BigInt> {
    let result = super.call(
      "deposit",
      "deposit((address,uint64,uint256,(uint16,address,bytes)[],string,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(_params)]
    );

    return result[0].toBigIntArray();
  }

  try_deposit(
    _params: Vault__depositInput_paramsStruct
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "deposit",
      "deposit((address,uint64,uint256,(uint16,address,bytes)[],string,uint256)):(uint256[])",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  depositForGroupId(
    _groupId: BigInt,
    _params: Vault__depositForGroupIdInput_paramsStruct
  ): Array<BigInt> {
    let result = super.call(
      "depositForGroupId",
      "depositForGroupId(uint256,(address,uint64,uint256,(uint16,address,bytes)[],string,uint256)):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_groupId),
        ethereum.Value.fromTuple(_params)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_depositForGroupId(
    _groupId: BigInt,
    _params: Vault__depositForGroupIdInput_paramsStruct
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "depositForGroupId",
      "depositForGroupId(uint256,(address,uint64,uint256,(uint16,address,bytes)[],string,uint256)):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_groupId),
        ethereum.Value.fromTuple(_params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  depositGroupIdOwner(param0: BigInt): Address {
    let result = super.call(
      "depositGroupIdOwner",
      "depositGroupIdOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_depositGroupIdOwner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "depositGroupIdOwner",
      "depositGroupIdOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposits(param0: BigInt): Vault__depositsResult {
    let result = super.call(
      "deposits",
      "deposits(uint256):(uint256,address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Vault__depositsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_deposits(param0: BigInt): ethereum.CallResult<Vault__depositsResult> {
    let result = super.tryCall(
      "deposits",
      "deposits(uint256):(uint256,address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__depositsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  exitPaused(): boolean {
    let result = super.call("exitPaused", "exitPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_exitPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("exitPaused", "exitPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUnderlying(): Address {
    let result = super.call("getUnderlying", "getUnderlying():(address)", []);

    return result[0].toAddress();
  }

  try_getUnderlying(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUnderlying",
      "getUnderlying():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  investPct(): i32 {
    let result = super.call("investPct", "investPct():(uint16)", []);

    return result[0].toI32();
  }

  try_investPct(): ethereum.CallResult<i32> {
    let result = super.tryCall("investPct", "investPct():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  investState(): Vault__investStateResult {
    let result = super.call(
      "investState",
      "investState():(uint256,uint256)",
      []
    );

    return new Vault__investStateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_investState(): ethereum.CallResult<Vault__investStateResult> {
    let result = super.tryCall(
      "investState",
      "investState():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__investStateResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  lossTolerancePct(): i32 {
    let result = super.call(
      "lossTolerancePct",
      "lossTolerancePct():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_lossTolerancePct(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "lossTolerancePct",
      "lossTolerancePct():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  minLockPeriod(): BigInt {
    let result = super.call("minLockPeriod", "minLockPeriod():(uint64)", []);

    return result[0].toBigInt();
  }

  try_minLockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minLockPeriod", "minLockPeriod():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  perfFeePct(): i32 {
    let result = super.call("perfFeePct", "perfFeePct():(uint16)", []);

    return result[0].toI32();
  }

  try_perfFeePct(): ethereum.CallResult<i32> {
    let result = super.tryCall("perfFeePct", "perfFeePct():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  principalOf(claimerId: Address): BigInt {
    let result = super.call("principalOf", "principalOf(address):(uint256)", [
      ethereum.Value.fromAddress(claimerId)
    ]);

    return result[0].toBigInt();
  }

  try_principalOf(claimerId: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalOf",
      "principalOf(address):(uint256)",
      [ethereum.Value.fromAddress(claimerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sharesOf(claimerId: Address): BigInt {
    let result = super.call("sharesOf", "sharesOf(address):(uint256)", [
      ethereum.Value.fromAddress(claimerId)
    ]);

    return result[0].toBigInt();
  }

  try_sharesOf(claimerId: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sharesOf", "sharesOf(address):(uint256)", [
      ethereum.Value.fromAddress(claimerId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  strategy(): Address {
    let result = super.call("strategy", "strategy():(address)", []);

    return result[0].toAddress();
  }

  try_strategy(): ethereum.CallResult<Address> {
    let result = super.tryCall("strategy", "strategy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swappers(param0: Address): Vault__swappersResult {
    let result = super.call(
      "swappers",
      "swappers(address):(address,uint8,uint8,int128,int128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Vault__swappersResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_swappers(param0: Address): ethereum.CallResult<Vault__swappersResult> {
    let result = super.tryCall(
      "swappers",
      "swappers(address):(address,uint8,uint8,int128,int128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__swappersResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  totalPrincipal(): BigInt {
    let result = super.call("totalPrincipal", "totalPrincipal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPrincipal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrincipal",
      "totalPrincipal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSponsored(): BigInt {
    let result = super.call("totalSponsored", "totalSponsored():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSponsored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSponsored",
      "totalSponsored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnderlying(): BigInt {
    let result = super.call(
      "totalUnderlying",
      "totalUnderlying():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnderlying(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnderlying",
      "totalUnderlying():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnderlyingMinusSponsored(): BigInt {
    let result = super.call(
      "totalUnderlyingMinusSponsored",
      "totalUnderlyingMinusSponsored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnderlyingMinusSponsored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnderlyingMinusSponsored",
      "totalUnderlyingMinusSponsored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yieldFor(_to: Address): Vault__yieldForResult {
    let result = super.call(
      "yieldFor",
      "yieldFor(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_to)]
    );

    return new Vault__yieldForResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_yieldFor(_to: Address): ethereum.CallResult<Vault__yieldForResult> {
    let result = super.tryCall(
      "yieldFor",
      "yieldFor(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__yieldForResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _underlying(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minLockPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _investPct(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _treasury(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _perfFeePct(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _lossTolerancePct(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _swapPools(): Array<ConstructorCall_swapPoolsStruct> {
    return this._call.inputValues[7].value.toTupleArray<
      ConstructorCall_swapPoolsStruct
    >();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_swapPoolsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get tokenI(): BigInt {
    return this[2].toBigInt();
  }

  get underlyingI(): BigInt {
    return this[3].toBigInt();
  }
}

export class AddPoolCall extends ethereum.Call {
  get inputs(): AddPoolCall__Inputs {
    return new AddPoolCall__Inputs(this);
  }

  get outputs(): AddPoolCall__Outputs {
    return new AddPoolCall__Outputs(this);
  }
}

export class AddPoolCall__Inputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get _param(): AddPoolCall_paramStruct {
    return changetype<AddPoolCall_paramStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AddPoolCall__Outputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }
}

export class AddPoolCall_paramStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get tokenI(): BigInt {
    return this[2].toBigInt();
  }

  get underlyingI(): BigInt {
    return this[3].toBigInt();
  }
}

export class ClaimYieldCall extends ethereum.Call {
  get inputs(): ClaimYieldCall__Inputs {
    return new ClaimYieldCall__Inputs(this);
  }

  get outputs(): ClaimYieldCall__Outputs {
    return new ClaimYieldCall__Outputs(this);
  }
}

export class ClaimYieldCall__Inputs {
  _call: ClaimYieldCall;

  constructor(call: ClaimYieldCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimYieldCall__Outputs {
  _call: ClaimYieldCall;

  constructor(call: ClaimYieldCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _params(): DepositCall_paramsStruct {
    return changetype<DepositCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get depositIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class DepositCall_paramsStruct extends ethereum.Tuple {
  get inputToken(): Address {
    return this[0].toAddress();
  }

  get lockDuration(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get claims(): Array<DepositCall_paramsClaimsStruct> {
    return this[3].toTupleArray<DepositCall_paramsClaimsStruct>();
  }

  get name(): string {
    return this[4].toString();
  }

  get slippage(): BigInt {
    return this[5].toBigInt();
  }
}

export class DepositCall_paramsClaimsStruct extends ethereum.Tuple {
  get pct(): i32 {
    return this[0].toI32();
  }

  get beneficiary(): Address {
    return this[1].toAddress();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class DepositForGroupIdCall extends ethereum.Call {
  get inputs(): DepositForGroupIdCall__Inputs {
    return new DepositForGroupIdCall__Inputs(this);
  }

  get outputs(): DepositForGroupIdCall__Outputs {
    return new DepositForGroupIdCall__Outputs(this);
  }
}

export class DepositForGroupIdCall__Inputs {
  _call: DepositForGroupIdCall;

  constructor(call: DepositForGroupIdCall) {
    this._call = call;
  }

  get _groupId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _params(): DepositForGroupIdCall_paramsStruct {
    return changetype<DepositForGroupIdCall_paramsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class DepositForGroupIdCall__Outputs {
  _call: DepositForGroupIdCall;

  constructor(call: DepositForGroupIdCall) {
    this._call = call;
  }

  get depositIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class DepositForGroupIdCall_paramsStruct extends ethereum.Tuple {
  get inputToken(): Address {
    return this[0].toAddress();
  }

  get lockDuration(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get claims(): Array<DepositForGroupIdCall_paramsClaimsStruct> {
    return this[3].toTupleArray<DepositForGroupIdCall_paramsClaimsStruct>();
  }

  get name(): string {
    return this[4].toString();
  }

  get slippage(): BigInt {
    return this[5].toBigInt();
  }
}

export class DepositForGroupIdCall_paramsClaimsStruct extends ethereum.Tuple {
  get pct(): i32 {
    return this[0].toI32();
  }

  get beneficiary(): Address {
    return this[1].toAddress();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class ExitPauseCall extends ethereum.Call {
  get inputs(): ExitPauseCall__Inputs {
    return new ExitPauseCall__Inputs(this);
  }

  get outputs(): ExitPauseCall__Outputs {
    return new ExitPauseCall__Outputs(this);
  }
}

export class ExitPauseCall__Inputs {
  _call: ExitPauseCall;

  constructor(call: ExitPauseCall) {
    this._call = call;
  }
}

export class ExitPauseCall__Outputs {
  _call: ExitPauseCall;

  constructor(call: ExitPauseCall) {
    this._call = call;
  }
}

export class ExitUnpauseCall extends ethereum.Call {
  get inputs(): ExitUnpauseCall__Inputs {
    return new ExitUnpauseCall__Inputs(this);
  }

  get outputs(): ExitUnpauseCall__Outputs {
    return new ExitUnpauseCall__Outputs(this);
  }
}

export class ExitUnpauseCall__Inputs {
  _call: ExitUnpauseCall;

  constructor(call: ExitUnpauseCall) {
    this._call = call;
  }
}

export class ExitUnpauseCall__Outputs {
  _call: ExitUnpauseCall;

  constructor(call: ExitUnpauseCall) {
    this._call = call;
  }
}

export class ForceWithdrawCall extends ethereum.Call {
  get inputs(): ForceWithdrawCall__Inputs {
    return new ForceWithdrawCall__Inputs(this);
  }

  get outputs(): ForceWithdrawCall__Outputs {
    return new ForceWithdrawCall__Outputs(this);
  }
}

export class ForceWithdrawCall__Inputs {
  _call: ForceWithdrawCall;

  constructor(call: ForceWithdrawCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ForceWithdrawCall__Outputs {
  _call: ForceWithdrawCall;

  constructor(call: ForceWithdrawCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class PartialUnsponsorCall extends ethereum.Call {
  get inputs(): PartialUnsponsorCall__Inputs {
    return new PartialUnsponsorCall__Inputs(this);
  }

  get outputs(): PartialUnsponsorCall__Outputs {
    return new PartialUnsponsorCall__Outputs(this);
  }
}

export class PartialUnsponsorCall__Inputs {
  _call: PartialUnsponsorCall;

  constructor(call: PartialUnsponsorCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class PartialUnsponsorCall__Outputs {
  _call: PartialUnsponsorCall;

  constructor(call: PartialUnsponsorCall) {
    this._call = call;
  }
}

export class PartialWithdrawCall extends ethereum.Call {
  get inputs(): PartialWithdrawCall__Inputs {
    return new PartialWithdrawCall__Inputs(this);
  }

  get outputs(): PartialWithdrawCall__Outputs {
    return new PartialWithdrawCall__Outputs(this);
  }
}

export class PartialWithdrawCall__Inputs {
  _call: PartialWithdrawCall;

  constructor(call: PartialWithdrawCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class PartialWithdrawCall__Outputs {
  _call: PartialWithdrawCall;

  constructor(call: PartialWithdrawCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemovePoolCall extends ethereum.Call {
  get inputs(): RemovePoolCall__Inputs {
    return new RemovePoolCall__Inputs(this);
  }

  get outputs(): RemovePoolCall__Outputs {
    return new RemovePoolCall__Outputs(this);
  }
}

export class RemovePoolCall__Inputs {
  _call: RemovePoolCall;

  constructor(call: RemovePoolCall) {
    this._call = call;
  }

  get _inputToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemovePoolCall__Outputs {
  _call: RemovePoolCall;

  constructor(call: RemovePoolCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetInvestPctCall extends ethereum.Call {
  get inputs(): SetInvestPctCall__Inputs {
    return new SetInvestPctCall__Inputs(this);
  }

  get outputs(): SetInvestPctCall__Outputs {
    return new SetInvestPctCall__Outputs(this);
  }
}

export class SetInvestPctCall__Inputs {
  _call: SetInvestPctCall;

  constructor(call: SetInvestPctCall) {
    this._call = call;
  }

  get _investPct(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetInvestPctCall__Outputs {
  _call: SetInvestPctCall;

  constructor(call: SetInvestPctCall) {
    this._call = call;
  }
}

export class SetLossTolerancePctCall extends ethereum.Call {
  get inputs(): SetLossTolerancePctCall__Inputs {
    return new SetLossTolerancePctCall__Inputs(this);
  }

  get outputs(): SetLossTolerancePctCall__Outputs {
    return new SetLossTolerancePctCall__Outputs(this);
  }
}

export class SetLossTolerancePctCall__Inputs {
  _call: SetLossTolerancePctCall;

  constructor(call: SetLossTolerancePctCall) {
    this._call = call;
  }

  get pct(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetLossTolerancePctCall__Outputs {
  _call: SetLossTolerancePctCall;

  constructor(call: SetLossTolerancePctCall) {
    this._call = call;
  }
}

export class SetPerfFeePctCall extends ethereum.Call {
  get inputs(): SetPerfFeePctCall__Inputs {
    return new SetPerfFeePctCall__Inputs(this);
  }

  get outputs(): SetPerfFeePctCall__Outputs {
    return new SetPerfFeePctCall__Outputs(this);
  }
}

export class SetPerfFeePctCall__Inputs {
  _call: SetPerfFeePctCall;

  constructor(call: SetPerfFeePctCall) {
    this._call = call;
  }

  get _perfFeePct(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetPerfFeePctCall__Outputs {
  _call: SetPerfFeePctCall;

  constructor(call: SetPerfFeePctCall) {
    this._call = call;
  }
}

export class SetStrategyCall extends ethereum.Call {
  get inputs(): SetStrategyCall__Inputs {
    return new SetStrategyCall__Inputs(this);
  }

  get outputs(): SetStrategyCall__Outputs {
    return new SetStrategyCall__Outputs(this);
  }
}

export class SetStrategyCall__Inputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStrategyCall__Outputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class SponsorCall extends ethereum.Call {
  get inputs(): SponsorCall__Inputs {
    return new SponsorCall__Inputs(this);
  }

  get outputs(): SponsorCall__Outputs {
    return new SponsorCall__Outputs(this);
  }
}

export class SponsorCall__Inputs {
  _call: SponsorCall;

  constructor(call: SponsorCall) {
    this._call = call;
  }

  get _inputToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lockDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _slippage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SponsorCall__Outputs {
  _call: SponsorCall;

  constructor(call: SponsorCall) {
    this._call = call;
  }
}

export class TransferAdminRightsCall extends ethereum.Call {
  get inputs(): TransferAdminRightsCall__Inputs {
    return new TransferAdminRightsCall__Inputs(this);
  }

  get outputs(): TransferAdminRightsCall__Outputs {
    return new TransferAdminRightsCall__Outputs(this);
  }
}

export class TransferAdminRightsCall__Inputs {
  _call: TransferAdminRightsCall;

  constructor(call: TransferAdminRightsCall) {
    this._call = call;
  }

  get _newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdminRightsCall__Outputs {
  _call: TransferAdminRightsCall;

  constructor(call: TransferAdminRightsCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnsponsorCall extends ethereum.Call {
  get inputs(): UnsponsorCall__Inputs {
    return new UnsponsorCall__Inputs(this);
  }

  get outputs(): UnsponsorCall__Outputs {
    return new UnsponsorCall__Outputs(this);
  }
}

export class UnsponsorCall__Inputs {
  _call: UnsponsorCall;

  constructor(call: UnsponsorCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UnsponsorCall__Outputs {
  _call: UnsponsorCall;

  constructor(call: UnsponsorCall) {
    this._call = call;
  }
}

export class UpdateInvestedCall extends ethereum.Call {
  get inputs(): UpdateInvestedCall__Inputs {
    return new UpdateInvestedCall__Inputs(this);
  }

  get outputs(): UpdateInvestedCall__Outputs {
    return new UpdateInvestedCall__Outputs(this);
  }
}

export class UpdateInvestedCall__Inputs {
  _call: UpdateInvestedCall;

  constructor(call: UpdateInvestedCall) {
    this._call = call;
  }
}

export class UpdateInvestedCall__Outputs {
  _call: UpdateInvestedCall;

  constructor(call: UpdateInvestedCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawPerformanceFeeCall extends ethereum.Call {
  get inputs(): WithdrawPerformanceFeeCall__Inputs {
    return new WithdrawPerformanceFeeCall__Inputs(this);
  }

  get outputs(): WithdrawPerformanceFeeCall__Outputs {
    return new WithdrawPerformanceFeeCall__Outputs(this);
  }
}

export class WithdrawPerformanceFeeCall__Inputs {
  _call: WithdrawPerformanceFeeCall;

  constructor(call: WithdrawPerformanceFeeCall) {
    this._call = call;
  }
}

export class WithdrawPerformanceFeeCall__Outputs {
  _call: WithdrawPerformanceFeeCall;

  constructor(call: WithdrawPerformanceFeeCall) {
    this._call = call;
  }
}
