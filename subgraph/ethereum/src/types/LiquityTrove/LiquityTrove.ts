// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActivePoolAddressChanged extends ethereum.Event {
  get params(): ActivePoolAddressChanged__Params {
    return new ActivePoolAddressChanged__Params(this);
  }
}

export class ActivePoolAddressChanged__Params {
  _event: ActivePoolAddressChanged;

  constructor(event: ActivePoolAddressChanged) {
    this._event = event;
  }

  get _activePoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BaseRateUpdated extends ethereum.Event {
  get params(): BaseRateUpdated__Params {
    return new BaseRateUpdated__Params(this);
  }
}

export class BaseRateUpdated__Params {
  _event: BaseRateUpdated;

  constructor(event: BaseRateUpdated) {
    this._event = event;
  }

  get _baseRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BorrowerOperationsAddressChanged extends ethereum.Event {
  get params(): BorrowerOperationsAddressChanged__Params {
    return new BorrowerOperationsAddressChanged__Params(this);
  }
}

export class BorrowerOperationsAddressChanged__Params {
  _event: BorrowerOperationsAddressChanged;

  constructor(event: BorrowerOperationsAddressChanged) {
    this._event = event;
  }

  get _newBorrowerOperationsAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CollSurplusPoolAddressChanged extends ethereum.Event {
  get params(): CollSurplusPoolAddressChanged__Params {
    return new CollSurplusPoolAddressChanged__Params(this);
  }
}

export class CollSurplusPoolAddressChanged__Params {
  _event: CollSurplusPoolAddressChanged;

  constructor(event: CollSurplusPoolAddressChanged) {
    this._event = event;
  }

  get _collSurplusPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DefaultPoolAddressChanged extends ethereum.Event {
  get params(): DefaultPoolAddressChanged__Params {
    return new DefaultPoolAddressChanged__Params(this);
  }
}

export class DefaultPoolAddressChanged__Params {
  _event: DefaultPoolAddressChanged;

  constructor(event: DefaultPoolAddressChanged) {
    this._event = event;
  }

  get _defaultPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GasPoolAddressChanged extends ethereum.Event {
  get params(): GasPoolAddressChanged__Params {
    return new GasPoolAddressChanged__Params(this);
  }
}

export class GasPoolAddressChanged__Params {
  _event: GasPoolAddressChanged;

  constructor(event: GasPoolAddressChanged) {
    this._event = event;
  }

  get _gasPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LQTYStakingAddressChanged extends ethereum.Event {
  get params(): LQTYStakingAddressChanged__Params {
    return new LQTYStakingAddressChanged__Params(this);
  }
}

export class LQTYStakingAddressChanged__Params {
  _event: LQTYStakingAddressChanged;

  constructor(event: LQTYStakingAddressChanged) {
    this._event = event;
  }

  get _lqtyStakingAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LQTYTokenAddressChanged extends ethereum.Event {
  get params(): LQTYTokenAddressChanged__Params {
    return new LQTYTokenAddressChanged__Params(this);
  }
}

export class LQTYTokenAddressChanged__Params {
  _event: LQTYTokenAddressChanged;

  constructor(event: LQTYTokenAddressChanged) {
    this._event = event;
  }

  get _lqtyTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LTermsUpdated extends ethereum.Event {
  get params(): LTermsUpdated__Params {
    return new LTermsUpdated__Params(this);
  }
}

export class LTermsUpdated__Params {
  _event: LTermsUpdated;

  constructor(event: LTermsUpdated) {
    this._event = event;
  }

  get _L_ETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _L_LUSDDebt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LUSDTokenAddressChanged extends ethereum.Event {
  get params(): LUSDTokenAddressChanged__Params {
    return new LUSDTokenAddressChanged__Params(this);
  }
}

export class LUSDTokenAddressChanged__Params {
  _event: LUSDTokenAddressChanged;

  constructor(event: LUSDTokenAddressChanged) {
    this._event = event;
  }

  get _newLUSDTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LastFeeOpTimeUpdated extends ethereum.Event {
  get params(): LastFeeOpTimeUpdated__Params {
    return new LastFeeOpTimeUpdated__Params(this);
  }
}

export class LastFeeOpTimeUpdated__Params {
  _event: LastFeeOpTimeUpdated;

  constructor(event: LastFeeOpTimeUpdated) {
    this._event = event;
  }

  get _lastFeeOpTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Liquidation extends ethereum.Event {
  get params(): Liquidation__Params {
    return new Liquidation__Params(this);
  }
}

export class Liquidation__Params {
  _event: Liquidation;

  constructor(event: Liquidation) {
    this._event = event;
  }

  get _liquidatedDebt(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _liquidatedColl(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _collGasCompensation(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _LUSDGasCompensation(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PriceFeedAddressChanged extends ethereum.Event {
  get params(): PriceFeedAddressChanged__Params {
    return new PriceFeedAddressChanged__Params(this);
  }
}

export class PriceFeedAddressChanged__Params {
  _event: PriceFeedAddressChanged;

  constructor(event: PriceFeedAddressChanged) {
    this._event = event;
  }

  get _newPriceFeedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Redemption extends ethereum.Event {
  get params(): Redemption__Params {
    return new Redemption__Params(this);
  }
}

export class Redemption__Params {
  _event: Redemption;

  constructor(event: Redemption) {
    this._event = event;
  }

  get _attemptedLUSDAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _actualLUSDAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _ETHSent(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _ETHFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SortedTrovesAddressChanged extends ethereum.Event {
  get params(): SortedTrovesAddressChanged__Params {
    return new SortedTrovesAddressChanged__Params(this);
  }
}

export class SortedTrovesAddressChanged__Params {
  _event: SortedTrovesAddressChanged;

  constructor(event: SortedTrovesAddressChanged) {
    this._event = event;
  }

  get _sortedTrovesAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StabilityPoolAddressChanged extends ethereum.Event {
  get params(): StabilityPoolAddressChanged__Params {
    return new StabilityPoolAddressChanged__Params(this);
  }
}

export class StabilityPoolAddressChanged__Params {
  _event: StabilityPoolAddressChanged;

  constructor(event: StabilityPoolAddressChanged) {
    this._event = event;
  }

  get _stabilityPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SystemSnapshotsUpdated extends ethereum.Event {
  get params(): SystemSnapshotsUpdated__Params {
    return new SystemSnapshotsUpdated__Params(this);
  }
}

export class SystemSnapshotsUpdated__Params {
  _event: SystemSnapshotsUpdated;

  constructor(event: SystemSnapshotsUpdated) {
    this._event = event;
  }

  get _totalStakesSnapshot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _totalCollateralSnapshot(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TotalStakesUpdated extends ethereum.Event {
  get params(): TotalStakesUpdated__Params {
    return new TotalStakesUpdated__Params(this);
  }
}

export class TotalStakesUpdated__Params {
  _event: TotalStakesUpdated;

  constructor(event: TotalStakesUpdated) {
    this._event = event;
  }

  get _newTotalStakes(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TroveIndexUpdated extends ethereum.Event {
  get params(): TroveIndexUpdated__Params {
    return new TroveIndexUpdated__Params(this);
  }
}

export class TroveIndexUpdated__Params {
  _event: TroveIndexUpdated;

  constructor(event: TroveIndexUpdated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TroveLiquidated extends ethereum.Event {
  get params(): TroveLiquidated__Params {
    return new TroveLiquidated__Params(this);
  }
}

export class TroveLiquidated__Params {
  _event: TroveLiquidated;

  constructor(event: TroveLiquidated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _debt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _coll(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _operation(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class TroveSnapshotsUpdated extends ethereum.Event {
  get params(): TroveSnapshotsUpdated__Params {
    return new TroveSnapshotsUpdated__Params(this);
  }
}

export class TroveSnapshotsUpdated__Params {
  _event: TroveSnapshotsUpdated;

  constructor(event: TroveSnapshotsUpdated) {
    this._event = event;
  }

  get _L_ETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _L_LUSDDebt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TroveUpdated extends ethereum.Event {
  get params(): TroveUpdated__Params {
    return new TroveUpdated__Params(this);
  }
}

export class TroveUpdated__Params {
  _event: TroveUpdated;

  constructor(event: TroveUpdated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _debt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _coll(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _stake(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _operation(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class LiquityTrove__TrovesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class LiquityTrove__getEntireDebtAndCollResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class LiquityTrove__rewardSnapshotsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class LiquityTrove extends ethereum.SmartContract {
  static bind(address: Address): LiquityTrove {
    return new LiquityTrove("LiquityTrove", address);
  }

  BETA(): BigInt {
    let result = super.call("BETA", "BETA():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BETA(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BETA", "BETA():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BOOTSTRAP_PERIOD(): BigInt {
    let result = super.call(
      "BOOTSTRAP_PERIOD",
      "BOOTSTRAP_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BOOTSTRAP_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BOOTSTRAP_PERIOD",
      "BOOTSTRAP_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BORROWING_FEE_FLOOR(): BigInt {
    let result = super.call(
      "BORROWING_FEE_FLOOR",
      "BORROWING_FEE_FLOOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BORROWING_FEE_FLOOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BORROWING_FEE_FLOOR",
      "BORROWING_FEE_FLOOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CCR(): BigInt {
    let result = super.call("CCR", "CCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("CCR", "CCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DECIMAL_PRECISION(): BigInt {
    let result = super.call(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DECIMAL_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LUSD_GAS_COMPENSATION(): BigInt {
    let result = super.call(
      "LUSD_GAS_COMPENSATION",
      "LUSD_GAS_COMPENSATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_LUSD_GAS_COMPENSATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LUSD_GAS_COMPENSATION",
      "LUSD_GAS_COMPENSATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  L_ETH(): BigInt {
    let result = super.call("L_ETH", "L_ETH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_L_ETH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("L_ETH", "L_ETH():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  L_LUSDDebt(): BigInt {
    let result = super.call("L_LUSDDebt", "L_LUSDDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_L_LUSDDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("L_LUSDDebt", "L_LUSDDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BORROWING_FEE(): BigInt {
    let result = super.call(
      "MAX_BORROWING_FEE",
      "MAX_BORROWING_FEE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_BORROWING_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_BORROWING_FEE",
      "MAX_BORROWING_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MCR(): BigInt {
    let result = super.call("MCR", "MCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MCR", "MCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINUTE_DECAY_FACTOR(): BigInt {
    let result = super.call(
      "MINUTE_DECAY_FACTOR",
      "MINUTE_DECAY_FACTOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINUTE_DECAY_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINUTE_DECAY_FACTOR",
      "MINUTE_DECAY_FACTOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_NET_DEBT(): BigInt {
    let result = super.call("MIN_NET_DEBT", "MIN_NET_DEBT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_NET_DEBT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_NET_DEBT", "MIN_NET_DEBT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  PERCENT_DIVISOR(): BigInt {
    let result = super.call(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENT_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REDEMPTION_FEE_FLOOR(): BigInt {
    let result = super.call(
      "REDEMPTION_FEE_FLOOR",
      "REDEMPTION_FEE_FLOOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REDEMPTION_FEE_FLOOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REDEMPTION_FEE_FLOOR",
      "REDEMPTION_FEE_FLOOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SECONDS_IN_ONE_MINUTE(): BigInt {
    let result = super.call(
      "SECONDS_IN_ONE_MINUTE",
      "SECONDS_IN_ONE_MINUTE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SECONDS_IN_ONE_MINUTE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SECONDS_IN_ONE_MINUTE",
      "SECONDS_IN_ONE_MINUTE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TroveOwners(param0: BigInt): Address {
    let result = super.call("TroveOwners", "TroveOwners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_TroveOwners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "TroveOwners",
      "TroveOwners(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  Troves(param0: Address): LiquityTrove__TrovesResult {
    let result = super.call(
      "Troves",
      "Troves(address):(uint256,uint256,uint256,uint8,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new LiquityTrove__TrovesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBigInt()
    );
  }

  try_Troves(param0: Address): ethereum.CallResult<LiquityTrove__TrovesResult> {
    let result = super.tryCall(
      "Troves",
      "Troves(address):(uint256,uint256,uint256,uint8,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LiquityTrove__TrovesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBigInt()
      )
    );
  }

  _100pct(): BigInt {
    let result = super.call("_100pct", "_100pct():(uint256)", []);

    return result[0].toBigInt();
  }

  try__100pct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_100pct", "_100pct():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activePool(): Address {
    let result = super.call("activePool", "activePool():(address)", []);

    return result[0].toAddress();
  }

  try_activePool(): ethereum.CallResult<Address> {
    let result = super.tryCall("activePool", "activePool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addTroveOwnerToArray(_borrower: Address): BigInt {
    let result = super.call(
      "addTroveOwnerToArray",
      "addTroveOwnerToArray(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_addTroveOwnerToArray(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addTroveOwnerToArray",
      "addTroveOwnerToArray(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseRate(): BigInt {
    let result = super.call("baseRate", "baseRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_baseRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseRate", "baseRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowerOperationsAddress(): Address {
    let result = super.call(
      "borrowerOperationsAddress",
      "borrowerOperationsAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_borrowerOperationsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowerOperationsAddress",
      "borrowerOperationsAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkRecoveryMode(_price: BigInt): boolean {
    let result = super.call(
      "checkRecoveryMode",
      "checkRecoveryMode(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_price)]
    );

    return result[0].toBoolean();
  }

  try_checkRecoveryMode(_price: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkRecoveryMode",
      "checkRecoveryMode(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decreaseTroveColl(_borrower: Address, _collDecrease: BigInt): BigInt {
    let result = super.call(
      "decreaseTroveColl",
      "decreaseTroveColl(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_collDecrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_decreaseTroveColl(
    _borrower: Address,
    _collDecrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decreaseTroveColl",
      "decreaseTroveColl(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_collDecrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decreaseTroveDebt(_borrower: Address, _debtDecrease: BigInt): BigInt {
    let result = super.call(
      "decreaseTroveDebt",
      "decreaseTroveDebt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtDecrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_decreaseTroveDebt(
    _borrower: Address,
    _debtDecrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decreaseTroveDebt",
      "decreaseTroveDebt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtDecrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultPool(): Address {
    let result = super.call("defaultPool", "defaultPool():(address)", []);

    return result[0].toAddress();
  }

  try_defaultPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("defaultPool", "defaultPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBorrowingFee(_LUSDDebt: BigInt): BigInt {
    let result = super.call(
      "getBorrowingFee",
      "getBorrowingFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_LUSDDebt)]
    );

    return result[0].toBigInt();
  }

  try_getBorrowingFee(_LUSDDebt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingFee",
      "getBorrowingFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_LUSDDebt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingFeeWithDecay(_LUSDDebt: BigInt): BigInt {
    let result = super.call(
      "getBorrowingFeeWithDecay",
      "getBorrowingFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_LUSDDebt)]
    );

    return result[0].toBigInt();
  }

  try_getBorrowingFeeWithDecay(_LUSDDebt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingFeeWithDecay",
      "getBorrowingFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_LUSDDebt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingRate(): BigInt {
    let result = super.call(
      "getBorrowingRate",
      "getBorrowingRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBorrowingRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingRate",
      "getBorrowingRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingRateWithDecay(): BigInt {
    let result = super.call(
      "getBorrowingRateWithDecay",
      "getBorrowingRateWithDecay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBorrowingRateWithDecay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingRateWithDecay",
      "getBorrowingRateWithDecay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentICR(_borrower: Address, _price: BigInt): BigInt {
    let result = super.call(
      "getCurrentICR",
      "getCurrentICR(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCurrentICR(
    _borrower: Address,
    _price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentICR",
      "getCurrentICR(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntireDebtAndColl(
    _borrower: Address
  ): LiquityTrove__getEntireDebtAndCollResult {
    let result = super.call(
      "getEntireDebtAndColl",
      "getEntireDebtAndColl(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new LiquityTrove__getEntireDebtAndCollResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getEntireDebtAndColl(
    _borrower: Address
  ): ethereum.CallResult<LiquityTrove__getEntireDebtAndCollResult> {
    let result = super.tryCall(
      "getEntireDebtAndColl",
      "getEntireDebtAndColl(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LiquityTrove__getEntireDebtAndCollResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getEntireSystemColl(): BigInt {
    let result = super.call(
      "getEntireSystemColl",
      "getEntireSystemColl():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemColl(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemColl",
      "getEntireSystemColl():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntireSystemDebt(): BigInt {
    let result = super.call(
      "getEntireSystemDebt",
      "getEntireSystemDebt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemDebt",
      "getEntireSystemDebt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNominalICR(_borrower: Address): BigInt {
    let result = super.call(
      "getNominalICR",
      "getNominalICR(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getNominalICR(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNominalICR",
      "getNominalICR(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingETHReward(_borrower: Address): BigInt {
    let result = super.call(
      "getPendingETHReward",
      "getPendingETHReward(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getPendingETHReward(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingETHReward",
      "getPendingETHReward(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingLUSDDebtReward(_borrower: Address): BigInt {
    let result = super.call(
      "getPendingLUSDDebtReward",
      "getPendingLUSDDebtReward(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getPendingLUSDDebtReward(
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingLUSDDebtReward",
      "getPendingLUSDDebtReward(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionFeeWithDecay(_ETHDrawn: BigInt): BigInt {
    let result = super.call(
      "getRedemptionFeeWithDecay",
      "getRedemptionFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_ETHDrawn)]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionFeeWithDecay(
    _ETHDrawn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionFeeWithDecay",
      "getRedemptionFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_ETHDrawn)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionRate(): BigInt {
    let result = super.call(
      "getRedemptionRate",
      "getRedemptionRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRedemptionRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionRate",
      "getRedemptionRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionRateWithDecay(): BigInt {
    let result = super.call(
      "getRedemptionRateWithDecay",
      "getRedemptionRateWithDecay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRedemptionRateWithDecay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionRateWithDecay",
      "getRedemptionRateWithDecay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTCR(_price: BigInt): BigInt {
    let result = super.call("getTCR", "getTCR(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_price)
    ]);

    return result[0].toBigInt();
  }

  try_getTCR(_price: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTCR", "getTCR(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_price)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveColl(_borrower: Address): BigInt {
    let result = super.call("getTroveColl", "getTroveColl(address):(uint256)", [
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBigInt();
  }

  try_getTroveColl(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveColl",
      "getTroveColl(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveDebt(_borrower: Address): BigInt {
    let result = super.call("getTroveDebt", "getTroveDebt(address):(uint256)", [
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBigInt();
  }

  try_getTroveDebt(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveDebt",
      "getTroveDebt(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveFromTroveOwnersArray(_index: BigInt): Address {
    let result = super.call(
      "getTroveFromTroveOwnersArray",
      "getTroveFromTroveOwnersArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toAddress();
  }

  try_getTroveFromTroveOwnersArray(
    _index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTroveFromTroveOwnersArray",
      "getTroveFromTroveOwnersArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTroveOwnersCount(): BigInt {
    let result = super.call(
      "getTroveOwnersCount",
      "getTroveOwnersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTroveOwnersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveOwnersCount",
      "getTroveOwnersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveStake(_borrower: Address): BigInt {
    let result = super.call(
      "getTroveStake",
      "getTroveStake(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getTroveStake(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveStake",
      "getTroveStake(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveStatus(_borrower: Address): BigInt {
    let result = super.call(
      "getTroveStatus",
      "getTroveStatus(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getTroveStatus(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveStatus",
      "getTroveStatus(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasPendingRewards(_borrower: Address): boolean {
    let result = super.call(
      "hasPendingRewards",
      "hasPendingRewards(address):(bool)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBoolean();
  }

  try_hasPendingRewards(_borrower: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasPendingRewards",
      "hasPendingRewards(address):(bool)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseTroveColl(_borrower: Address, _collIncrease: BigInt): BigInt {
    let result = super.call(
      "increaseTroveColl",
      "increaseTroveColl(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_collIncrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_increaseTroveColl(
    _borrower: Address,
    _collIncrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "increaseTroveColl",
      "increaseTroveColl(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_collIncrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseTroveDebt(_borrower: Address, _debtIncrease: BigInt): BigInt {
    let result = super.call(
      "increaseTroveDebt",
      "increaseTroveDebt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtIncrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_increaseTroveDebt(
    _borrower: Address,
    _debtIncrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "increaseTroveDebt",
      "increaseTroveDebt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtIncrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastETHError_Redistribution(): BigInt {
    let result = super.call(
      "lastETHError_Redistribution",
      "lastETHError_Redistribution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastETHError_Redistribution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastETHError_Redistribution",
      "lastETHError_Redistribution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastFeeOperationTime(): BigInt {
    let result = super.call(
      "lastFeeOperationTime",
      "lastFeeOperationTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastFeeOperationTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFeeOperationTime",
      "lastFeeOperationTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastLUSDDebtError_Redistribution(): BigInt {
    let result = super.call(
      "lastLUSDDebtError_Redistribution",
      "lastLUSDDebtError_Redistribution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastLUSDDebtError_Redistribution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastLUSDDebtError_Redistribution",
      "lastLUSDDebtError_Redistribution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lqtyStaking(): Address {
    let result = super.call("lqtyStaking", "lqtyStaking():(address)", []);

    return result[0].toAddress();
  }

  try_lqtyStaking(): ethereum.CallResult<Address> {
    let result = super.tryCall("lqtyStaking", "lqtyStaking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lqtyToken(): Address {
    let result = super.call("lqtyToken", "lqtyToken():(address)", []);

    return result[0].toAddress();
  }

  try_lqtyToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lqtyToken", "lqtyToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lusdToken(): Address {
    let result = super.call("lusdToken", "lusdToken():(address)", []);

    return result[0].toAddress();
  }

  try_lusdToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lusdToken", "lusdToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceFeed(): Address {
    let result = super.call("priceFeed", "priceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeed", "priceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardSnapshots(param0: Address): LiquityTrove__rewardSnapshotsResult {
    let result = super.call(
      "rewardSnapshots",
      "rewardSnapshots(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new LiquityTrove__rewardSnapshotsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_rewardSnapshots(
    param0: Address
  ): ethereum.CallResult<LiquityTrove__rewardSnapshotsResult> {
    let result = super.tryCall(
      "rewardSnapshots",
      "rewardSnapshots(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LiquityTrove__rewardSnapshotsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  sortedTroves(): Address {
    let result = super.call("sortedTroves", "sortedTroves():(address)", []);

    return result[0].toAddress();
  }

  try_sortedTroves(): ethereum.CallResult<Address> {
    let result = super.tryCall("sortedTroves", "sortedTroves():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stabilityPool(): Address {
    let result = super.call("stabilityPool", "stabilityPool():(address)", []);

    return result[0].toAddress();
  }

  try_stabilityPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stabilityPool",
      "stabilityPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalCollateralSnapshot(): BigInt {
    let result = super.call(
      "totalCollateralSnapshot",
      "totalCollateralSnapshot():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCollateralSnapshot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateralSnapshot",
      "totalCollateralSnapshot():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakes(): BigInt {
    let result = super.call("totalStakes", "totalStakes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStakes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStakes", "totalStakes():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakesSnapshot(): BigInt {
    let result = super.call(
      "totalStakesSnapshot",
      "totalStakesSnapshot():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStakesSnapshot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakesSnapshot",
      "totalStakesSnapshot():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateStakeAndTotalStakes(_borrower: Address): BigInt {
    let result = super.call(
      "updateStakeAndTotalStakes",
      "updateStakeAndTotalStakes(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_updateStakeAndTotalStakes(
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateStakeAndTotalStakes",
      "updateStakeAndTotalStakes(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddTroveOwnerToArrayCall extends ethereum.Call {
  get inputs(): AddTroveOwnerToArrayCall__Inputs {
    return new AddTroveOwnerToArrayCall__Inputs(this);
  }

  get outputs(): AddTroveOwnerToArrayCall__Outputs {
    return new AddTroveOwnerToArrayCall__Outputs(this);
  }
}

export class AddTroveOwnerToArrayCall__Inputs {
  _call: AddTroveOwnerToArrayCall;

  constructor(call: AddTroveOwnerToArrayCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTroveOwnerToArrayCall__Outputs {
  _call: AddTroveOwnerToArrayCall;

  constructor(call: AddTroveOwnerToArrayCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApplyPendingRewardsCall extends ethereum.Call {
  get inputs(): ApplyPendingRewardsCall__Inputs {
    return new ApplyPendingRewardsCall__Inputs(this);
  }

  get outputs(): ApplyPendingRewardsCall__Outputs {
    return new ApplyPendingRewardsCall__Outputs(this);
  }
}

export class ApplyPendingRewardsCall__Inputs {
  _call: ApplyPendingRewardsCall;

  constructor(call: ApplyPendingRewardsCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApplyPendingRewardsCall__Outputs {
  _call: ApplyPendingRewardsCall;

  constructor(call: ApplyPendingRewardsCall) {
    this._call = call;
  }
}

export class BatchLiquidateTrovesCall extends ethereum.Call {
  get inputs(): BatchLiquidateTrovesCall__Inputs {
    return new BatchLiquidateTrovesCall__Inputs(this);
  }

  get outputs(): BatchLiquidateTrovesCall__Outputs {
    return new BatchLiquidateTrovesCall__Outputs(this);
  }
}

export class BatchLiquidateTrovesCall__Inputs {
  _call: BatchLiquidateTrovesCall;

  constructor(call: BatchLiquidateTrovesCall) {
    this._call = call;
  }

  get _troveArray(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class BatchLiquidateTrovesCall__Outputs {
  _call: BatchLiquidateTrovesCall;

  constructor(call: BatchLiquidateTrovesCall) {
    this._call = call;
  }
}

export class CloseTroveCall extends ethereum.Call {
  get inputs(): CloseTroveCall__Inputs {
    return new CloseTroveCall__Inputs(this);
  }

  get outputs(): CloseTroveCall__Outputs {
    return new CloseTroveCall__Outputs(this);
  }
}

export class CloseTroveCall__Inputs {
  _call: CloseTroveCall;

  constructor(call: CloseTroveCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CloseTroveCall__Outputs {
  _call: CloseTroveCall;

  constructor(call: CloseTroveCall) {
    this._call = call;
  }
}

export class DecayBaseRateFromBorrowingCall extends ethereum.Call {
  get inputs(): DecayBaseRateFromBorrowingCall__Inputs {
    return new DecayBaseRateFromBorrowingCall__Inputs(this);
  }

  get outputs(): DecayBaseRateFromBorrowingCall__Outputs {
    return new DecayBaseRateFromBorrowingCall__Outputs(this);
  }
}

export class DecayBaseRateFromBorrowingCall__Inputs {
  _call: DecayBaseRateFromBorrowingCall;

  constructor(call: DecayBaseRateFromBorrowingCall) {
    this._call = call;
  }
}

export class DecayBaseRateFromBorrowingCall__Outputs {
  _call: DecayBaseRateFromBorrowingCall;

  constructor(call: DecayBaseRateFromBorrowingCall) {
    this._call = call;
  }
}

export class DecreaseTroveCollCall extends ethereum.Call {
  get inputs(): DecreaseTroveCollCall__Inputs {
    return new DecreaseTroveCollCall__Inputs(this);
  }

  get outputs(): DecreaseTroveCollCall__Outputs {
    return new DecreaseTroveCollCall__Outputs(this);
  }
}

export class DecreaseTroveCollCall__Inputs {
  _call: DecreaseTroveCollCall;

  constructor(call: DecreaseTroveCollCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collDecrease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseTroveCollCall__Outputs {
  _call: DecreaseTroveCollCall;

  constructor(call: DecreaseTroveCollCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseTroveDebtCall extends ethereum.Call {
  get inputs(): DecreaseTroveDebtCall__Inputs {
    return new DecreaseTroveDebtCall__Inputs(this);
  }

  get outputs(): DecreaseTroveDebtCall__Outputs {
    return new DecreaseTroveDebtCall__Outputs(this);
  }
}

export class DecreaseTroveDebtCall__Inputs {
  _call: DecreaseTroveDebtCall;

  constructor(call: DecreaseTroveDebtCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _debtDecrease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseTroveDebtCall__Outputs {
  _call: DecreaseTroveDebtCall;

  constructor(call: DecreaseTroveDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseTroveCollCall extends ethereum.Call {
  get inputs(): IncreaseTroveCollCall__Inputs {
    return new IncreaseTroveCollCall__Inputs(this);
  }

  get outputs(): IncreaseTroveCollCall__Outputs {
    return new IncreaseTroveCollCall__Outputs(this);
  }
}

export class IncreaseTroveCollCall__Inputs {
  _call: IncreaseTroveCollCall;

  constructor(call: IncreaseTroveCollCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collIncrease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseTroveCollCall__Outputs {
  _call: IncreaseTroveCollCall;

  constructor(call: IncreaseTroveCollCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseTroveDebtCall extends ethereum.Call {
  get inputs(): IncreaseTroveDebtCall__Inputs {
    return new IncreaseTroveDebtCall__Inputs(this);
  }

  get outputs(): IncreaseTroveDebtCall__Outputs {
    return new IncreaseTroveDebtCall__Outputs(this);
  }
}

export class IncreaseTroveDebtCall__Inputs {
  _call: IncreaseTroveDebtCall;

  constructor(call: IncreaseTroveDebtCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _debtIncrease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseTroveDebtCall__Outputs {
  _call: IncreaseTroveDebtCall;

  constructor(call: IncreaseTroveDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class LiquidateTrovesCall extends ethereum.Call {
  get inputs(): LiquidateTrovesCall__Inputs {
    return new LiquidateTrovesCall__Inputs(this);
  }

  get outputs(): LiquidateTrovesCall__Outputs {
    return new LiquidateTrovesCall__Outputs(this);
  }
}

export class LiquidateTrovesCall__Inputs {
  _call: LiquidateTrovesCall;

  constructor(call: LiquidateTrovesCall) {
    this._call = call;
  }

  get _n(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateTrovesCall__Outputs {
  _call: LiquidateTrovesCall;

  constructor(call: LiquidateTrovesCall) {
    this._call = call;
  }
}

export class RedeemCollateralCall extends ethereum.Call {
  get inputs(): RedeemCollateralCall__Inputs {
    return new RedeemCollateralCall__Inputs(this);
  }

  get outputs(): RedeemCollateralCall__Outputs {
    return new RedeemCollateralCall__Outputs(this);
  }
}

export class RedeemCollateralCall__Inputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }

  get _LUSDamount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _firstRedemptionHint(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _upperPartialRedemptionHint(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lowerPartialRedemptionHint(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _partialRedemptionHintNICR(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _maxIterations(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxFeePercentage(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RedeemCollateralCall__Outputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }
}

export class RemoveStakeCall extends ethereum.Call {
  get inputs(): RemoveStakeCall__Inputs {
    return new RemoveStakeCall__Inputs(this);
  }

  get outputs(): RemoveStakeCall__Outputs {
    return new RemoveStakeCall__Outputs(this);
  }
}

export class RemoveStakeCall__Inputs {
  _call: RemoveStakeCall;

  constructor(call: RemoveStakeCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStakeCall__Outputs {
  _call: RemoveStakeCall;

  constructor(call: RemoveStakeCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _borrowerOperationsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _activePoolAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _defaultPoolAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stabilityPoolAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _gasPoolAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _collSurplusPoolAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _priceFeedAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _lusdTokenAddress(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _sortedTrovesAddress(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _lqtyTokenAddress(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _lqtyStakingAddress(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetTroveStatusCall extends ethereum.Call {
  get inputs(): SetTroveStatusCall__Inputs {
    return new SetTroveStatusCall__Inputs(this);
  }

  get outputs(): SetTroveStatusCall__Outputs {
    return new SetTroveStatusCall__Outputs(this);
  }
}

export class SetTroveStatusCall__Inputs {
  _call: SetTroveStatusCall;

  constructor(call: SetTroveStatusCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _num(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTroveStatusCall__Outputs {
  _call: SetTroveStatusCall;

  constructor(call: SetTroveStatusCall) {
    this._call = call;
  }
}

export class UpdateStakeAndTotalStakesCall extends ethereum.Call {
  get inputs(): UpdateStakeAndTotalStakesCall__Inputs {
    return new UpdateStakeAndTotalStakesCall__Inputs(this);
  }

  get outputs(): UpdateStakeAndTotalStakesCall__Outputs {
    return new UpdateStakeAndTotalStakesCall__Outputs(this);
  }
}

export class UpdateStakeAndTotalStakesCall__Inputs {
  _call: UpdateStakeAndTotalStakesCall;

  constructor(call: UpdateStakeAndTotalStakesCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateStakeAndTotalStakesCall__Outputs {
  _call: UpdateStakeAndTotalStakesCall;

  constructor(call: UpdateStakeAndTotalStakesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateTroveRewardSnapshotsCall extends ethereum.Call {
  get inputs(): UpdateTroveRewardSnapshotsCall__Inputs {
    return new UpdateTroveRewardSnapshotsCall__Inputs(this);
  }

  get outputs(): UpdateTroveRewardSnapshotsCall__Outputs {
    return new UpdateTroveRewardSnapshotsCall__Outputs(this);
  }
}

export class UpdateTroveRewardSnapshotsCall__Inputs {
  _call: UpdateTroveRewardSnapshotsCall;

  constructor(call: UpdateTroveRewardSnapshotsCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTroveRewardSnapshotsCall__Outputs {
  _call: UpdateTroveRewardSnapshotsCall;

  constructor(call: UpdateTroveRewardSnapshotsCall) {
    this._call = call;
  }
}
