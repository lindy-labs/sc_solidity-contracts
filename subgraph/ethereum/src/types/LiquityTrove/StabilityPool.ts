// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ETHGainWithdrawn extends ethereum.Event {
  get params(): ETHGainWithdrawn__Params {
    return new ETHGainWithdrawn__Params(this);
  }
}

export class ETHGainWithdrawn__Params {
  _event: ETHGainWithdrawn;

  constructor(event: ETHGainWithdrawn) {
    this._event = event;
  }

  get _depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _ETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _LUSDLoss(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StabilityPoolETHBalanceUpdated extends ethereum.Event {
  get params(): StabilityPoolETHBalanceUpdated__Params {
    return new StabilityPoolETHBalanceUpdated__Params(this);
  }
}

export class StabilityPoolETHBalanceUpdated__Params {
  _event: StabilityPoolETHBalanceUpdated;

  constructor(event: StabilityPoolETHBalanceUpdated) {
    this._event = event;
  }

  get _newBalance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class StabilityPool extends ethereum.SmartContract {
  static bind(address: Address): StabilityPool {
    return new StabilityPool("StabilityPool", address);
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCompoundedLUSDDeposit(_depositor: Address): BigInt {
    let result = super.call(
      "getCompoundedLUSDDeposit",
      "getCompoundedLUSDDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(_depositor)]
    );

    return result[0].toBigInt();
  }

  try_getCompoundedLUSDDeposit(
    _depositor: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCompoundedLUSDDeposit",
      "getCompoundedLUSDDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(_depositor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDepositorETHGain(param0: Address): BigInt {
    let result = super.call(
      "getDepositorETHGain",
      "getDepositorETHGain(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_getDepositorETHGain(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositorETHGain",
      "getDepositorETHGain(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDepositorLQTYGain(param0: Address): BigInt {
    let result = super.call(
      "getDepositorLQTYGain",
      "getDepositorLQTYGain(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_getDepositorLQTYGain(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositorLQTYGain",
      "getDepositorLQTYGain(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lusd(): Address {
    let result = super.call("lusd", "lusd():(address)", []);

    return result[0].toAddress();
  }

  try_lusd(): ethereum.CallResult<Address> {
    let result = super.tryCall("lusd", "lusd():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pricefeed(): Address {
    let result = super.call("pricefeed", "pricefeed():(address)", []);

    return result[0].toAddress();
  }

  try_pricefeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("pricefeed", "pricefeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  troveManager(): Address {
    let result = super.call("troveManager", "troveManager():(address)", []);

    return result[0].toAddress();
  }

  try_troveManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("troveManager", "troveManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _lusd(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pricefeed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OffsetCall extends ethereum.Call {
  get inputs(): OffsetCall__Inputs {
    return new OffsetCall__Inputs(this);
  }

  get outputs(): OffsetCall__Outputs {
    return new OffsetCall__Outputs(this);
  }
}

export class OffsetCall__Inputs {
  _call: OffsetCall;

  constructor(call: OffsetCall) {
    this._call = call;
  }

  get _debtToOffset(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collToAdd(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OffsetCall__Outputs {
  _call: OffsetCall;

  constructor(call: OffsetCall) {
    this._call = call;
  }
}

export class ProvideToSPCall extends ethereum.Call {
  get inputs(): ProvideToSPCall__Inputs {
    return new ProvideToSPCall__Inputs(this);
  }

  get outputs(): ProvideToSPCall__Outputs {
    return new ProvideToSPCall__Outputs(this);
  }
}

export class ProvideToSPCall__Inputs {
  _call: ProvideToSPCall;

  constructor(call: ProvideToSPCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ProvideToSPCall__Outputs {
  _call: ProvideToSPCall;

  constructor(call: ProvideToSPCall) {
    this._call = call;
  }
}

export class WithdrawFromSPCall extends ethereum.Call {
  get inputs(): WithdrawFromSPCall__Inputs {
    return new WithdrawFromSPCall__Inputs(this);
  }

  get outputs(): WithdrawFromSPCall__Outputs {
    return new WithdrawFromSPCall__Outputs(this);
  }
}

export class WithdrawFromSPCall__Inputs {
  _call: WithdrawFromSPCall;

  constructor(call: WithdrawFromSPCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFromSPCall__Outputs {
  _call: WithdrawFromSPCall;

  constructor(call: WithdrawFromSPCall) {
    this._call = call;
  }
}
