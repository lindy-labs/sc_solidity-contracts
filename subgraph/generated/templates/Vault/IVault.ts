// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DepositBurned extends ethereum.Event {
  get params(): DepositBurned__Params {
    return new DepositBurned__Params(this);
  }
}

export class DepositBurned__Params {
  _event: DepositBurned;

  constructor(event: DepositBurned) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DepositMinted extends ethereum.Event {
  get params(): DepositMinted__Params {
    return new DepositMinted__Params(this);
  }
}

export class DepositMinted__Params {
  _event: DepositMinted;

  constructor(event: DepositMinted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get groupId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get depositor(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get claimer(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get claimerId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get lockedUntil(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[8].value.toBytes();
  }
}

export class InvestPercentageUpdated extends ethereum.Event {
  get params(): InvestPercentageUpdated__Params {
    return new InvestPercentageUpdated__Params(this);
  }
}

export class InvestPercentageUpdated__Params {
  _event: InvestPercentageUpdated;

  constructor(event: InvestPercentageUpdated) {
    this._event = event;
  }

  get percentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Invested extends ethereum.Event {
  get params(): Invested__Params {
    return new Invested__Params(this);
  }
}

export class Invested__Params {
  _event: Invested;

  constructor(event: Invested) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class StrategyUpdated extends ethereum.Event {
  get params(): StrategyUpdated__Params {
    return new StrategyUpdated__Params(this);
  }
}

export class StrategyUpdated__Params {
  _event: StrategyUpdated;

  constructor(event: StrategyUpdated) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class YieldClaimed extends ethereum.Event {
  get params(): YieldClaimed__Params {
    return new YieldClaimed__Params(this);
  }
}

export class YieldClaimed__Params {
  _event: YieldClaimed;

  constructor(event: YieldClaimed) {
    this._event = event;
  }

  get claimerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get burnedShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class IVault extends ethereum.SmartContract {
  static bind(address: Address): IVault {
    return new IVault("IVault", address);
  }

  investPerc(): BigInt {
    let result = super.call("investPerc", "investPerc():(uint256)", []);

    return result[0].toBigInt();
  }

  try_investPerc(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("investPerc", "investPerc():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  investableAmount(): BigInt {
    let result = super.call(
      "investableAmount",
      "investableAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_investableAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "investableAmount",
      "investableAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minLockPeriod(): BigInt {
    let result = super.call("minLockPeriod", "minLockPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minLockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minLockPeriod",
      "minLockPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnderlyingWithSponsor(): BigInt {
    let result = super.call(
      "totalUnderlyingWithSponsor",
      "totalUnderlyingWithSponsor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnderlyingWithSponsor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnderlyingWithSponsor",
      "totalUnderlyingWithSponsor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yieldFor(_to: Address): BigInt {
    let result = super.call("yieldFor", "yieldFor(address):(uint256)", [
      ethereum.Value.fromAddress(_to)
    ]);

    return result[0].toBigInt();
  }

  try_yieldFor(_to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("yieldFor", "yieldFor(address):(uint256)", [
      ethereum.Value.fromAddress(_to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimYieldCall extends ethereum.Call {
  get inputs(): ClaimYieldCall__Inputs {
    return new ClaimYieldCall__Inputs(this);
  }

  get outputs(): ClaimYieldCall__Outputs {
    return new ClaimYieldCall__Outputs(this);
  }
}

export class ClaimYieldCall__Inputs {
  _call: ClaimYieldCall;

  constructor(call: ClaimYieldCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimYieldCall__Outputs {
  _call: ClaimYieldCall;

  constructor(call: ClaimYieldCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _params(): DepositCall_paramsStruct {
    return changetype<DepositCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall_paramsStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get claims(): Array<DepositCall_paramsClaimsStruct> {
    return this[1].toTupleArray<DepositCall_paramsClaimsStruct>();
  }

  get lockedUntil(): BigInt {
    return this[2].toBigInt();
  }
}

export class DepositCall_paramsClaimsStruct extends ethereum.Tuple {
  get pct(): i32 {
    return this[0].toI32();
  }

  get beneficiary(): Address {
    return this[1].toAddress();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class ForceWithdrawCall extends ethereum.Call {
  get inputs(): ForceWithdrawCall__Inputs {
    return new ForceWithdrawCall__Inputs(this);
  }

  get outputs(): ForceWithdrawCall__Outputs {
    return new ForceWithdrawCall__Outputs(this);
  }
}

export class ForceWithdrawCall__Inputs {
  _call: ForceWithdrawCall;

  constructor(call: ForceWithdrawCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ForceWithdrawCall__Outputs {
  _call: ForceWithdrawCall;

  constructor(call: ForceWithdrawCall) {
    this._call = call;
  }
}

export class SetInvestPercCall extends ethereum.Call {
  get inputs(): SetInvestPercCall__Inputs {
    return new SetInvestPercCall__Inputs(this);
  }

  get outputs(): SetInvestPercCall__Outputs {
    return new SetInvestPercCall__Outputs(this);
  }
}

export class SetInvestPercCall__Inputs {
  _call: SetInvestPercCall;

  constructor(call: SetInvestPercCall) {
    this._call = call;
  }

  get _investPct(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetInvestPercCall__Outputs {
  _call: SetInvestPercCall;

  constructor(call: SetInvestPercCall) {
    this._call = call;
  }
}

export class SetStrategyCall extends ethereum.Call {
  get inputs(): SetStrategyCall__Inputs {
    return new SetStrategyCall__Inputs(this);
  }

  get outputs(): SetStrategyCall__Outputs {
    return new SetStrategyCall__Outputs(this);
  }
}

export class SetStrategyCall__Inputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStrategyCall__Outputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }
}

export class UpdateInvestedCall extends ethereum.Call {
  get inputs(): UpdateInvestedCall__Inputs {
    return new UpdateInvestedCall__Inputs(this);
  }

  get outputs(): UpdateInvestedCall__Outputs {
    return new UpdateInvestedCall__Outputs(this);
  }
}

export class UpdateInvestedCall__Inputs {
  _call: UpdateInvestedCall;

  constructor(call: UpdateInvestedCall) {
    this._call = call;
  }
}

export class UpdateInvestedCall__Outputs {
  _call: UpdateInvestedCall;

  constructor(call: UpdateInvestedCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
