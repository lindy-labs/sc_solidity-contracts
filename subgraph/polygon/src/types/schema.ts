// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("underlying", Value.fromBytes(Bytes.empty()));
    this.set("totalShares", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vault entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlying(): Bytes {
    let value = this.get("underlying");
    return value!.toBytes();
  }

  set underlying(value: Bytes) {
    this.set("underlying", Value.fromBytes(value));
  }

  get totalShares(): BigInt {
    let value = this.get("totalShares");
    return value!.toBigInt();
  }

  set totalShares(value: BigInt) {
    this.set("totalShares", Value.fromBigInt(value));
  }

  get foundations(): Array<string> {
    let value = this.get("foundations");
    return value!.toStringArray();
  }

  set foundations(value: Array<string>) {
    this.set("foundations", Value.fromStringArray(value));
  }

  get claimers(): Array<string> {
    let value = this.get("claimers");
    return value!.toStringArray();
  }

  set claimers(value: Array<string>) {
    this.set("claimers", Value.fromStringArray(value));
  }

  get treasury(): Bytes | null {
    let value = this.get("treasury");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set treasury(value: Bytes | null) {
    if (!value) {
      this.unset("treasury");
    } else {
      this.set("treasury", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Foundation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("vault", Value.fromString(""));
    this.set("amountDeposited", Value.fromBigInt(BigInt.zero()));
    this.set("shares", Value.fromBigInt(BigInt.zero()));
    this.set("amountClaimed", Value.fromBigInt(BigInt.zero()));
    this.set("lockedUntil", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Foundation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Foundation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Foundation", id.toString(), this);
    }
  }

  static load(id: string): Foundation | null {
    return changetype<Foundation | null>(store.get("Foundation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get amountDeposited(): BigInt {
    let value = this.get("amountDeposited");
    return value!.toBigInt();
  }

  set amountDeposited(value: BigInt) {
    this.set("amountDeposited", Value.fromBigInt(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get amountClaimed(): BigInt {
    let value = this.get("amountClaimed");
    return value!.toBigInt();
  }

  set amountClaimed(value: BigInt) {
    this.set("amountClaimed", Value.fromBigInt(value));
  }

  get lockedUntil(): BigInt {
    let value = this.get("lockedUntil");
    return value!.toBigInt();
  }

  set lockedUntil(value: BigInt) {
    this.set("lockedUntil", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("claimer", Value.fromString(""));
    this.set("depositor", Value.fromBytes(Bytes.empty()));
    this.set("foundation", Value.fromString(""));
    this.set("lockedUntil", Value.fromBigInt(BigInt.zero()));
    this.set("shares", Value.fromBigInt(BigInt.zero()));
    this.set("data", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Deposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get claimer(): string {
    let value = this.get("claimer");
    return value!.toString();
  }

  set claimer(value: string) {
    this.set("claimer", Value.fromString(value));
  }

  get depositor(): Bytes {
    let value = this.get("depositor");
    return value!.toBytes();
  }

  set depositor(value: Bytes) {
    this.set("depositor", Value.fromBytes(value));
  }

  get foundation(): string {
    let value = this.get("foundation");
    return value!.toString();
  }

  set foundation(value: string) {
    this.set("foundation", Value.fromString(value));
  }

  get lockedUntil(): BigInt {
    let value = this.get("lockedUntil");
    return value!.toBigInt();
  }

  set lockedUntil(value: BigInt) {
    this.set("lockedUntil", Value.fromBigInt(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get burned(): boolean {
    let value = this.get("burned");
    return value!.toBoolean();
  }

  set burned(value: boolean) {
    this.set("burned", Value.fromBoolean(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }
}

export class Claimer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("vault", Value.fromString(""));
    this.set("depositsIds", Value.fromStringArray(new Array(0)));
    this.set("principal", Value.fromBigInt(BigInt.zero()));
    this.set("shares", Value.fromBigInt(BigInt.zero()));
    this.set("claimed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claimer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Claimer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Claimer", id.toString(), this);
    }
  }

  static load(id: string): Claimer | null {
    return changetype<Claimer | null>(store.get("Claimer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get depositsIds(): Array<string> {
    let value = this.get("depositsIds");
    return value!.toStringArray();
  }

  set depositsIds(value: Array<string>) {
    this.set("depositsIds", Value.fromStringArray(value));
  }

  get principal(): BigInt {
    let value = this.get("principal");
    return value!.toBigInt();
  }

  set principal(value: BigInt) {
    this.set("principal", Value.fromBigInt(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get claimed(): BigInt {
    let value = this.get("claimed");
    return value!.toBigInt();
  }

  set claimed(value: BigInt) {
    this.set("claimed", Value.fromBigInt(value));
  }
}

export class Donation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("destination", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Donation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Donation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Donation", id.toString(), this);
    }
  }

  static load(id: string): Donation | null {
    return changetype<Donation | null>(store.get("Donation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get destination(): Bytes {
    let value = this.get("destination");
    return value!.toBytes();
  }

  set destination(value: Bytes) {
    this.set("destination", Value.fromBytes(value));
  }
}

export class DonationMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DonationMint entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DonationMint", id.toString(), this);
    }
  }

  static load(id: string): DonationMint | null {
    return changetype<DonationMint | null>(store.get("DonationMint", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get burned(): boolean {
    let value = this.get("burned");
    return value!.toBoolean();
  }

  set burned(value: boolean) {
    this.set("burned", Value.fromBoolean(value));
  }

  get nftId(): BigInt | null {
    let value = this.get("nftId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftId(value: BigInt | null) {
    if (!value) {
      this.unset("nftId");
    } else {
      this.set("nftId", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Sponsor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("depositor", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("lockedUntil", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sponsor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Sponsor entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Sponsor", id.toString(), this);
    }
  }

  static load(id: string): Sponsor | null {
    return changetype<Sponsor | null>(store.get("Sponsor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depositor(): Bytes {
    let value = this.get("depositor");
    return value!.toBytes();
  }

  set depositor(value: Bytes) {
    this.set("depositor", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get lockedUntil(): BigInt {
    let value = this.get("lockedUntil");
    return value!.toBigInt();
  }

  set lockedUntil(value: BigInt) {
    this.set("lockedUntil", Value.fromBigInt(value));
  }

  get burned(): boolean {
    let value = this.get("burned");
    return value!.toBoolean();
  }

  set burned(value: boolean) {
    this.set("burned", Value.fromBoolean(value));
  }
}

export class RedeemOperation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("idx", Value.fromBigInt(BigInt.zero()));
    this.set("aUstAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedeemOperation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RedeemOperation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RedeemOperation", id.toString(), this);
    }
  }

  static load(id: string): RedeemOperation | null {
    return changetype<RedeemOperation | null>(store.get("RedeemOperation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get idx(): BigInt {
    let value = this.get("idx");
    return value!.toBigInt();
  }

  set idx(value: BigInt) {
    this.set("idx", Value.fromBigInt(value));
  }

  get aUstAmount(): BigInt {
    let value = this.get("aUstAmount");
    return value!.toBigInt();
  }

  set aUstAmount(value: BigInt) {
    this.set("aUstAmount", Value.fromBigInt(value));
  }
}

export class DepositOperation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("idx", Value.fromBigInt(BigInt.zero()));
    this.set("underlyingAmount", Value.fromBigInt(BigInt.zero()));
    this.set("ustAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositOperation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositOperation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositOperation", id.toString(), this);
    }
  }

  static load(id: string): DepositOperation | null {
    return changetype<DepositOperation | null>(
      store.get("DepositOperation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get idx(): BigInt {
    let value = this.get("idx");
    return value!.toBigInt();
  }

  set idx(value: BigInt) {
    this.set("idx", Value.fromBigInt(value));
  }

  get underlyingAmount(): BigInt {
    let value = this.get("underlyingAmount");
    return value!.toBigInt();
  }

  set underlyingAmount(value: BigInt) {
    this.set("underlyingAmount", Value.fromBigInt(value));
  }

  get ustAmount(): BigInt {
    let value = this.get("ustAmount");
    return value!.toBigInt();
  }

  set ustAmount(value: BigInt) {
    this.set("ustAmount", Value.fromBigInt(value));
  }
}
