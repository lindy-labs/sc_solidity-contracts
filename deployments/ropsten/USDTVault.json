{
  "address": "0x554DCc8bF737AcaC78Fe2F947430E0D46424db9c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minLockPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_investPerc",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "DepositBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "DepositMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "InvestPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Invested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "Sponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Unsponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnedShares",
          "type": "uint256"
        }
      ],
      "name": "YieldClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_SPONSOR_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHARES_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_blockTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimers",
      "outputs": [
        {
          "internalType": "contract Claimers",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "pct",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IVault.ClaimParams[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.DepositParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "contract Depositors",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "forceWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        }
      ],
      "name": "principalOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_investPerc",
          "type": "uint16"
        }
      ],
      "name": "setInvestPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "sponsor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSponsored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingWithSponsor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "unsponsor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateInvested",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "yieldFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f024a57a77d84b428e3a9f58c14274d0c4ed87ec4fe89c6a9873efd7395479c",
  "receipt": {
    "to": null,
    "from": "0x5641D433c027f9B40a3664752375245b274d1D7d",
    "contractAddress": "0x554DCc8bF737AcaC78Fe2F947430E0D46424db9c",
    "transactionIndex": 5,
    "gasUsed": "5667327",
    "logsBloom": "0x
    "blockHash": "0x93b2186f3219b4f920a93791f4187ae66dd85048cf104f607accd7cbd50f5596",
    "transactionHash": "0x7f024a57a77d84b428e3a9f58c14274d0c4ed87ec4fe89c6a9873efd7395479c",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 11965832,
        "transactionHash": "0x7f024a57a77d84b428e3a9f58c14274d0c4ed87ec4fe89c6a9873efd7395479c",
        "address": "0x554DCc8bF737AcaC78Fe2F947430E0D46424db9c",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x0000000000000000000000005641d433c027f9b40a3664752375245b274d1d7d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 2,
        "blockHash": "0x93b2186f3219b4f920a93791f4187ae66dd85048cf104f607accd7cbd50f5596"
      }
    ],
    "blockNumber": 11965832,
    "cumulativeGasUsed": "6253096",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6AF27a81cEb61073CCCA401Ca6b43064F369dc02",
    0,
    9000,
    "0x5641D433c027f9B40a3664752375245b274d1D7d"
  ],
  "numDeployments": 1,
  "solcInputHash": "8d8a008226a357c5d82abe889aeb8b57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minLockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investPerc\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DepositBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"DepositMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"InvestPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"Sponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unsponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_SPONSOR_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARES_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_blockTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimers\",\"outputs\":[{\"internalType\":\"contract Claimers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.ClaimParams[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.DepositParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"contract Depositors\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"forceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"}],\"name\":\"principalOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_investPerc\",\"type\":\"uint16\"}],\"name\":\"setInvestPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedUntil\",\"type\":\"uint256\"}],\"name\":\"sponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSponsored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingWithSponsor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"unsponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateInvested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"yieldFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Yield generation strategies not yet implemented\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_underlying\":\"Underlying ERC20 token to use.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalUnderlying()\":{\"returns\":{\"_0\":\"Total amount of principal and yield help by the vault (not including sponsored amount).\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Sponsored(uint256,uint256,address,uint256)\":{\"notice\":\"Emitted when a new sponsor deposit is created\"},\"Unsponsored(uint256)\":{\"notice\":\"Emitted when an existing sponsor withdraws\"}},\"kind\":\"user\",\"methods\":{\"claimYield(address)\":{\"notice\":\"See {IVault}\"},\"claimers()\":{\"notice\":\"Yield allocation\"},\"deposit((uint256,(uint16,address,bytes)[],uint256))\":{\"notice\":\"See {IVault}\"},\"depositors()\":{\"notice\":\"Depositors, represented as an NFT per deposit\"},\"forceWithdraw(address,uint256[])\":{\"notice\":\"See {IVault}\"},\"investPerc()\":{\"notice\":\"See {IVault}\"},\"investableAmount()\":{\"notice\":\"See {IVault}\"},\"minLockPeriod()\":{\"notice\":\"See {IVault}\"},\"setInvestPerc(uint16)\":{\"notice\":\"See {IVault}\"},\"setStrategy(address)\":{\"notice\":\"See {IVault}\"},\"sponsor(uint256,uint256)\":{\"notice\":\"See {IVaultSponsoring}\"},\"strategy()\":{\"notice\":\"See {IVault}\"},\"totalSponsored()\":{\"notice\":\"See {IVaultSponsoring}\"},\"totalUnderlying()\":{\"notice\":\"Computes the total amount of principal + yield currently controlled by the vault and the strategy. The principal + yield is the total amount of underlying that can be claimed or withdrawn, excluding the sponsored amount.\"},\"totalUnderlyingWithSponsor()\":{\"notice\":\"See {IVault}\"},\"underlying()\":{\"notice\":\"Underlying ERC20 token accepted by the vault See {IVault}\"},\"unsponsor(address,uint256[])\":{\"notice\":\"See {IVaultSponsoring}\"},\"updateInvested()\":{\"notice\":\"See {IVault}\"},\"withdraw(address,uint256[])\":{\"notice\":\"See {IVault}\"},\"yieldFor(address)\":{\"notice\":\"See {IVault}\"}},\"notice\":\"A vault where other accounts can deposit an underlying token currency and set distribution params for their principal and yield\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/auth/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author Inspired by Dappsys V2 (https://github.com/dapp-org/dappsys-v2/blob/main/src/auth.sol)\\nabstract contract Trust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address initialUser) {\\n        isTrusted[initialUser] = true;\\n\\n        emit UserTrustUpdated(initialUser, true);\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb22f711d85048aa473533757a6e99006b29ae8604ea4a1d0b2d3cd6322578bb4\",\"license\":\"AGPL-3.0-only\"},\"contracts/BaseVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {Trust} from \\\"@rari-capital/solmate/src/auth/Trust.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {Depositors} from \\\"./vault/Depositors.sol\\\";\\nimport {Claimers} from \\\"./vault/Claimers.sol\\\";\\nimport {PercentMath} from \\\"./lib/PercentMath.sol\\\";\\n\\ncontract BaseVault {\\n    using Counters for Counters.Counter;\\n    using PercentMath for uint256;\\n\\n    uint256 public constant SHARES_MULTIPLIER = 10**18;\\n\\n    /// Unique IDs to correlate donations that belong to the same foundation\\n    Counters.Counter internal depositGroupIds;\\n\\n    struct Deposit {\\n        /// amount of the deposit\\n        uint256 amount;\\n        /// wallet of the claimer\\n        uint256 claimerId;\\n        /// when can the deposit be withdrawn\\n        uint256 lockedUntil;\\n        /// the number of shares issued for this deposit\\n        uint256 shares;\\n    }\\n\\n    mapping(uint256 => Deposit) public deposits;\\n    Counters.Counter internal _depositIds;\\n\\n    struct Claimer {\\n        uint256 totalPrincipal;\\n        uint256 totalShares;\\n    }\\n\\n    mapping(uint256 => Claimer) public claimer;\\n    Counters.Counter internal _claimerIds;\\n\\n    // The total of shares\\n    uint256 public totalShares;\\n\\n    // The total of principal deposited\\n    uint256 public totalPrincipal;\\n\\n    /**\\n     * Removes the principal and shares of a deposit.\\n     * If there is any yield to be claimed, it will stay with the claimer.\\n     *\\n     * @notice If the vault underperformed and lost money, the deposit will be\\n     * valued at a percentage of the total deposited.\\n     *\\n     * @param _depositId The deposit ID to withdraw from.\\n     * @param _totalShares The total shares to consider for the withdraw.\\n     * @param _totalUnderlying The total underlying to consider for the withdraw.\\n     * @param _to Where the funds will be sent\\n     * @param _force If the withdraw should still withdraw if there are not enough funds in the vault.\\n     *\\n     * @return deleted shares\\n     * @return amount to withdraw.\\n     */\\n    function _withdraw(\\n        uint256 _depositId,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlying,\\n        address _to,\\n        bool _force\\n    ) internal returns (uint256, uint256) {\\n        uint256 claimerId = deposits[_depositId].claimerId;\\n        uint256 depositInitialShares = deposits[_depositId].shares;\\n        uint256 depositAmount = deposits[_depositId].amount;\\n\\n        uint256 claimerShares = claimer[claimerId].totalShares;\\n        uint256 claimerPrincipal = claimer[claimerId].totalPrincipal;\\n\\n        uint256 depositShares = _computeShares(\\n            depositAmount,\\n            _totalShares,\\n            _totalUnderlying\\n        );\\n\\n        bool lostMoney = depositShares > depositInitialShares ||\\n            depositShares > claimerShares;\\n\\n        if (_force && lostMoney) {\\n            // When there's a loss it means that a deposit is now worth more\\n            // shares than before. In that scenario, we cannot allow the\\n            // depositor to withdraw all her money. Instead, the depositor gets\\n            // a number of shares that are equivalent to the percentage of this\\n            // deposit in the total deposits for this claimer.\\n            depositShares = (depositAmount * claimerShares) / claimerPrincipal;\\n        } else {\\n            require(\\n                lostMoney == false,\\n                \\\"Vault: cannot withdraw more than the available amount\\\"\\n            );\\n        }\\n\\n        claimer[claimerId].totalShares -= depositShares;\\n        claimer[claimerId].totalPrincipal -= depositAmount;\\n\\n        totalShares -= depositShares;\\n        totalPrincipal -= depositAmount;\\n\\n        return (\\n            depositShares,\\n            _computeAmount(depositShares, _totalShares, _totalUnderlying)\\n        );\\n    }\\n\\n    /**\\n     * Creates a deposit with the given params.\\n     *\\n     * @notice The lock period is not enforced by this function.\\n     *\\n     * @param _claimerId ID of the claimer.\\n     * @param _depositId ID of the deposit.\\n     * @param _amount Deposit amount.\\n     * @param _lockedUntil When the depositor can withdraw the deposit.\\n     * @param _localTotalShares Global total of shares to consider.\\n     * @param _localTotalPrincipal Global total of principal to consider.\\n     *\\n     * @return number of shares minted for the deposit.\\n     */\\n    function _deposit(\\n        uint256 _claimerId,\\n        uint256 _depositId,\\n        uint256 _amount,\\n        uint256 _lockedUntil,\\n        uint256 _localTotalShares,\\n        uint256 _localTotalPrincipal\\n    ) internal returns (uint256) {\\n        uint256 newShares = _computeShares(\\n            _amount,\\n            _localTotalShares,\\n            _localTotalPrincipal\\n        );\\n\\n        claimer[_claimerId].totalShares += newShares;\\n        claimer[_claimerId].totalPrincipal += _amount;\\n\\n        totalShares += newShares;\\n        totalPrincipal += _amount;\\n\\n        deposits[_depositId] = Deposit(\\n            _amount,\\n            _claimerId,\\n            _lockedUntil,\\n            newShares\\n        );\\n\\n        return newShares;\\n    }\\n\\n    /**\\n     * Claims the yield for a claimer.\\n     *\\n     * @param _claimerId ID of the claimer.\\n     *\\n     * @return claimed shares.\\n     * @return amount to transfer.\\n     */\\n    function _claimYield(uint256 _claimerId)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 yield = _yieldFor(_claimerId);\\n\\n        if (yield == 0) return (0, 0);\\n\\n        uint256 shares = _computeShares(yield, totalShares, totalUnderlying());\\n\\n        uint256 sharesAmount = _computeAmount(\\n            shares,\\n            totalShares,\\n            totalUnderlying()\\n        );\\n\\n        claimer[_claimerId].totalShares -= shares;\\n        totalShares -= shares;\\n\\n        return (shares, sharesAmount);\\n    }\\n\\n    /**\\n     * Calulates the yield available for a claimer.\\n     *\\n     * @param _claimerId ID of the claimer.\\n     *\\n     * @return amount available to claim.\\n     */\\n    function _yieldFor(uint256 _claimerId) internal view returns (uint256) {\\n        uint256 claimerPrincipal = claimer[_claimerId].totalPrincipal;\\n        uint256 claimerShares = claimer[_claimerId].totalShares;\\n\\n        uint256 currentClaimerPrincipal = _computeAmount(\\n            claimerShares,\\n            totalShares,\\n            totalUnderlying()\\n        );\\n\\n        if (currentClaimerPrincipal <= claimerPrincipal) {\\n            return 0;\\n        }\\n\\n        return currentClaimerPrincipal - claimerPrincipal;\\n    }\\n\\n    /**\\n     * Computes the amount of underlying from a given number of shares\\n     *\\n     * @param _shares Number of shares.\\n     * @param _totalShares Amount of existing shares to consider.\\n     * @param _totalUnderlying Amounf of existing underlying to consider.\\n     *\\n     * @return Amount that corresponds to the number of shares.\\n     */\\n    function _computeAmount(\\n        uint256 _shares,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlying\\n    ) internal pure returns (uint256) {\\n        if (_totalShares == 0 || _totalUnderlying == 0) {\\n            return 0;\\n        } else {\\n            return ((_totalUnderlying * _shares) / _totalShares);\\n        }\\n    }\\n\\n    /**\\n     * Computes amount of shares that will be received for a given deposit amount\\n     *\\n     * @param _amount Amount of deposit to consider.\\n     * @param _totalShares Amount of existing shares to consider.\\n     * @param _totalUnderlying Amounf of existing underlying to consider.\\n     *\\n     * @return Amount of shares the deposit will receive.\\n     */\\n    function _computeShares(\\n        uint256 _amount,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlying\\n    ) internal pure returns (uint256) {\\n        if (_amount == 0) return 0;\\n        if (_totalShares == 0) return _amount * SHARES_MULTIPLIER;\\n\\n        require(\\n            _totalUnderlying != 0,\\n            \\\"Vault: cannot compute shares when there's no principal\\\"\\n        );\\n\\n        return (_amount * _totalShares) / _totalUnderlying;\\n    }\\n\\n    function totalUnderlying() public view virtual returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x26b31df32e751ad819517855591ffa899c5830c2f1e362deca7e81d8e4767b0f\",\"license\":\"UNLICENSED\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {Trust} from \\\"@rari-capital/solmate/src/auth/Trust.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {IVault} from \\\"./vault/IVault.sol\\\";\\nimport {IVaultSponsoring} from \\\"./vault/IVaultSponsoring.sol\\\";\\nimport {PercentMath} from \\\"./lib/PercentMath.sol\\\";\\nimport {Depositors} from \\\"./vault/Depositors.sol\\\";\\nimport {Claimers} from \\\"./vault/Claimers.sol\\\";\\nimport {IStrategy} from \\\"./strategy/IStrategy.sol\\\";\\nimport {ERC165Query} from \\\"./lib/ERC165Query.sol\\\";\\nimport {BaseVault} from \\\"./BaseVault.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * A vault where other accounts can deposit an underlying token\\n * currency and set distribution params for their principal and yield\\n *\\n * @dev Yield generation strategies not yet implemented\\n */\\n\\ncontract Vault is\\n    IVault,\\n    IVaultSponsoring,\\n    Context,\\n    ERC165,\\n    Trust,\\n    ReentrancyGuard,\\n    BaseVault\\n{\\n    using Counters for Counters.Counter;\\n    using SafeERC20 for IERC20;\\n    using PercentMath for uint256;\\n    using Address for address;\\n    using ERC165Query for address;\\n\\n    //\\n    // Constants\\n    //\\n\\n    uint256 public constant MIN_SPONSOR_LOCK_DURATION = 1209600; // 2 weeks in seconds\\n\\n    //\\n    // State\\n    //\\n\\n    /// Underlying ERC20 token accepted by the vault\\n    /// See {IVault}\\n    IERC20 public override(IVault) underlying;\\n\\n    /// See {IVault}\\n    IStrategy public strategy;\\n\\n    /// See {IVault}\\n    uint256 public investPerc;\\n\\n    /// See {IVault}\\n    uint256 public immutable override(IVault) minLockPeriod;\\n\\n    /// See {IVaultSponsoring}\\n    uint256 public override(IVaultSponsoring) totalSponsored;\\n\\n    /// Depositors, represented as an NFT per deposit\\n    Depositors public depositors;\\n\\n    /// Yield allocation\\n    Claimers public claimers;\\n\\n    /**\\n     * @param _underlying Underlying ERC20 token to use.\\n     */\\n    constructor(\\n        IERC20 _underlying,\\n        uint256 _minLockPeriod,\\n        uint256 _investPerc,\\n        address _owner\\n    ) Trust(_owner) {\\n        require(\\n            PercentMath.validPerc(_investPerc),\\n            \\\"Vault: invalid investPerc\\\"\\n        );\\n        require(\\n            address(_underlying) != address(0x0),\\n            \\\"VaultContext: underlying cannot be 0x0\\\"\\n        );\\n        investPerc = _investPerc;\\n        underlying = _underlying;\\n        minLockPeriod = _minLockPeriod;\\n\\n        depositors = new Depositors(address(this), \\\"depositors\\\", \\\"p\\\");\\n        claimers = new Claimers(address(this));\\n    }\\n\\n    //\\n    // IVault\\n    //\\n\\n    /// See {IVault}\\n    function setStrategy(address _strategy)\\n        external\\n        override(IVault)\\n        requiresTrust\\n    {\\n        require(_strategy != address(0), \\\"Vault: strategy 0x\\\");\\n        require(\\n            IStrategy(_strategy).vault() == address(this),\\n            \\\"Vault: invalid vault\\\"\\n        );\\n        require(\\n            address(strategy) == address(0) || strategy.investedAssets() == 0,\\n            \\\"Vault: strategy has invested funds\\\"\\n        );\\n\\n        strategy = IStrategy(_strategy);\\n\\n        emit StrategyUpdated(_strategy);\\n    }\\n\\n    /// See {IVault}\\n    function totalUnderlyingWithSponsor()\\n        public\\n        view\\n        override(IVault)\\n        returns (uint256)\\n    {\\n        if (address(strategy) != address(0)) {\\n            return\\n                underlying.balanceOf(address(this)) + strategy.investedAssets();\\n        } else {\\n            return underlying.balanceOf(address(this));\\n        }\\n    }\\n\\n    /// See {IVault}\\n\\n    /// See {IVault}\\n    function yieldFor(address _to)\\n        public\\n        view\\n        override(IVault)\\n        returns (uint256)\\n    {\\n        uint256 tokenId = claimers.tokenOf(_to);\\n        return _yieldFor(tokenId);\\n    }\\n\\n    /// See {IVault}\\n    function deposit(DepositParams calldata _params) external nonReentrant {\\n        uint256 principalMinusStrategyFee = _applyInvestmentFee(totalPrincipal);\\n\\n        require(_params.amount != 0, \\\"Vault: cannot deposit 0\\\");\\n        require(\\n            principalMinusStrategyFee <= totalUnderlying(),\\n            \\\"Vault: cannot deposit when yield is negative\\\"\\n        );\\n\\n        _createDeposit(_params.amount, _params.lockedUntil, _params.claims);\\n        _transferAndCheckUnderlying(_msgSender(), _params.amount);\\n    }\\n\\n    /// See {IVault}\\n    function claimYield(address _to) external override(IVault) nonReentrant {\\n        require(_to != address(0), \\\"Vault: destination address is 0x\\\");\\n\\n        uint256 claimerId = claimers.tokenOf(_msgSender());\\n\\n        (uint256 shares, uint256 sharesAmount) = _claimYield(claimerId);\\n\\n        if (sharesAmount == 0) return;\\n\\n        underlying.safeTransfer(_to, sharesAmount);\\n\\n        emit YieldClaimed(claimerId, _to, sharesAmount, shares);\\n    }\\n\\n    /// See {IVault}\\n    function withdraw(address _to, uint256[] memory _ids)\\n        external\\n        override(IVault)\\n        nonReentrant\\n    {\\n        require(_to != address(0), \\\"Vault: destination address is 0x\\\");\\n\\n        _withdraw(_to, _ids, false);\\n    }\\n\\n    /// See {IVault}\\n    function forceWithdraw(address _to, uint256[] memory _ids)\\n        external\\n        nonReentrant\\n    {\\n        require(_to != address(0), \\\"Vault: destination address is 0x\\\");\\n\\n        _withdraw(_to, _ids, true);\\n    }\\n\\n    /// See {IVault}\\n    function setInvestPerc(uint16 _investPerc) external requiresTrust {\\n        require(\\n            PercentMath.validPerc(_investPerc),\\n            \\\"Vault: invalid investPerc\\\"\\n        );\\n\\n        emit InvestPercentageUpdated(_investPerc);\\n\\n        investPerc = _investPerc;\\n    }\\n\\n    /// See {IVault}\\n    function investableAmount() public view returns (uint256) {\\n        uint256 maxInvestableAssets = totalUnderlyingWithSponsor().percOf(\\n            investPerc\\n        );\\n\\n        uint256 alreadyInvested = strategy.investedAssets();\\n\\n        if (alreadyInvested >= maxInvestableAssets) {\\n            return 0;\\n        } else {\\n            return maxInvestableAssets - alreadyInvested;\\n        }\\n    }\\n\\n    /// See {IVault}\\n    function updateInvested() external requiresTrust {\\n        require(address(strategy) != address(0), \\\"Vault: strategy is not set\\\");\\n\\n        uint256 _investable = investableAmount();\\n\\n        if (_investable != 0) {\\n            underlying.safeTransfer(address(strategy), _investable);\\n\\n            emit Invested(_investable);\\n        }\\n\\n        strategy.doHardWork();\\n    }\\n\\n    //\\n    // IVaultSponsoring\\n\\n    /// See {IVaultSponsoring}\\n    function sponsor(uint256 _amount, uint256 _lockedUntil)\\n        external\\n        override(IVaultSponsoring)\\n        nonReentrant\\n    {\\n        require(_amount != 0, \\\"Vault: cannot sponsor 0\\\");\\n\\n        if (_lockedUntil == 0)\\n            _lockedUntil = block.timestamp + MIN_SPONSOR_LOCK_DURATION;\\n        else\\n            require(\\n                _lockedUntil >= block.timestamp + MIN_SPONSOR_LOCK_DURATION,\\n                \\\"Vault: lock time is too small\\\"\\n            );\\n\\n        uint256 tokenId = depositors.mint(_msgSender());\\n\\n        deposits[tokenId] = Deposit(_amount, 0, _lockedUntil, 0);\\n\\n        emit Sponsored(tokenId, _amount, _msgSender(), _lockedUntil);\\n\\n        totalSponsored += _amount;\\n        _transferAndCheckUnderlying(_msgSender(), _amount);\\n    }\\n\\n    /// See {IVaultSponsoring}\\n    function unsponsor(address _to, uint256[] memory _ids)\\n        external\\n        nonReentrant\\n    {\\n        require(_to != address(0), \\\"Vault: destination address is 0x\\\");\\n\\n        _unsponsor(_to, _ids);\\n    }\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Computes the total amount of principal + yield currently controlled by the\\n     * vault and the strategy. The principal + yield is the total amount\\n     * of underlying that can be claimed or withdrawn, excluding the sponsored amount.\\n     *\\n     * @return Total amount of principal and yield help by the vault (not including sponsored amount).\\n     */\\n    function totalUnderlying() public view virtual override returns (uint256) {\\n        return totalUnderlyingWithSponsor() - totalSponsored;\\n    }\\n\\n    //\\n    // ERC165\\n    //\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IVault).interfaceId ||\\n            interfaceId == type(IVaultSponsoring).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // Internal API\\n    //\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * @notice the NFTs of the deposits will be burned.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     * @param _force Boolean to specify if the action should be perfomed when there's loss.\\n     */\\n    function _withdraw(\\n        address _to,\\n        uint256[] memory _ids,\\n        bool _force\\n    ) internal {\\n        uint256 localTotalShares = totalShares;\\n        uint256 localTotalPrincipal = totalUnderlying();\\n        uint256 amount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint8 i; i < idsLen; i++) {\\n            amount += _withdrawDeposit(\\n                _ids[i],\\n                localTotalShares,\\n                localTotalPrincipal,\\n                _to,\\n                _force\\n            );\\n        }\\n\\n        underlying.safeTransfer(_to, amount);\\n    }\\n\\n    /**\\n     * Withdraws the sponsored amount for the deposits with the ids provided\\n     * in @param _ids and sends it to @param _to.\\n     *\\n     * @notice the NFTs of the deposits will be burned.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function _unsponsor(address _to, uint256[] memory _ids) internal {\\n        uint256 sponsorAmount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint8 i; i < idsLen; i++) {\\n            uint256 tokenId = _ids[i];\\n\\n            uint256 lockedUntil = deposits[tokenId].lockedUntil;\\n            uint256 claimerId = deposits[tokenId].claimerId;\\n            address owner = depositors.ownerOf(tokenId);\\n            uint256 amount = deposits[tokenId].amount;\\n\\n            require(owner == _msgSender(), \\\"Vault: you are not allowed\\\");\\n            require(lockedUntil <= block.timestamp, \\\"Vault: amount is locked\\\");\\n            require(claimerId == 0, \\\"Vault: token id is not a sponsor\\\");\\n\\n            sponsorAmount += amount;\\n\\n            depositors.burn(tokenId);\\n\\n            emit Unsponsored(tokenId);\\n        }\\n\\n        uint256 sponsorToTransfer = sponsorAmount;\\n\\n        require(\\n            sponsorToTransfer <= totalUnderlyingWithSponsor(),\\n            \\\"Vault: not enough funds\\\"\\n        );\\n\\n        totalSponsored -= sponsorAmount;\\n\\n        underlying.safeTransfer(_to, sponsorToTransfer);\\n    }\\n\\n    /**\\n     * Creates a deposit with the given amount of underlying and claim\\n     * structure. The deposit is locked until the timestamp specified in @param _lockedUntil.\\n     * @notice This function assumes underlying will be transfered elsewhere in\\n     * the transaction.\\n     *\\n     * @notice Underlying must be transfered *after* this function, in order to\\n     * correctly calculate shares.\\n     *\\n     * @notice claims must add up to 100%.\\n     *\\n     * @param _amount Amount of underlying to consider @param claims claim\\n     * @param _lockedUntil When the depositor can withdraw the amount.\\n     * @param claims Claim params\\n     * params.\\n     */\\n    function _createDeposit(\\n        uint256 _amount,\\n        uint256 _lockedUntil,\\n        ClaimParams[] calldata claims\\n    ) internal {\\n        if (_lockedUntil == 0) _lockedUntil = block.timestamp + minLockPeriod;\\n        else\\n            require(\\n                _lockedUntil >= block.timestamp + minLockPeriod,\\n                \\\"Vault: lock time is too small\\\"\\n            );\\n\\n        uint256 localTotalShares = totalShares;\\n        uint256 localTotalUnderlying = totalUnderlying();\\n        uint256 groupId = depositGroupIds.current();\\n        uint256 pct;\\n        uint256 claimsLen = claims.length;\\n\\n        depositGroupIds.increment();\\n\\n        for (uint256 i; i < claimsLen; ++i) {\\n            ClaimParams memory claim = claims[i];\\n            require(claim.pct != 0, \\\"Vault: claim percentage cannot be 0\\\");\\n\\n            _createClaim(\\n                groupId,\\n                _amount,\\n                _lockedUntil,\\n                claim,\\n                localTotalShares,\\n                localTotalUnderlying\\n            );\\n            pct += claim.pct;\\n        }\\n\\n        require(pct.is100Perc(), \\\"Vault: claims don't add up to 100%\\\");\\n    }\\n\\n    function _createClaim(\\n        uint256 _depositGroupId,\\n        uint256 _amount,\\n        uint256 _lockedUntil,\\n        ClaimParams memory _claim,\\n        uint256 _localTotalShares,\\n        uint256 _localTotalPrincipal\\n    ) internal {\\n        uint256 amount = _amount.percOf(_claim.pct);\\n        uint256 claimerId = claimers.mint(_claim.beneficiary);\\n        uint256 depositId = depositors.mint(_msgSender());\\n\\n        uint256 newShares = _deposit(\\n            claimerId,\\n            depositId,\\n            amount,\\n            _lockedUntil,\\n            _localTotalShares,\\n            _localTotalPrincipal\\n        );\\n\\n        emit DepositMinted(\\n            depositId,\\n            _depositGroupId,\\n            amount,\\n            newShares,\\n            _msgSender(),\\n            _claim.beneficiary,\\n            claimerId,\\n            _lockedUntil\\n        );\\n    }\\n\\n    /**\\n     * Burns a deposit NFT and reduces the principal and shares of the claimer.\\n     * If there is any yield to be claimed, it will stay with the claimer.\\n     *\\n     * @notice This function doesn't transfer any funds, it only updates the state.\\n     *\\n     * @notice Only the owner of the deposit may call this function.\\n     *\\n     * @param _depositId The deposit ID to withdraw from.\\n     * @param _totalShares The total shares to consider for the withdraw.\\n     * @param _totalUnderlying The total underlying to consider for the withdraw.\\n     * @param _to Where the funds will be sent\\n     * @param _force If the withdraw should still withdraw if there are not enough funds in the vault.\\n     *\\n     * @return the amount to withdraw.\\n     */\\n    function _withdrawDeposit(\\n        uint256 _depositId,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlying,\\n        address _to,\\n        bool _force\\n    ) internal returns (uint256) {\\n        require(\\n            depositors.ownerOf(_depositId) == _msgSender(),\\n            \\\"Vault: you are not the owner of a deposit\\\"\\n        );\\n\\n        require(\\n            deposits[_depositId].lockedUntil <= block.timestamp,\\n            \\\"Vault: deposit is locked\\\"\\n        );\\n\\n        require(\\n            deposits[_depositId].claimerId != 0,\\n            \\\"Vault: deposit id is not a deposit\\\"\\n        );\\n\\n        (uint256 shares, uint256 amount) = _withdraw(\\n            _depositId,\\n            _totalShares,\\n            _totalUnderlying,\\n            _to,\\n            _force\\n        );\\n\\n        depositors.burn(_depositId);\\n\\n        emit DepositBurned(_depositId, shares, _to);\\n\\n        return amount;\\n    }\\n\\n    function _transferAndCheckUnderlying(address _from, uint256 _amount)\\n        internal\\n    {\\n        uint256 balanceBefore = totalUnderlyingWithSponsor();\\n        underlying.safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = totalUnderlyingWithSponsor();\\n\\n        require(\\n            balanceAfter == balanceBefore + _amount,\\n            \\\"Vault: amount received does not match params\\\"\\n        );\\n    }\\n\\n    function _blockTimestamp() public view returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n\\n    /**\\n     * Applies an estimated fee to the given @param _amount.\\n     *\\n     * This function should be used to estimate how much underlying will be\\n     * left after the strategy invests. For instance, the fees taken by Anchor\\n     * and Curve.\\n     *\\n     * @notice Returns @param _amount when a strategy is not set.\\n     *\\n     * @param _amount Amount to apply the fees to.\\n     *\\n     * @return Amount with the fees applied.\\n     */\\n    function _applyInvestmentFee(uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (address(strategy) == address(0)) return _amount;\\n\\n        return strategy.applyInvestmentFee(_amount);\\n    }\\n\\n    function sharesOf(uint256 claimerId) external view returns (uint256) {\\n        return claimer[claimerId].totalShares;\\n    }\\n\\n    function principalOf(uint256 claimerId) external view returns (uint256) {\\n        return claimer[claimerId].totalPrincipal;\\n    }\\n}\\n\",\"keccak256\":\"0x3d2a8560d3c5bbc66da4f8fc6b61696b5c76146ecb3d08ef6efe5ecfb6adda5c\",\"license\":\"UNLICENSED\"},\"contracts/lib/ERC165Query.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary ERC165Query {\\n    bytes4 constant InvalidID = 0xffffffff;\\n    bytes4 constant ERC165ID = 0x01ffc9a7;\\n\\n    function doesContractImplementInterface(\\n        address _contract,\\n        bytes4 _interfaceId\\n    ) internal view returns (bool) {\\n        uint256 success;\\n        uint256 result;\\n\\n        (success, result) = noThrowCall(_contract, ERC165ID);\\n        if ((success == 0) || (result == 0)) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, InvalidID);\\n        if ((success == 0) || (result != 0)) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, _interfaceId);\\n        if ((success == 1) && (result == 1)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function noThrowCall(address _contract, bytes4 _interfaceId)\\n        internal\\n        view\\n        returns (uint256 success, uint256 result)\\n    {\\n        bytes4 erc165ID = ERC165ID;\\n\\n        assembly {\\n            let x := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(x, erc165ID) // Place signature at beginning of empty storage\\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\\n\\n            success := staticcall(\\n                30000, // 30k gas\\n                _contract, // To addr\\n                x, // Inputs are stored at location x\\n                0x24, // Inputs are 36 bytes long\\n                x, // Store output over input (saves space)\\n                0x20\\n            ) // Outputs are 32 bytes long\\n\\n            result := mload(x) // Load the result\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5708f7337680bcc564930d94b19938d22ba4ebfce638479da27dfb5026a7cf27\",\"license\":\"UNLICENSED\"},\"contracts/lib/PercentMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary PercentMath {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10000;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Checks if a given number corresponds to 100%\\n     * @param _perc Percentage value to check, with PERC_DIVISOR\\n     */\\n    function is100Perc(uint256 _perc) internal pure returns (bool) {\\n        return _perc == PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n}\\n\",\"keccak256\":\"0xda33a306b6a19ad05b9fa8d40f3cd80dc15dec398af90969a65d141b4c547bec\",\"license\":\"UNLICENSED\"},\"contracts/strategy/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * Strategies can be plugged into vaults to invest and manage their underlying funds\\n *\\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault\\n *\\n * @notice It's up to the vault to decide how much to invest from the total pool\\n */\\ninterface IStrategy {\\n    /**\\n     * The underlying ERC20 token stored by the vault\\n     *\\n     * @return The ERC20 token address\\n     */\\n    function underlying() external view returns (IERC20);\\n\\n    /**\\n     * The vault linked to this stragegy\\n     *\\n     * @return The vault's address\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * Withdraws all underlying back to vault.\\n     *\\n     * @notice If underlying is currently invested, this also starts the\\n     * cross-chain process to redeem it. After that is done, this function\\n     * should be called a second time to finish the withdrawal of that portion.\\n     */\\n    function withdrawAllToVault() external;\\n\\n    /**\\n     * Withdraws a specified amount back to the vault\\n     *\\n     * @notice Unlike `withdrawToVault`, this function only considers the\\n     * amount currently not invested, but only what is currently held by the\\n     * strategy\\n     *\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawToVault(uint256 amount) external;\\n\\n    /**\\n     * Amount, expressed in the underlying currency, currently in the strategy\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets() external view returns (uint256);\\n\\n    /**\\n     * Applies an estimated fee to the given @param _amount.\\n     *\\n     * This function should be used to estimate how much underlying will be\\n     * left after the strategy invests. For instance, the fees taken by Anchor\\n     * and Curve.\\n     *\\n     * @param _amount Amount to apply the fees to.\\n     *\\n     * @return Amount with the fees applied.\\n     */\\n    function applyInvestmentFee(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * Initiates the process of investing the underlying currency\\n     */\\n    function doHardWork() external;\\n\\n    /**\\n     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.\\n     *\\n     * @notice Must be called some time after `initRedeemStable()`. Will only work if\\n     * the EthAnchor bridge has finished processing the deposit.\\n     *\\n     * @param idx Id of the pending redeem operation\\n     */\\n    function finishRedeemStable(uint256 idx) external;\\n}\\n\",\"keccak256\":\"0x5a5690c742273a2f3fcf71172040f548a1bd61ad1bb1202b79d8e23230d3beef\",\"license\":\"UNLICENSED\"},\"contracts/vault/Claimers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {IClaimers} from \\\"./IClaimers.sol\\\";\\n\\ncontract Claimers is ERC721, IClaimers {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIds;\\n    address public vault = address(0);\\n\\n    mapping(address => uint256) public addressToTokenID;\\n\\n    modifier onlyVault() {\\n        require(msg.sender == vault, \\\"Claimers: not authorized\\\");\\n        _;\\n    }\\n\\n    // TODO Make names dynamic\\n    constructor(address _vault) ERC721(\\\"Claimers\\\", \\\"SNDCLM\\\") {\\n        vault = _vault;\\n    }\\n\\n    function mint(address _to) external onlyVault returns (uint256) {\\n        uint256 localTokenId = addressToTokenID[_to];\\n\\n        if (localTokenId == 0) {\\n            _tokenIds.increment();\\n            localTokenId = _tokenIds.current();\\n\\n            _safeMint(_to, localTokenId);\\n        }\\n\\n        return localTokenId;\\n    }\\n\\n    function tokenOf(address _owner) external view returns (uint256) {\\n        return addressToTokenID[_owner];\\n    }\\n\\n    /**\\n     * Ensures the addressToTokenID mapping is up to date.\\n     *\\n     * @notice This function prevents transfers to addresses that already own an NFT.\\n     *\\n     * @param _from origin address.\\n     * @param _to destination address.\\n     * @param _tokenId id of the token.\\n     */\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual override {\\n        require(_to != address(0), \\\"Claimers: cannot burn this NFT\\\");\\n\\n        if (_from == address(0)) {\\n            // MINT\\n            addressToTokenID[_to] = _tokenId;\\n        } else {\\n            // TRANSFER\\n            require(\\n                addressToTokenID[_to] == 0,\\n                \\\"Claimers: destination already has an NFT\\\"\\n            );\\n\\n            addressToTokenID[_from] = 0;\\n            addressToTokenID[_to] = _tokenId;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc12ab6fee6b542b988bcdf41dcaefb177528720252fa38fb632bfb0f2f5e91d8\",\"license\":\"UNLICENSED\"},\"contracts/vault/Depositors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Depositors is ERC721 {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIds;\\n    address public vault;\\n\\n    modifier onlyVault() {\\n        require(msg.sender == vault, \\\"Depositors: not authorized\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _vault,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721(_name, _symbol) {\\n        vault = _vault;\\n    }\\n\\n    // should only be callable by the vault\\n    function mint(address _owner) external onlyVault returns (uint256) {\\n        uint256 localTokenId = _tokenIds.current();\\n        _tokenIds.increment();\\n\\n        _safeMint(_owner, localTokenId);\\n\\n        return localTokenId;\\n    }\\n\\n    // called when a deposit's principal is withdrawn\\n    function burn(uint256 _id) external onlyVault {\\n        _burn(_id);\\n    }\\n\\n    function exists(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x46590d1bd5181f3e65ff6295bfaf95eab7d9694486ac7a0fc3967ba4cc24cbc3\",\"license\":\"UNLICENSED\"},\"contracts/vault/IClaimers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n\\ninterface IClaimers is IERC721 {}\\n\",\"keccak256\":\"0xd97a87eafbbb119e1502474e5b80fcce276e7f76976d738f0f44db07fb812a12\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVault {\\n    //\\n    // Structs\\n    //\\n    struct ClaimParams {\\n        uint16 pct;\\n        address beneficiary;\\n        bytes data;\\n    }\\n\\n    struct DepositParams {\\n        uint256 amount;\\n        ClaimParams[] claims;\\n        uint256 lockedUntil;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    event DepositMinted(\\n        uint256 indexed id,\\n        uint256 groupId,\\n        uint256 amount,\\n        uint256 shares,\\n        address indexed depositor,\\n        address indexed claimer,\\n        uint256 claimerId,\\n        uint256 lockedUntil\\n    );\\n\\n    event DepositBurned(uint256 indexed id, uint256 shares, address indexed to);\\n\\n    event InvestPercentageUpdated(uint256 percentage);\\n\\n    event Invested(uint256 amount);\\n\\n    event StrategyUpdated(address indexed strategy);\\n\\n    event YieldClaimed(\\n        uint256 claimerId,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 burnedShares\\n    );\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Update the invested amount;\\n     */\\n    function updateInvested() external;\\n\\n    /**\\n     * Calculates underlying investable amount.\\n     *\\n     * @return the investable amount\\n     */\\n    function investableAmount() external view returns (uint256);\\n\\n    /**\\n     * Update invest percentage\\n     *\\n     * Emits {InvestPercentageUpdated} event\\n     *\\n     * @param _investPct the new invest percentage\\n     */\\n    function setInvestPerc(uint16 _investPct) external;\\n\\n    /**\\n     * Percentage of the total underlying to invest in the strategy\\n     */\\n    function investPerc() external view returns (uint256);\\n\\n    /**\\n     * Underlying ERC20 token accepted by the vault\\n     */\\n    function underlying() external view returns (IERC20);\\n\\n    /**\\n     * Minimum lock period for each deposit\\n     */\\n    function minLockPeriod() external view returns (uint256);\\n\\n    /**\\n     * Total amount of underlying currently controlled by the\\n     * vault and the its strategy.\\n     */\\n    function totalUnderlyingWithSponsor() external view returns (uint256);\\n\\n    /**\\n     * Computes the amount of yield available for an an address.\\n     *\\n     * @param _to address to consider.\\n     *\\n     * @return amount of yield for @param _to.\\n     */\\n    function yieldFor(address _to) external view returns (uint256);\\n\\n    /**\\n     * Transfers all the yield generated for the caller to\\n     *\\n     * @param _to Address that will receive the yield.\\n     */\\n    function claimYield(address _to) external;\\n\\n    /**\\n     * Creates a new deposit\\n     *\\n     * @param _params Deposit params\\n     */\\n    function deposit(DepositParams calldata _params) external;\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the expected amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function withdraw(address _to, uint256[] memory _ids) external;\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * When the vault is underperforming it withdraws the funds with a loss.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function forceWithdraw(address _to, uint256[] memory _ids) external;\\n\\n    /**\\n     * Changes the strategy used by the vault.\\n     *\\n     * @param _strategy the new strategy's address.\\n     */\\n    function setStrategy(address _strategy) external;\\n}\\n\",\"keccak256\":\"0x917f7269f182884fcf0bf64cbc8c34deae3126aec5abfe095ebb6a261c18aa8a\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVaultSponsoring.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVaultSponsoring {\\n    /// Emitted when a new sponsor deposit is created\\n    event Sponsored(\\n        uint256 indexed id,\\n        uint256 amount,\\n        address indexed depositor,\\n        uint256 lockedUntil\\n    );\\n\\n    /// Emitted when an existing sponsor withdraws\\n    event Unsponsored(uint256 indexed id);\\n\\n    /**\\n     * Total amount currently sponsored\\n     */\\n    function totalSponsored() external view returns (uint256);\\n\\n    /**\\n     * Creates a sponsored deposit with the amount provided in @param _amount.\\n     * Sponsored amounts will be invested like deposits, but unlike deposits\\n     * there are no claimers and the yield generated is donated to the vault.\\n     * The amount is locked until the timestamp specified in @param _lockedUntil.\\n     *\\n     * @param _amount Amount to sponsor.\\n     * @param _lockedUntil When the depositor can unsponsor the amount.\\n     */\\n    function sponsor(uint256 _amount, uint256 _lockedUntil) external;\\n\\n    /**\\n     * Withdraws the sponsored amount for the deposits with the ids provided\\n     * in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the sponsored amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function unsponsor(address _to, uint256[] memory _ids) external;\\n}\\n\",\"keccak256\":\"0x6056f105b8131a8c0b4a2b9b1cb746a5d78d63a23fd0105a1659cda1b98a5d73\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162006740380380620067408339810160408190526200003491620002ca565b6001600160a01b03811660008181526020818152604091829020805460ff1916600190811790915591519182528392917fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25060018081905550620000ad826200028d60201b620015c31760201c565b620000ff5760405162461bcd60e51b815260206004820152601960248201527f5661756c743a20696e76616c696420696e76657374506572630000000000000060448201526064015b60405180910390fd5b6001600160a01b038416620001665760405162461bcd60e51b815260206004820152602660248201527f5661756c74436f6e746578743a20756e6465726c79696e672063616e6e6f742060448201526506265203078360d41b6064820152608401620000f6565b600b829055600980546001600160a01b0319166001600160a01b038616179055608083905260405130906200019b9062000295565b6001600160a01b039091168152606060208201819052600a90820152696465706f7369746f727360b01b608082015260a060408201819052600190820152600760fc1b60c082015260e001604051809103906000f08015801562000203573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b039290921691909117905560405130906200023490620002a3565b6001600160a01b039091168152602001604051809103906000f08015801562000261573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b0392909216919091179055506200031b92505050565b612710101590565b611b0a80620031b483390190565b611a828062004cbe83390190565b6001600160a01b0381168114620002c757600080fd5b50565b60008060008060808587031215620002e157600080fd5b8451620002ee81620002b1565b80945050602085015192506040850151915060608501516200031081620002b1565b939692955090935050565b608051612e6f62000345600039600081816102bd0152818161195001526119810152612e6f6000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063947fdb8b1161010f578063bba97d33116100a2578063df6f9ba711610071578063df6f9ba7146104a2578063e4020fdf146104b5578063e84b25a2146104c8578063eb0ebfbc146104db57600080fd5b8063bba97d331461045c578063c63aa3e71461046f578063c70920bc14610487578063d812053f1461048f57600080fd5b8063a8c62e76116100de578063a8c62e76146103d7578063aaa46688146103ea578063b02c43d0146103fd578063b0c29efe1461045457600080fd5b8063947fdb8b1461038457806396d6487914610397578063999927df146103ba578063a164c25d146103cd57600080fd5b80634fc78d68116101875780638293744b116101565780638293744b1461031b578063878ecfec1461032e5780638b6ed67d14610351578063908de6c21461036457600080fd5b80634fc78d68146102855780636f307dc31461028d57806373ae54b5146102b85780637c2032e7146102df57600080fd5b806333a100ca116101c357806333a100ca146102575780633a98ef391461026a5780633c90a170146102735780634b1533b21461027c57600080fd5b806301ffc9a7146101f55780630bedf5c11461021d5780631325d5f1146102335780631393916a14610242575b600080fd5b6102086102033660046128f4565b6104e4565b60405190151581526020015b60405180910390f35b610225610581565b604051908152602001610214565b610225670de0b6b3a764000081565b610255610250366004612944565b6106f3565b005b61025561026536600461297d565b6107a0565b61022560075481565b610225600b5481565b61022560085481565b610255610a63565b6009546102a0906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b6102257f000000000000000000000000000000000000000000000000000000000000000081565b6103066102ed36600461299a565b6005602052600090815260409020805460019091015482565b60408051928352602083019190915201610214565b610255610329366004612a23565b610bd4565b61022561033c36600461299a565b60009081526005602052604090206001015490565b600e546102a0906001600160a01b031681565b61022561037236600461299a565b60009081526005602052604090205490565b610255610392366004612ade565b610c96565b6102086103a536600461297d565b60006020819052908152604090205460ff1681565b6102556103c836600461297d565b610ef0565b6102256212750081565b600a546102a0906001600160a01b031681565b600d546102a0906001600160a01b031681565b61043461040b36600461299a565b600360208190526000918252604090912080546001820154600283015492909301549092919084565b604080519485526020850193909352918301526060820152608001610214565b6102256110ac565b61022561046a36600461297d565b611161565b60405167ffffffffffffffff42168152602001610214565b6102256111fe565b61025561049d366004612b00565b611215565b6102556104b0366004612a23565b611370565b6102556104c3366004612a23565b61142a565b6102556104d6366004612b52565b6114e2565b610225600c5481565b60006001600160e01b031982167fa8d2fb0600000000000000000000000000000000000000000000000000000000148061054757506001600160e01b031982167f9b736be800000000000000000000000000000000000000000000000000000000145b8061057b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b600a546000906001600160a01b03161561068757600a60009054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c9190612b6d565b6009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106789190612b6d565b6106829190612b9c565b905090565b6009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106829190612b6d565b3360009081526020819052604090205460ff166107435760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064015b60405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b3360009081526020819052604090205460ff166107eb5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640161073a565b6001600160a01b0381166108415760405162461bcd60e51b815260206004820152601260248201527f5661756c743a2073747261746567792030780000000000000000000000000000604482015260640161073a565b306001600160a01b0316816001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190612bb4565b6001600160a01b0316146109035760405162461bcd60e51b815260206004820152601460248201527f5661756c743a20696e76616c6964207661756c74000000000000000000000000604482015260640161073a565b600a546001600160a01b0316158061098f5750600a60009054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098d9190612b6d565b155b610a015760405162461bcd60e51b815260206004820152602260248201527f5661756c743a2073747261746567792068617320696e7665737465642066756e60448201527f6473000000000000000000000000000000000000000000000000000000000000606482015260840161073a565b600a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f4da9c22c924692646a21cf1f423781ae3285198dc22e8a6912835d3272b90b3c90600090a250565b3360009081526020819052604090205460ff16610aae5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640161073a565b600a546001600160a01b0316610b065760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a207374726174656779206973206e6f7420736574000000000000604482015260640161073a565b6000610b106110ac565b90508015610b6957600a54600954610b35916001600160a01b039182169116836115cb565b6040518181527fac9f7997c30b6a3cc9c74953898b5de154359339c7ec0d6d70ceb98e55db1a4b9060200160405180910390a15b600a60009054906101000a90046001600160a01b03166001600160a01b0316634fa5d8546040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bb957600080fd5b505af1158015610bcd573d6000803e3d6000fd5b5050505050565b60026001541415610c275760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b60026001556001600160a01b038216610c825760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e2061646472657373206973203078604482015260640161073a565b610c8e82826000611661565b505060018055565b60026001541415610ce95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b600260015581610d3b5760405162461bcd60e51b815260206004820152601760248201527f5661756c743a2063616e6e6f742073706f6e736f722030000000000000000000604482015260640161073a565b80610d5457610d4d6212750042612b9c565b9050610db0565b610d616212750042612b9c565b811015610db05760405162461bcd60e51b815260206004820152601d60248201527f5661756c743a206c6f636b2074696d6520697320746f6f20736d616c6c000000604482015260640161073a565b600d546000906001600160a01b0316636a627842336040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af1158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f9190612b6d565b60408051608081018252858152600060208083018281528385018881526060850184815287855260039384905295909320935184555160018401559051600283015591519101559050336001600160a01b0316817f7ca3497675c6d3ec00b1edc13b8e0b06169ee96a663ab25a74af7da53378f09e8585604051610ebd929190918252602082015260400190565b60405180910390a382600c6000828254610ed79190612b9c565b90915550610ee7905033846116eb565b50506001805550565b60026001541415610f435760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b60026001556001600160a01b038116610f9e5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e2061646472657373206973203078604482015260640161073a565b600e546000906001600160a01b03166342ec38e2336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101b9190612b6d565b9050600080611029836117a0565b91509150806000141561103e575050506110a5565b600954611055906001600160a01b031685836115cb565b60408051848152602081018390529081018390526001600160a01b038516907fc64c05237373d420472e7259849c0a314d9c3424021920543562ceffa9b10f949060600160405180910390a25050505b5060018055565b6000806110c3600b546110bd610581565b90611840565b90506000600a60009054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa15801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e9190612b6d565b90508181106111505760009250505090565b61115a8183612bd1565b9250505090565b600e546040517f42ec38e20000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009283929116906342ec38e290602401602060405180830381865afa1580156111c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ec9190612b6d565b90506111f781611859565b9392505050565b6000600c5461120b610581565b6106829190612bd1565b600260015414156112685760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b600260015560085460009061127c906118a9565b905081356112cc5760405162461bcd60e51b815260206004820152601760248201527f5661756c743a2063616e6e6f74206465706f7369742030000000000000000000604482015260640161073a565b6112d46111fe565b8111156113495760405162461bcd60e51b815260206004820152602c60248201527f5661756c743a2063616e6e6f74206465706f736974207768656e207969656c6460448201527f206973206e656761746976650000000000000000000000000000000000000000606482015260840161073a565b611365823560408401356113606020860186612be8565b611946565b610c8e3383356116eb565b600260015414156113c35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b60026001556001600160a01b03821661141e5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e2061646472657373206973203078604482015260640161073a565b610c8e82826001611661565b6002600154141561147d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b60026001556001600160a01b0382166114d85760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e2061646472657373206973203078604482015260640161073a565b610c8e8282611b8c565b3360009081526020819052604090205460ff1661152d5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640161073a565b61ffff811661271010156115835760405162461bcd60e51b815260206004820152601960248201527f5661756c743a20696e76616c696420696e766573745065726300000000000000604482015260640161073a565b60405161ffff821681527fdd970e7931ce785c1e52bab847c1a662f017c55c66edb76ddebbf61b5aa307859060200160405180910390a161ffff16600b55565b612710101590565b6040516001600160a01b03831660248201526044810182905261165c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611e89565b505050565b600754600061166e6111fe565b8451909150600090815b818160ff1610156116ca576116ac878260ff168151811061169b5761169b612c39565b602002602001015186868b8a611f6e565b6116b69084612b9c565b9250806116c281612c4f565b915050611678565b506009546116e2906001600160a01b031688846115cb565b50505050505050565b60006116f5610581565b600954909150611710906001600160a01b0316843085612204565b600061171a610581565b90506117268383612b9c565b811461179a5760405162461bcd60e51b815260206004820152602c60248201527f5661756c743a20616d6f756e7420726563656976656420646f6573206e6f742060448201527f6d6174636820706172616d730000000000000000000000000000000000000000606482015260840161073a565b50505050565b60008060006117ae84611859565b9050806117c15750600093849350915050565b60006117d7826007546117d26111fe565b612255565b905060006117ef826007546117ea6111fe565b612312565b9050816005600088815260200190815260200160002060010160008282546118179190612bd1565b9250508190555081600760008282546118309190612bd1565b9091555091969095509350505050565b600061271061184f8385612c6f565b6111f79190612c8e565b6000818152600560205260408120805460019091015460075483906118829083906117ea6111fe565b905082811161189657506000949350505050565b6118a08382612bd1565b95945050505050565b600a546000906001600160a01b03166118c0575090565b600a546040517f93c3a68f000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03909116906393c3a68f90602401602060405180830381865afa158015611922573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190612b6d565b8261197c576119757f000000000000000000000000000000000000000000000000000000000000000042612b9c565b92506119f5565b6119a67f000000000000000000000000000000000000000000000000000000000000000042612b9c565b8310156119f55760405162461bcd60e51b815260206004820152601d60248201527f5661756c743a206c6f636b2074696d6520697320746f6f20736d616c6c000000604482015260640161073a565b6007546000611a026111fe565b90506000611a0f60025490565b9050600084611a22600280546001019055565b60005b81811015611b09576000888883818110611a4157611a41612c39565b9050602002810190611a539190612cb0565b611a5c90612cd0565b805190915061ffff16611ad75760405162461bcd60e51b815260206004820152602360248201527f5661756c743a20636c61696d2070657263656e746167652063616e6e6f74206260448201527f6520300000000000000000000000000000000000000000000000000000000000606482015260840161073a565b611ae5858c8c848b8b612341565b8051611af59061ffff1685612b9c565b93505080611b0290612d90565b9050611a25565b506127108214611b815760405162461bcd60e51b815260206004820152602260248201527f5661756c743a20636c61696d7320646f6e27742061646420757020746f20313060448201527f3025000000000000000000000000000000000000000000000000000000000000606482015260840161073a565b505050505050505050565b8051600090815b818160ff161015611e02576000848260ff1681518110611bb557611bb5612c39565b6020908102919091018101516000818152600390925260408083206002810154600190910154600d5492516331a9108f60e11b8152600481018590529395509093909290916001600160a01b031690636352211e90602401602060405180830381865afa158015611c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4e9190612bb4565b6000858152600360205260409020549091506001600160a01b0382163314611cb85760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a20796f7520617265206e6f7420616c6c6f776564000000000000604482015260640161073a565b42841115611d085760405162461bcd60e51b815260206004820152601760248201527f5661756c743a20616d6f756e74206973206c6f636b6564000000000000000000604482015260640161073a565b8215611d565760405162461bcd60e51b815260206004820181905260248201527f5661756c743a20746f6b656e206964206973206e6f7420612073706f6e736f72604482015260640161073a565b611d608189612b9c565b600d54604051630852cd8d60e31b8152600481018890529199506001600160a01b0316906342966c6890602401600060405180830381600087803b158015611da757600080fd5b505af1158015611dbb573d6000803e3d6000fd5b50506040518792507f05394e48d744e4a16d65f52f88cdaf0f60f5d18af259df878d44cb80826d221f9150600090a250505050508080611dfa90612c4f565b915050611b93565b5081611e0c610581565b811115611e5b5760405162461bcd60e51b815260206004820152601760248201527f5661756c743a206e6f7420656e6f7567682066756e6473000000000000000000604482015260640161073a565b82600c6000828254611e6d9190612bd1565b9091555050600954610bcd906001600160a01b031686836115cb565b6000611ede826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124fd9092919063ffffffff16565b80519091501561165c5780806020019051810190611efc9190612dab565b61165c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161073a565b600033600d546040516331a9108f60e11b8152600481018990526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015611fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe29190612bb4565b6001600160a01b03161461205e5760405162461bcd60e51b815260206004820152602960248201527f5661756c743a20796f7520617265206e6f7420746865206f776e6572206f662060448201527f61206465706f7369740000000000000000000000000000000000000000000000606482015260840161073a565b6000868152600360205260409020600201544210156120bf5760405162461bcd60e51b815260206004820152601860248201527f5661756c743a206465706f736974206973206c6f636b65640000000000000000604482015260640161073a565b6000868152600360205260409020600101546121435760405162461bcd60e51b815260206004820152602260248201527f5661756c743a206465706f736974206964206973206e6f742061206465706f7360448201527f6974000000000000000000000000000000000000000000000000000000000000606482015260840161073a565b600080612153888888888861250c565b600d54604051630852cd8d60e31b8152600481018c90529294509092506001600160a01b0316906342966c6890602401600060405180830381600087803b15801561219d57600080fd5b505af11580156121b1573d6000803e3d6000fd5b50505050846001600160a01b0316887f95fa98cd1a0b1d7d20d4f5d9f62889e8cfd8d172a99939d2a2f46bb668eb2f4f846040516121f191815260200190565b60405180910390a3979650505050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261179a9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611610565b600083612264575060006111f7565b826122825761227b670de0b6b3a764000085612c6f565b90506111f7565b816122f55760405162461bcd60e51b815260206004820152603660248201527f5661756c743a2063616e6e6f7420636f6d70757465207368617265732077686560448201527f6e2074686572652773206e6f207072696e636970616c00000000000000000000606482015260840161073a565b816123008486612c6f565b61230a9190612c8e565b949350505050565b600082158061231f575081155b1561232c575060006111f7565b826123378584612c6f565b61227b9190612c8e565b825160009061235590879061ffff16611840565b600e5460208601516040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152929350600092911690636a627842906024016020604051808303816000875af11580156123c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e89190612b6d565b600d549091506000906001600160a01b0316636a627842336040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af1158015612446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246a9190612b6d565b9050600061247c8383868b8a8a61269b565b905086602001516001600160a01b03166124933390565b604080518d81526020810188905290810184905260608101869052608081018b90526001600160a01b03919091169084907f98db8624761955d33737f627918f2b1198592f38bb40bbb0a46469b4fe1844b09060a00160405180910390a450505050505050505050565b606061230a848460008561277c565b600085815260036020818152604080842060018082015494820154915485875260059094529185209182015491548594939192908561254c848d8d612255565b905060008582118061255d57508382115b90508980156125695750805b1561258a57826125798587612c6f565b6125839190612c8e565b91506125fe565b80156125fe5760405162461bcd60e51b815260206004820152603560248201527f5661756c743a2063616e6e6f74207769746864726177206d6f7265207468616e60448201527f2074686520617661696c61626c6520616d6f756e740000000000000000000000606482015260840161073a565b6000878152600560205260408120600101805484929061261f908490612bd1565b909155505060008781526005602052604081208054879290612642908490612bd1565b92505081905550816007600082825461265b9190612bd1565b9250508190555084600860008282546126749190612bd1565b90915550829050612686818f8f612312565b98509850505050505050509550959350505050565b6000806126a9868585612255565b905080600560008a815260200190815260200160002060010160008282546126d19190612b9c565b9091555050600088815260056020526040812080548892906126f4908490612b9c565b92505081905550806007600082825461270d9190612b9c565b9250508190555085600860008282546127269190612b9c565b9091555050604080516080810182529687526020808801998a52878201968752606088018381526000998a5260039182905291909820965187559751600187015593516002860155505093519190920155919050565b6060824710156127f45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161073a565b843b6128425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161073a565b600080866001600160a01b0316858760405161285e9190612df4565b60006040518083038185875af1925050503d806000811461289b576040519150601f19603f3d011682016040523d82523d6000602084013e6128a0565b606091505b50915091506128b08282866128bb565b979650505050505050565b606083156128ca5750816111f7565b8251156128da5782518084602001fd5b8160405162461bcd60e51b815260040161073a9190612e06565b60006020828403121561290657600080fd5b81356001600160e01b0319811681146111f757600080fd5b6001600160a01b038116811461293357600080fd5b50565b801515811461293357600080fd5b6000806040838503121561295757600080fd5b82356129628161291e565b9150602083013561297281612936565b809150509250929050565b60006020828403121561298f57600080fd5b81356111f78161291e565b6000602082840312156129ac57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156129ec576129ec6129b3565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612a1b57612a1b6129b3565b604052919050565b60008060408385031215612a3657600080fd5b8235612a418161291e565b915060208381013567ffffffffffffffff80821115612a5f57600080fd5b818601915086601f830112612a7357600080fd5b813581811115612a8557612a856129b3565b8060051b9150612a968483016129f2565b8181529183018401918481019089841115612ab057600080fd5b938501935b83851015612ace57843582529385019390850190612ab5565b8096505050505050509250929050565b60008060408385031215612af157600080fd5b50508035926020909101359150565b600060208284031215612b1257600080fd5b813567ffffffffffffffff811115612b2957600080fd5b8201606081850312156111f757600080fd5b803561ffff81168114612b4d57600080fd5b919050565b600060208284031215612b6457600080fd5b6111f782612b3b565b600060208284031215612b7f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612baf57612baf612b86565b500190565b600060208284031215612bc657600080fd5b81516111f78161291e565b600082821015612be357612be3612b86565b500390565b6000808335601e19843603018112612bff57600080fd5b83018035915067ffffffffffffffff821115612c1a57600080fd5b6020019150600581901b3603821315612c3257600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415612c6657612c66612b86565b60010192915050565b6000816000190483118215151615612c8957612c89612b86565b500290565b600082612cab57634e487b7160e01b600052601260045260246000fd5b500490565b60008235605e19833603018112612cc657600080fd5b9190910192915050565b600060608236031215612ce257600080fd5b612cea6129c9565b612cf383612b3b565b8152602080840135612d048161291e565b82820152604084013567ffffffffffffffff80821115612d2357600080fd5b9085019036601f830112612d3657600080fd5b813581811115612d4857612d486129b3565b612d5a601f8201601f191685016129f2565b91508082523684828501011115612d7057600080fd5b808484018584013760009082019093019290925250604082015292915050565b6000600019821415612da457612da4612b86565b5060010190565b600060208284031215612dbd57600080fd5b81516111f781612936565b60005b83811015612de3578181015183820152602001612dcb565b8381111561179a5750506000910152565b60008251612cc6818460208701612dc8565b6020815260008251806020840152612e25816040850160208701612dc8565b601f01601f1916919091016040019291505056fea2646970667358221220e777a772190d102f65e384a9b4f652a010777c9b5098467bb057e57b00634fb164736f6c634300080a003360806040523480156200001157600080fd5b5060405162001b0a38038062001b0a833981016040819052620000349162000203565b8151829082906200004d90600090602085019062000090565b5080516200006390600190602084019062000090565b5050600780546001600160a01b0319166001600160a01b03959095169490941790935550620002ca915050565b8280546200009e906200028d565b90600052602060002090601f016020900481019282620000c257600085556200010d565b82601f10620000dd57805160ff19168380011785556200010d565b828001600101855582156200010d579182015b828111156200010d578251825591602001919060010190620000f0565b506200011b9291506200011f565b5090565b5b808211156200011b576000815560010162000120565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015e57600080fd5b81516001600160401b03808211156200017b576200017b62000136565b604051601f8301601f19908116603f01168101908282118183101715620001a657620001a662000136565b81604052838152602092508683858801011115620001c357600080fd5b600091505b83821015620001e75785820183015181830184015290820190620001c8565b83821115620001f95760008385830101525b9695505050505050565b6000806000606084860312156200021957600080fd5b83516001600160a01b03811681146200023157600080fd5b60208501519093506001600160401b03808211156200024f57600080fd5b6200025d878388016200014c565b935060408601519150808211156200027457600080fd5b5062000283868287016200014c565b9150509250925092565b600181811c90821680620002a257607f821691505b60208210811415620002c457634e487b7160e01b600052602260045260246000fd5b50919050565b61183080620002da6000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80636352211e116100b2578063a22cb46511610081578063c87b56dd11610066578063c87b56dd1461025e578063e985e9c514610271578063fbfa77cf146102ad57600080fd5b8063a22cb46514610238578063b88d4fde1461024b57600080fd5b80636352211e146101e95780636a627842146101fc57806370a082311461021d57806395d89b411461023057600080fd5b806323b872dd116100ee57806323b872dd1461019d57806342842e0e146101b057806342966c68146101c35780634f558e79146101d657600080fd5b806301ffc9a71461012057806306fdde0314610148578063081812fc1461015d578063095ea7b314610188575b600080fd5b61013361012e3660046113e9565b6102c0565b60405190151581526020015b60405180910390f35b61015061035d565b60405161013f919061145e565b61017061016b366004611471565b6103ef565b6040516001600160a01b03909116815260200161013f565b61019b6101963660046114a1565b610489565b005b61019b6101ab3660046114cb565b6105bb565b61019b6101be3660046114cb565b610642565b61019b6101d1366004611471565b61065d565b6101336101e4366004611471565b6106c3565b6101706101f7366004611471565b6106e2565b61020f61020a366004611507565b61076d565b60405190815260200161013f565b61020f61022b366004611507565b6107f4565b61015061088e565b61019b610246366004611522565b61089d565b61019b610259366004611574565b6108ac565b61015061026c366004611471565b61093a565b61013361027f366004611650565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600754610170906001600160a01b031681565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061032357506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061035757507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606000805461036c90611683565b80601f016020809104026020016040519081016040528092919081815260200182805461039890611683565b80156103e55780601f106103ba576101008083540402835291602001916103e5565b820191906000526020600020905b8154815290600101906020018083116103c857829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661046d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610494826106e2565b9050806001600160a01b0316836001600160a01b0316141561051e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610464565b336001600160a01b038216148061053a575061053a813361027f565b6105ac5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610464565b6105b68383610a30565b505050565b6105c53382610aab565b6106375760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610464565b6105b6838383610ba2565b6105b6838383604051806020016040528060008152506108ac565b6007546001600160a01b031633146106b75760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72733a206e6f7420617574686f72697a65640000000000006044820152606401610464565b6106c081610d7c565b50565b6000818152600260205260408120546001600160a01b03161515610357565b6000818152600260205260408120546001600160a01b0316806103575760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610464565b6007546000906001600160a01b031633146107ca5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72733a206e6f7420617574686f72697a65640000000000006044820152606401610464565b60006107d560065490565b90506107e5600680546001019055565b6103578382610e24565b919050565b60006001600160a01b0382166108725760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610464565b506001600160a01b031660009081526003602052604090205490565b60606001805461036c90611683565b6108a8338383610e3e565b5050565b6108b63383610aab565b6109285760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610464565b61093484848484610f0d565b50505050565b6000818152600260205260409020546060906001600160a01b03166109c75760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610464565b60006109de60408051602081019091526000815290565b905060008151116109fe5760405180602001604052806000815250610a29565b80610a0884610f8b565b604051602001610a199291906116be565b6040516020818303038152906040525b9392505050565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190610a72826106e2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610b245760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610464565b6000610b2f836106e2565b9050806001600160a01b0316846001600160a01b03161480610b6a5750836001600160a01b0316610b5f846103ef565b6001600160a01b0316145b80610b9a57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610bb5826106e2565b6001600160a01b031614610c315760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610464565b6001600160a01b038216610cac5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610464565b610cb7600082610a30565b6001600160a01b0383166000908152600360205260408120805460019290610ce0908490611703565b90915550506001600160a01b0382166000908152600360205260408120805460019290610d0e90849061171a565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610d87826106e2565b9050610d94600083610a30565b6001600160a01b0381166000908152600360205260408120805460019290610dbd908490611703565b9091555050600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6108a88282604051806020016040528060008152506110bd565b816001600160a01b0316836001600160a01b03161415610ea05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610464565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f18848484610ba2565b610f248484848461113b565b6109345760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610464565b606081610fcb57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610ff55780610fdf81611732565b9150610fee9050600a83611763565b9150610fcf565b60008167ffffffffffffffff8111156110105761101061155e565b6040519080825280601f01601f19166020018201604052801561103a576020820181803683370190505b5090505b8415610b9a5761104f600183611703565b915061105c600a86611777565b61106790603061171a565b60f81b81838151811061107c5761107c61178b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506110b6600a86611763565b945061103e565b6110c78383611284565b6110d4600084848461113b565b6105b65760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610464565b60006001600160a01b0384163b1561127957604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061117f9033908990889088906004016117a1565b6020604051808303816000875af19250505080156111ba575060408051601f3d908101601f191682019092526111b7918101906117dd565b60015b61125f573d8080156111e8576040519150601f19603f3d011682016040523d82523d6000602084013e6111ed565b606091505b5080516112575760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610464565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b9a565b506001949350505050565b6001600160a01b0382166112da5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610464565b6000818152600260205260409020546001600160a01b03161561133f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610464565b6001600160a01b038216600090815260036020526040812080546001929061136890849061171a565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146106c057600080fd5b6000602082840312156113fb57600080fd5b8135610a29816113d3565b60005b83811015611421578181015183820152602001611409565b838111156109345750506000910152565b6000815180845261144a816020860160208601611406565b601f01601f19169290920160200192915050565b602081526000610a296020830184611432565b60006020828403121561148357600080fd5b5035919050565b80356001600160a01b03811681146107ef57600080fd5b600080604083850312156114b457600080fd5b6114bd8361148a565b946020939093013593505050565b6000806000606084860312156114e057600080fd5b6114e98461148a565b92506114f76020850161148a565b9150604084013590509250925092565b60006020828403121561151957600080fd5b610a298261148a565b6000806040838503121561153557600080fd5b61153e8361148a565b91506020830135801515811461155357600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561158a57600080fd5b6115938561148a565b93506115a16020860161148a565b925060408501359150606085013567ffffffffffffffff808211156115c557600080fd5b818701915087601f8301126115d957600080fd5b8135818111156115eb576115eb61155e565b604051601f8201601f19908116603f011681019083821181831017156116135761161361155e565b816040528281528a602084870101111561162c57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561166357600080fd5b61166c8361148a565b915061167a6020840161148a565b90509250929050565b600181811c9082168061169757607f821691505b602082108114156116b857634e487b7160e01b600052602260045260246000fd5b50919050565b600083516116d0818460208801611406565b8351908301906116e4818360208801611406565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611715576117156116ed565b500390565b6000821982111561172d5761172d6116ed565b500190565b6000600019821415611746576117466116ed565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826117725761177261174d565b500490565b6000826117865761178661174d565b500690565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b038087168352808616602084015250836040830152608060608301526117d36080830184611432565b9695505050505050565b6000602082840312156117ef57600080fd5b8151610a29816113d356fea26469706673582212204ce05328b10fc22c1662306f9850b1f3ca469951243d29374c9b8d6041e4033e64736f6c634300080a00336080604052600780546001600160a01b03191690553480156200002157600080fd5b5060405162001a8238038062001a82833981016040819052620000449162000178565b6040805180820182526008815267436c61696d65727360c01b602080830191825283518085019094526006845265534e44434c4d60d01b9084015281519192916200009291600091620000d2565b508051620000a8906001906020840190620000d2565b5050600780546001600160a01b0319166001600160a01b03939093169290921790915550620001e7565b828054620000e090620001aa565b90600052602060002090601f0160209004810192826200010457600085556200014f565b82601f106200011f57805160ff19168380011785556200014f565b828001600101855582156200014f579182015b828111156200014f57825182559160200191906001019062000132565b506200015d92915062000161565b5090565b5b808211156200015d576000815560010162000162565b6000602082840312156200018b57600080fd5b81516001600160a01b0381168114620001a357600080fd5b9392505050565b600181811c90821680620001bf57607f821691505b60208210811415620001e157634e487b7160e01b600052602260045260246000fd5b50919050565b61188b80620001f76000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80636a627842116100b2578063adde18b011610081578063c87b56dd11610066578063c87b56dd14610281578063e985e9c514610294578063fbfa77cf146102d057600080fd5b8063adde18b01461024e578063b88d4fde1461026e57600080fd5b80636a6278421461020d57806370a082311461022057806395d89b4114610233578063a22cb4651461023b57600080fd5b806323b872dd116100ee57806323b872dd1461019d57806342842e0e146101b057806342ec38e2146101c35780636352211e146101fa57600080fd5b806301ffc9a71461012057806306fdde0314610148578063081812fc1461015d578063095ea7b314610188575b600080fd5b61013361012e366004611444565b6102e3565b60405190151581526020015b60405180910390f35b610150610380565b60405161013f91906114b9565b61017061016b3660046114cc565b610412565b6040516001600160a01b03909116815260200161013f565b61019b6101963660046114fc565b6104ac565b005b61019b6101ab366004611526565b6105de565b61019b6101be366004611526565b610665565b6101ec6101d1366004611562565b6001600160a01b031660009081526008602052604090205490565b60405190815260200161013f565b6101706102083660046114cc565b610680565b6101ec61021b366004611562565b61070b565b6101ec61022e366004611562565b6107a7565b610150610841565b61019b61024936600461157d565b610850565b6101ec61025c366004611562565b60086020526000908152604090205481565b61019b61027c3660046115cf565b61085f565b61015061028f3660046114cc565b6108ed565b6101336102a23660046116ab565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600754610170906001600160a01b031681565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061034657506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061037a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606000805461038f906116de565b80601f01602080910402602001604051908101604052809291908181526020018280546103bb906116de565b80156104085780601f106103dd57610100808354040283529160200191610408565b820191906000526020600020905b8154815290600101906020018083116103eb57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104905760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104b782610680565b9050806001600160a01b0316836001600160a01b031614156105415760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610487565b336001600160a01b038216148061055d575061055d81336102a2565b6105cf5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610487565b6105d983836109e3565b505050565b6105e83382610a5e565b61065a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610487565b6105d9838383610b55565b6105d98383836040518060200160405280600081525061085f565b6000818152600260205260408120546001600160a01b03168061037a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610487565b6007546000906001600160a01b031633146107685760405162461bcd60e51b815260206004820152601860248201527f436c61696d6572733a206e6f7420617574686f72697a656400000000000000006044820152606401610487565b6001600160a01b0382166000908152600860205260409020548061037a57610794600680546001019055565b5060065461037a8382610d3a565b919050565b60006001600160a01b0382166108255760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610487565b506001600160a01b031660009081526003602052604090205490565b60606001805461038f906116de565b61085b338383610d54565b5050565b6108693383610a5e565b6108db5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610487565b6108e784848484610e23565b50505050565b6000818152600260205260409020546060906001600160a01b031661097a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610487565b600061099160408051602081019091526000815290565b905060008151116109b157604051806020016040528060008152506109dc565b806109bb84610ea1565b6040516020016109cc929190611719565b6040516020818303038152906040525b9392505050565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190610a2582610680565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610ad75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610487565b6000610ae283610680565b9050806001600160a01b0316846001600160a01b03161480610b1d5750836001600160a01b0316610b1284610412565b6001600160a01b0316145b80610b4d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610b6882610680565b6001600160a01b031614610be45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610487565b6001600160a01b038216610c5f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610487565b610c6a838383610fd3565b610c756000826109e3565b6001600160a01b0383166000908152600360205260408120805460019290610c9e90849061175e565b90915550506001600160a01b0382166000908152600360205260408120805460019290610ccc908490611775565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61085b828260405180602001604052806000815250611109565b816001600160a01b0316836001600160a01b03161415610db65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610487565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e2e848484610b55565b610e3a84848484611187565b6108e75760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610487565b606081610ee157505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610f0b5780610ef58161178d565b9150610f049050600a836117be565b9150610ee5565b60008167ffffffffffffffff811115610f2657610f266115b9565b6040519080825280601f01601f191660200182016040528015610f50576020820181803683370190505b5090505b8415610b4d57610f6560018361175e565b9150610f72600a866117d2565b610f7d906030611775565b60f81b818381518110610f9257610f926117e6565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610fcc600a866117be565b9450610f54565b6001600160a01b0382166110295760405162461bcd60e51b815260206004820152601e60248201527f436c61696d6572733a2063616e6e6f74206275726e2074686973204e465400006044820152606401610487565b6001600160a01b038316611055576001600160a01b039190911660009081526008602052604090205550565b6001600160a01b038216600090815260086020526040902054156110e15760405162461bcd60e51b815260206004820152602860248201527f436c61696d6572733a2064657374696e6174696f6e20616c726561647920686160448201527f7320616e204e46540000000000000000000000000000000000000000000000006064820152608401610487565b6001600160a01b03928316600090815260086020526040808220829055929093168352912055565b61111383836112d0565b6111206000848484611187565b6105d95760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610487565b60006001600160a01b0384163b156112c557604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111cb9033908990889088906004016117fc565b6020604051808303816000875af1925050508015611206575060408051601f3d908101601f1916820190925261120391810190611838565b60015b6112ab573d808015611234576040519150601f19603f3d011682016040523d82523d6000602084013e611239565b606091505b5080516112a35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610487565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b4d565b506001949350505050565b6001600160a01b0382166113265760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610487565b6000818152600260205260409020546001600160a01b03161561138b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610487565b61139760008383610fd3565b6001600160a01b03821660009081526003602052604081208054600192906113c0908490611775565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461144157600080fd5b50565b60006020828403121561145657600080fd5b81356109dc8161142b565b60005b8381101561147c578181015183820152602001611464565b838111156108e75750506000910152565b600081518084526114a5816020860160208601611461565b601f01601f19169290920160200192915050565b6020815260006109dc602083018461148d565b6000602082840312156114de57600080fd5b5035919050565b80356001600160a01b03811681146107a257600080fd5b6000806040838503121561150f57600080fd5b611518836114e5565b946020939093013593505050565b60008060006060848603121561153b57600080fd5b611544846114e5565b9250611552602085016114e5565b9150604084013590509250925092565b60006020828403121561157457600080fd5b6109dc826114e5565b6000806040838503121561159057600080fd5b611599836114e5565b9150602083013580151581146115ae57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156115e557600080fd5b6115ee856114e5565b93506115fc602086016114e5565b925060408501359150606085013567ffffffffffffffff8082111561162057600080fd5b818701915087601f83011261163457600080fd5b813581811115611646576116466115b9565b604051601f8201601f19908116603f0116810190838211818310171561166e5761166e6115b9565b816040528281528a602084870101111561168757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156116be57600080fd5b6116c7836114e5565b91506116d5602084016114e5565b90509250929050565b600181811c908216806116f257607f821691505b6020821081141561171357634e487b7160e01b600052602260045260246000fd5b50919050565b6000835161172b818460208801611461565b83519083019061173f818360208801611461565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561177057611770611748565b500390565b6000821982111561178857611788611748565b500190565b60006000198214156117a1576117a1611748565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826117cd576117cd6117a8565b500490565b6000826117e1576117e16117a8565b500690565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380871683528086166020840152508360408301526080606083015261182e608083018461148d565b9695505050505050565b60006020828403121561184a57600080fd5b81516109dc8161142b56fea26469706673582212206d57a0d07866a307f3ad18805bd988dc42882d44592e533796092675e0a8a4ee64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063947fdb8b1161010f578063bba97d33116100a2578063df6f9ba711610071578063df6f9ba7146104a2578063e4020fdf146104b5578063e84b25a2146104c8578063eb0ebfbc146104db57600080fd5b8063bba97d331461045c578063c63aa3e71461046f578063c70920bc14610487578063d812053f1461048f57600080fd5b8063a8c62e76116100de578063a8c62e76146103d7578063aaa46688146103ea578063b02c43d0146103fd578063b0c29efe1461045457600080fd5b8063947fdb8b1461038457806396d6487914610397578063999927df146103ba578063a164c25d146103cd57600080fd5b80634fc78d68116101875780638293744b116101565780638293744b1461031b578063878ecfec1461032e5780638b6ed67d14610351578063908de6c21461036457600080fd5b80634fc78d68146102855780636f307dc31461028d57806373ae54b5146102b85780637c2032e7146102df57600080fd5b806333a100ca116101c357806333a100ca146102575780633a98ef391461026a5780633c90a170146102735780634b1533b21461027c57600080fd5b806301ffc9a7146101f55780630bedf5c11461021d5780631325d5f1146102335780631393916a14610242575b600080fd5b6102086102033660046128f4565b6104e4565b60405190151581526020015b60405180910390f35b610225610581565b604051908152602001610214565b610225670de0b6b3a764000081565b610255610250366004612944565b6106f3565b005b61025561026536600461297d565b6107a0565b61022560075481565b610225600b5481565b61022560085481565b610255610a63565b6009546102a0906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b6102257f000000000000000000000000000000000000000000000000000000000000000081565b6103066102ed36600461299a565b6005602052600090815260409020805460019091015482565b60408051928352602083019190915201610214565b610255610329366004612a23565b610bd4565b61022561033c36600461299a565b60009081526005602052604090206001015490565b600e546102a0906001600160a01b031681565b61022561037236600461299a565b60009081526005602052604090205490565b610255610392366004612ade565b610c96565b6102086103a536600461297d565b60006020819052908152604090205460ff1681565b6102556103c836600461297d565b610ef0565b6102256212750081565b600a546102a0906001600160a01b031681565b600d546102a0906001600160a01b031681565b61043461040b36600461299a565b600360208190526000918252604090912080546001820154600283015492909301549092919084565b604080519485526020850193909352918301526060820152608001610214565b6102256110ac565b61022561046a36600461297d565b611161565b60405167ffffffffffffffff42168152602001610214565b6102256111fe565b61025561049d366004612b00565b611215565b6102556104b0366004612a23565b611370565b6102556104c3366004612a23565b61142a565b6102556104d6366004612b52565b6114e2565b610225600c5481565b60006001600160e01b031982167fa8d2fb0600000000000000000000000000000000000000000000000000000000148061054757506001600160e01b031982167f9b736be800000000000000000000000000000000000000000000000000000000145b8061057b57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b600a546000906001600160a01b03161561068757600a60009054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c9190612b6d565b6009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106789190612b6d565b6106829190612b9c565b905090565b6009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106829190612b6d565b3360009081526020819052604090205460ff166107435760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064015b60405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b3360009081526020819052604090205460ff166107eb5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640161073a565b6001600160a01b0381166108415760405162461bcd60e51b815260206004820152601260248201527f5661756c743a2073747261746567792030780000000000000000000000000000604482015260640161073a565b306001600160a01b0316816001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190612bb4565b6001600160a01b0316146109035760405162461bcd60e51b815260206004820152601460248201527f5661756c743a20696e76616c6964207661756c74000000000000000000000000604482015260640161073a565b600a546001600160a01b0316158061098f5750600a60009054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098d9190612b6d565b155b610a015760405162461bcd60e51b815260206004820152602260248201527f5661756c743a2073747261746567792068617320696e7665737465642066756e60448201527f6473000000000000000000000000000000000000000000000000000000000000606482015260840161073a565b600a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f4da9c22c924692646a21cf1f423781ae3285198dc22e8a6912835d3272b90b3c90600090a250565b3360009081526020819052604090205460ff16610aae5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640161073a565b600a546001600160a01b0316610b065760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a207374726174656779206973206e6f7420736574000000000000604482015260640161073a565b6000610b106110ac565b90508015610b6957600a54600954610b35916001600160a01b039182169116836115cb565b6040518181527fac9f7997c30b6a3cc9c74953898b5de154359339c7ec0d6d70ceb98e55db1a4b9060200160405180910390a15b600a60009054906101000a90046001600160a01b03166001600160a01b0316634fa5d8546040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bb957600080fd5b505af1158015610bcd573d6000803e3d6000fd5b5050505050565b60026001541415610c275760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b60026001556001600160a01b038216610c825760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e2061646472657373206973203078604482015260640161073a565b610c8e82826000611661565b505060018055565b60026001541415610ce95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b600260015581610d3b5760405162461bcd60e51b815260206004820152601760248201527f5661756c743a2063616e6e6f742073706f6e736f722030000000000000000000604482015260640161073a565b80610d5457610d4d6212750042612b9c565b9050610db0565b610d616212750042612b9c565b811015610db05760405162461bcd60e51b815260206004820152601d60248201527f5661756c743a206c6f636b2074696d6520697320746f6f20736d616c6c000000604482015260640161073a565b600d546000906001600160a01b0316636a627842336040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af1158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f9190612b6d565b60408051608081018252858152600060208083018281528385018881526060850184815287855260039384905295909320935184555160018401559051600283015591519101559050336001600160a01b0316817f7ca3497675c6d3ec00b1edc13b8e0b06169ee96a663ab25a74af7da53378f09e8585604051610ebd929190918252602082015260400190565b60405180910390a382600c6000828254610ed79190612b9c565b90915550610ee7905033846116eb565b50506001805550565b60026001541415610f435760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b60026001556001600160a01b038116610f9e5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e2061646472657373206973203078604482015260640161073a565b600e546000906001600160a01b03166342ec38e2336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101b9190612b6d565b9050600080611029836117a0565b91509150806000141561103e575050506110a5565b600954611055906001600160a01b031685836115cb565b60408051848152602081018390529081018390526001600160a01b038516907fc64c05237373d420472e7259849c0a314d9c3424021920543562ceffa9b10f949060600160405180910390a25050505b5060018055565b6000806110c3600b546110bd610581565b90611840565b90506000600a60009054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa15801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e9190612b6d565b90508181106111505760009250505090565b61115a8183612bd1565b9250505090565b600e546040517f42ec38e20000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009283929116906342ec38e290602401602060405180830381865afa1580156111c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ec9190612b6d565b90506111f781611859565b9392505050565b6000600c5461120b610581565b6106829190612bd1565b600260015414156112685760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b600260015560085460009061127c906118a9565b905081356112cc5760405162461bcd60e51b815260206004820152601760248201527f5661756c743a2063616e6e6f74206465706f7369742030000000000000000000604482015260640161073a565b6112d46111fe565b8111156113495760405162461bcd60e51b815260206004820152602c60248201527f5661756c743a2063616e6e6f74206465706f736974207768656e207969656c6460448201527f206973206e656761746976650000000000000000000000000000000000000000606482015260840161073a565b611365823560408401356113606020860186612be8565b611946565b610c8e3383356116eb565b600260015414156113c35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b60026001556001600160a01b03821661141e5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e2061646472657373206973203078604482015260640161073a565b610c8e82826001611661565b6002600154141561147d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161073a565b60026001556001600160a01b0382166114d85760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e2061646472657373206973203078604482015260640161073a565b610c8e8282611b8c565b3360009081526020819052604090205460ff1661152d5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640161073a565b61ffff811661271010156115835760405162461bcd60e51b815260206004820152601960248201527f5661756c743a20696e76616c696420696e766573745065726300000000000000604482015260640161073a565b60405161ffff821681527fdd970e7931ce785c1e52bab847c1a662f017c55c66edb76ddebbf61b5aa307859060200160405180910390a161ffff16600b55565b612710101590565b6040516001600160a01b03831660248201526044810182905261165c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611e89565b505050565b600754600061166e6111fe565b8451909150600090815b818160ff1610156116ca576116ac878260ff168151811061169b5761169b612c39565b602002602001015186868b8a611f6e565b6116b69084612b9c565b9250806116c281612c4f565b915050611678565b506009546116e2906001600160a01b031688846115cb565b50505050505050565b60006116f5610581565b600954909150611710906001600160a01b0316843085612204565b600061171a610581565b90506117268383612b9c565b811461179a5760405162461bcd60e51b815260206004820152602c60248201527f5661756c743a20616d6f756e7420726563656976656420646f6573206e6f742060448201527f6d6174636820706172616d730000000000000000000000000000000000000000606482015260840161073a565b50505050565b60008060006117ae84611859565b9050806117c15750600093849350915050565b60006117d7826007546117d26111fe565b612255565b905060006117ef826007546117ea6111fe565b612312565b9050816005600088815260200190815260200160002060010160008282546118179190612bd1565b9250508190555081600760008282546118309190612bd1565b9091555091969095509350505050565b600061271061184f8385612c6f565b6111f79190612c8e565b6000818152600560205260408120805460019091015460075483906118829083906117ea6111fe565b905082811161189657506000949350505050565b6118a08382612bd1565b95945050505050565b600a546000906001600160a01b03166118c0575090565b600a546040517f93c3a68f000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03909116906393c3a68f90602401602060405180830381865afa158015611922573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190612b6d565b8261197c576119757f000000000000000000000000000000000000000000000000000000000000000042612b9c565b92506119f5565b6119a67f000000000000000000000000000000000000000000000000000000000000000042612b9c565b8310156119f55760405162461bcd60e51b815260206004820152601d60248201527f5661756c743a206c6f636b2074696d6520697320746f6f20736d616c6c000000604482015260640161073a565b6007546000611a026111fe565b90506000611a0f60025490565b9050600084611a22600280546001019055565b60005b81811015611b09576000888883818110611a4157611a41612c39565b9050602002810190611a539190612cb0565b611a5c90612cd0565b805190915061ffff16611ad75760405162461bcd60e51b815260206004820152602360248201527f5661756c743a20636c61696d2070657263656e746167652063616e6e6f74206260448201527f6520300000000000000000000000000000000000000000000000000000000000606482015260840161073a565b611ae5858c8c848b8b612341565b8051611af59061ffff1685612b9c565b93505080611b0290612d90565b9050611a25565b506127108214611b815760405162461bcd60e51b815260206004820152602260248201527f5661756c743a20636c61696d7320646f6e27742061646420757020746f20313060448201527f3025000000000000000000000000000000000000000000000000000000000000606482015260840161073a565b505050505050505050565b8051600090815b818160ff161015611e02576000848260ff1681518110611bb557611bb5612c39565b6020908102919091018101516000818152600390925260408083206002810154600190910154600d5492516331a9108f60e11b8152600481018590529395509093909290916001600160a01b031690636352211e90602401602060405180830381865afa158015611c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4e9190612bb4565b6000858152600360205260409020549091506001600160a01b0382163314611cb85760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a20796f7520617265206e6f7420616c6c6f776564000000000000604482015260640161073a565b42841115611d085760405162461bcd60e51b815260206004820152601760248201527f5661756c743a20616d6f756e74206973206c6f636b6564000000000000000000604482015260640161073a565b8215611d565760405162461bcd60e51b815260206004820181905260248201527f5661756c743a20746f6b656e206964206973206e6f7420612073706f6e736f72604482015260640161073a565b611d608189612b9c565b600d54604051630852cd8d60e31b8152600481018890529199506001600160a01b0316906342966c6890602401600060405180830381600087803b158015611da757600080fd5b505af1158015611dbb573d6000803e3d6000fd5b50506040518792507f05394e48d744e4a16d65f52f88cdaf0f60f5d18af259df878d44cb80826d221f9150600090a250505050508080611dfa90612c4f565b915050611b93565b5081611e0c610581565b811115611e5b5760405162461bcd60e51b815260206004820152601760248201527f5661756c743a206e6f7420656e6f7567682066756e6473000000000000000000604482015260640161073a565b82600c6000828254611e6d9190612bd1565b9091555050600954610bcd906001600160a01b031686836115cb565b6000611ede826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124fd9092919063ffffffff16565b80519091501561165c5780806020019051810190611efc9190612dab565b61165c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161073a565b600033600d546040516331a9108f60e11b8152600481018990526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015611fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe29190612bb4565b6001600160a01b03161461205e5760405162461bcd60e51b815260206004820152602960248201527f5661756c743a20796f7520617265206e6f7420746865206f776e6572206f662060448201527f61206465706f7369740000000000000000000000000000000000000000000000606482015260840161073a565b6000868152600360205260409020600201544210156120bf5760405162461bcd60e51b815260206004820152601860248201527f5661756c743a206465706f736974206973206c6f636b65640000000000000000604482015260640161073a565b6000868152600360205260409020600101546121435760405162461bcd60e51b815260206004820152602260248201527f5661756c743a206465706f736974206964206973206e6f742061206465706f7360448201527f6974000000000000000000000000000000000000000000000000000000000000606482015260840161073a565b600080612153888888888861250c565b600d54604051630852cd8d60e31b8152600481018c90529294509092506001600160a01b0316906342966c6890602401600060405180830381600087803b15801561219d57600080fd5b505af11580156121b1573d6000803e3d6000fd5b50505050846001600160a01b0316887f95fa98cd1a0b1d7d20d4f5d9f62889e8cfd8d172a99939d2a2f46bb668eb2f4f846040516121f191815260200190565b60405180910390a3979650505050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261179a9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611610565b600083612264575060006111f7565b826122825761227b670de0b6b3a764000085612c6f565b90506111f7565b816122f55760405162461bcd60e51b815260206004820152603660248201527f5661756c743a2063616e6e6f7420636f6d70757465207368617265732077686560448201527f6e2074686572652773206e6f207072696e636970616c00000000000000000000606482015260840161073a565b816123008486612c6f565b61230a9190612c8e565b949350505050565b600082158061231f575081155b1561232c575060006111f7565b826123378584612c6f565b61227b9190612c8e565b825160009061235590879061ffff16611840565b600e5460208601516040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152929350600092911690636a627842906024016020604051808303816000875af11580156123c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e89190612b6d565b600d549091506000906001600160a01b0316636a627842336040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af1158015612446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246a9190612b6d565b9050600061247c8383868b8a8a61269b565b905086602001516001600160a01b03166124933390565b604080518d81526020810188905290810184905260608101869052608081018b90526001600160a01b03919091169084907f98db8624761955d33737f627918f2b1198592f38bb40bbb0a46469b4fe1844b09060a00160405180910390a450505050505050505050565b606061230a848460008561277c565b600085815260036020818152604080842060018082015494820154915485875260059094529185209182015491548594939192908561254c848d8d612255565b905060008582118061255d57508382115b90508980156125695750805b1561258a57826125798587612c6f565b6125839190612c8e565b91506125fe565b80156125fe5760405162461bcd60e51b815260206004820152603560248201527f5661756c743a2063616e6e6f74207769746864726177206d6f7265207468616e60448201527f2074686520617661696c61626c6520616d6f756e740000000000000000000000606482015260840161073a565b6000878152600560205260408120600101805484929061261f908490612bd1565b909155505060008781526005602052604081208054879290612642908490612bd1565b92505081905550816007600082825461265b9190612bd1565b9250508190555084600860008282546126749190612bd1565b90915550829050612686818f8f612312565b98509850505050505050509550959350505050565b6000806126a9868585612255565b905080600560008a815260200190815260200160002060010160008282546126d19190612b9c565b9091555050600088815260056020526040812080548892906126f4908490612b9c565b92505081905550806007600082825461270d9190612b9c565b9250508190555085600860008282546127269190612b9c565b9091555050604080516080810182529687526020808801998a52878201968752606088018381526000998a5260039182905291909820965187559751600187015593516002860155505093519190920155919050565b6060824710156127f45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161073a565b843b6128425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161073a565b600080866001600160a01b0316858760405161285e9190612df4565b60006040518083038185875af1925050503d806000811461289b576040519150601f19603f3d011682016040523d82523d6000602084013e6128a0565b606091505b50915091506128b08282866128bb565b979650505050505050565b606083156128ca5750816111f7565b8251156128da5782518084602001fd5b8160405162461bcd60e51b815260040161073a9190612e06565b60006020828403121561290657600080fd5b81356001600160e01b0319811681146111f757600080fd5b6001600160a01b038116811461293357600080fd5b50565b801515811461293357600080fd5b6000806040838503121561295757600080fd5b82356129628161291e565b9150602083013561297281612936565b809150509250929050565b60006020828403121561298f57600080fd5b81356111f78161291e565b6000602082840312156129ac57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156129ec576129ec6129b3565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612a1b57612a1b6129b3565b604052919050565b60008060408385031215612a3657600080fd5b8235612a418161291e565b915060208381013567ffffffffffffffff80821115612a5f57600080fd5b818601915086601f830112612a7357600080fd5b813581811115612a8557612a856129b3565b8060051b9150612a968483016129f2565b8181529183018401918481019089841115612ab057600080fd5b938501935b83851015612ace57843582529385019390850190612ab5565b8096505050505050509250929050565b60008060408385031215612af157600080fd5b50508035926020909101359150565b600060208284031215612b1257600080fd5b813567ffffffffffffffff811115612b2957600080fd5b8201606081850312156111f757600080fd5b803561ffff81168114612b4d57600080fd5b919050565b600060208284031215612b6457600080fd5b6111f782612b3b565b600060208284031215612b7f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612baf57612baf612b86565b500190565b600060208284031215612bc657600080fd5b81516111f78161291e565b600082821015612be357612be3612b86565b500390565b6000808335601e19843603018112612bff57600080fd5b83018035915067ffffffffffffffff821115612c1a57600080fd5b6020019150600581901b3603821315612c3257600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415612c6657612c66612b86565b60010192915050565b6000816000190483118215151615612c8957612c89612b86565b500290565b600082612cab57634e487b7160e01b600052601260045260246000fd5b500490565b60008235605e19833603018112612cc657600080fd5b9190910192915050565b600060608236031215612ce257600080fd5b612cea6129c9565b612cf383612b3b565b8152602080840135612d048161291e565b82820152604084013567ffffffffffffffff80821115612d2357600080fd5b9085019036601f830112612d3657600080fd5b813581811115612d4857612d486129b3565b612d5a601f8201601f191685016129f2565b91508082523684828501011115612d7057600080fd5b808484018584013760009082019093019290925250604082015292915050565b6000600019821415612da457612da4612b86565b5060010190565b600060208284031215612dbd57600080fd5b81516111f781612936565b60005b83811015612de3578181015183820152602001612dcb565b8381111561179a5750506000910152565b60008251612cc6818460208701612dc8565b6020815260008251806020840152612e25816040850160208701612dc8565b601f01601f1916919091016040019291505056fea2646970667358221220e777a772190d102f65e384a9b4f652a010777c9b5098467bb057e57b00634fb164736f6c634300080a0033",
  "devdoc": {
    "details": "Yield generation strategies not yet implemented",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_underlying": "Underlying ERC20 token to use."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalUnderlying()": {
        "returns": {
          "_0": "Total amount of principal and yield help by the vault (not including sponsored amount)."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Sponsored(uint256,uint256,address,uint256)": {
        "notice": "Emitted when a new sponsor deposit is created"
      },
      "Unsponsored(uint256)": {
        "notice": "Emitted when an existing sponsor withdraws"
      }
    },
    "kind": "user",
    "methods": {
      "claimYield(address)": {
        "notice": "See {IVault}"
      },
      "claimers()": {
        "notice": "Yield allocation"
      },
      "deposit((uint256,(uint16,address,bytes)[],uint256))": {
        "notice": "See {IVault}"
      },
      "depositors()": {
        "notice": "Depositors, represented as an NFT per deposit"
      },
      "forceWithdraw(address,uint256[])": {
        "notice": "See {IVault}"
      },
      "investPerc()": {
        "notice": "See {IVault}"
      },
      "investableAmount()": {
        "notice": "See {IVault}"
      },
      "minLockPeriod()": {
        "notice": "See {IVault}"
      },
      "setInvestPerc(uint16)": {
        "notice": "See {IVault}"
      },
      "setStrategy(address)": {
        "notice": "See {IVault}"
      },
      "sponsor(uint256,uint256)": {
        "notice": "See {IVaultSponsoring}"
      },
      "strategy()": {
        "notice": "See {IVault}"
      },
      "totalSponsored()": {
        "notice": "See {IVaultSponsoring}"
      },
      "totalUnderlying()": {
        "notice": "Computes the total amount of principal + yield currently controlled by the vault and the strategy. The principal + yield is the total amount of underlying that can be claimed or withdrawn, excluding the sponsored amount."
      },
      "totalUnderlyingWithSponsor()": {
        "notice": "See {IVault}"
      },
      "underlying()": {
        "notice": "Underlying ERC20 token accepted by the vault See {IVault}"
      },
      "unsponsor(address,uint256[])": {
        "notice": "See {IVaultSponsoring}"
      },
      "updateInvested()": {
        "notice": "See {IVault}"
      },
      "withdraw(address,uint256[])": {
        "notice": "See {IVault}"
      },
      "yieldFor(address)": {
        "notice": "See {IVault}"
      }
    },
    "notice": "A vault where other accounts can deposit an underlying token currency and set distribution params for their principal and yield",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3576,
        "contract": "contracts/Vault.sol:Vault",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 438,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3667,
        "contract": "contracts/Vault.sol:Vault",
        "label": "depositGroupIds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)2657_storage"
      },
      {
        "astId": 3685,
        "contract": "contracts/Vault.sol:Vault",
        "label": "deposits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Deposit)3680_storage)"
      },
      {
        "astId": 3688,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_depositIds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)2657_storage"
      },
      {
        "astId": 3698,
        "contract": "contracts/Vault.sol:Vault",
        "label": "claimer",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Claimer)3693_storage)"
      },
      {
        "astId": 3701,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_claimerIds",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)2657_storage"
      },
      {
        "astId": 3703,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalShares",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3705,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalPrincipal",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4212,
        "contract": "contracts/Vault.sol:Vault",
        "label": "underlying",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)1091"
      },
      {
        "astId": 4216,
        "contract": "contracts/Vault.sol:Vault",
        "label": "strategy",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IStrategy)8691"
      },
      {
        "astId": 4219,
        "contract": "contracts/Vault.sol:Vault",
        "label": "investPerc",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4229,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalSponsored",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4233,
        "contract": "contracts/Vault.sol:Vault",
        "label": "depositors",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(Depositors)10493"
      },
      {
        "astId": 4237,
        "contract": "contracts/Vault.sol:Vault",
        "label": "claimers",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(Claimers)10392"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Claimers)10392": {
        "encoding": "inplace",
        "label": "contract Claimers",
        "numberOfBytes": "20"
      },
      "t_contract(Depositors)10493": {
        "encoding": "inplace",
        "label": "contract Depositors",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1091": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)8691": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Claimer)3693_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BaseVault.Claimer)",
        "numberOfBytes": "32",
        "value": "t_struct(Claimer)3693_storage"
      },
      "t_mapping(t_uint256,t_struct(Deposit)3680_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BaseVault.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)3680_storage"
      },
      "t_struct(Claimer)3693_storage": {
        "encoding": "inplace",
        "label": "struct BaseVault.Claimer",
        "members": [
          {
            "astId": 3690,
            "contract": "contracts/Vault.sol:Vault",
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3692,
            "contract": "contracts/Vault.sol:Vault",
            "label": "totalShares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2657_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2656,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Deposit)3680_storage": {
        "encoding": "inplace",
        "label": "struct BaseVault.Deposit",
        "members": [
          {
            "astId": 3670,
            "contract": "contracts/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3673,
            "contract": "contracts/Vault.sol:Vault",
            "label": "claimerId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3676,
            "contract": "contracts/Vault.sol:Vault",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3679,
            "contract": "contracts/Vault.sol:Vault",
            "label": "shares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}