{
  "language": "Solidity",
  "sources": {
    "contracts/BaseVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Counters} from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {Trust} from \"@rari-capital/solmate/src/auth/Trust.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport {Depositors} from \"./vault/Depositors.sol\";\nimport {Claimers} from \"./vault/Claimers.sol\";\nimport {PercentMath} from \"./lib/PercentMath.sol\";\n\ncontract BaseVault {\n    using Counters for Counters.Counter;\n    using PercentMath for uint256;\n\n    uint256 public constant SHARES_MULTIPLIER = 10**18;\n\n    /// Unique IDs to correlate donations that belong to the same foundation\n    Counters.Counter internal depositGroupIds;\n\n    struct Deposit {\n        /// amount of the deposit\n        uint256 amount;\n        /// wallet of the claimer\n        uint256 claimerId;\n        /// when can the deposit be withdrawn\n        uint256 lockedUntil;\n        /// the number of shares issued for this deposit\n        uint256 shares;\n    }\n\n    mapping(uint256 => Deposit) public deposits;\n    Counters.Counter internal _depositIds;\n\n    struct Claimer {\n        uint256 totalPrincipal;\n        uint256 totalShares;\n    }\n\n    mapping(uint256 => Claimer) public claimer;\n    Counters.Counter internal _claimerIds;\n\n    // The total of shares\n    uint256 public totalShares;\n\n    // The total of principal deposited\n    uint256 public totalPrincipal;\n\n    /**\n     * Removes the principal and shares of a deposit.\n     * If there is any yield to be claimed, it will stay with the claimer.\n     *\n     * @notice If the vault underperformed and lost money, the deposit will be\n     * valued at a percentage of the total deposited.\n     *\n     * @param _depositId The deposit ID to withdraw from.\n     * @param _totalShares The total shares to consider for the withdraw.\n     * @param _totalUnderlying The total underlying to consider for the withdraw.\n     * @param _to Where the funds will be sent\n     * @param _force If the withdraw should still withdraw if there are not enough funds in the vault.\n     *\n     * @return deleted shares\n     * @return amount to withdraw.\n     */\n    function _withdraw(\n        uint256 _depositId,\n        uint256 _totalShares,\n        uint256 _totalUnderlying,\n        address _to,\n        bool _force\n    ) internal returns (uint256, uint256) {\n        uint256 claimerId = deposits[_depositId].claimerId;\n        uint256 depositInitialShares = deposits[_depositId].shares;\n        uint256 depositAmount = deposits[_depositId].amount;\n\n        uint256 claimerShares = claimer[claimerId].totalShares;\n        uint256 claimerPrincipal = claimer[claimerId].totalPrincipal;\n\n        uint256 depositShares = _computeShares(\n            depositAmount,\n            _totalShares,\n            _totalUnderlying\n        );\n\n        bool lostMoney = depositShares > depositInitialShares ||\n            depositShares > claimerShares;\n\n        if (_force && lostMoney) {\n            // When there's a loss it means that a deposit is now worth more\n            // shares than before. In that scenario, we cannot allow the\n            // depositor to withdraw all her money. Instead, the depositor gets\n            // a number of shares that are equivalent to the percentage of this\n            // deposit in the total deposits for this claimer.\n            depositShares = (depositAmount * claimerShares) / claimerPrincipal;\n        } else {\n            require(\n                lostMoney == false,\n                \"Vault: cannot withdraw more than the available amount\"\n            );\n        }\n\n        claimer[claimerId].totalShares -= depositShares;\n        claimer[claimerId].totalPrincipal -= depositAmount;\n\n        totalShares -= depositShares;\n        totalPrincipal -= depositAmount;\n\n        return (\n            depositShares,\n            _computeAmount(depositShares, _totalShares, _totalUnderlying)\n        );\n    }\n\n    /**\n     * Creates a deposit with the given params.\n     *\n     * @notice The lock period is not enforced by this function.\n     *\n     * @param _claimerId ID of the claimer.\n     * @param _depositId ID of the deposit.\n     * @param _amount Deposit amount.\n     * @param _lockedUntil When the depositor can withdraw the deposit.\n     * @param _localTotalShares Global total of shares to consider.\n     * @param _localTotalPrincipal Global total of principal to consider.\n     *\n     * @return number of shares minted for the deposit.\n     */\n    function _deposit(\n        uint256 _claimerId,\n        uint256 _depositId,\n        uint256 _amount,\n        uint256 _lockedUntil,\n        uint256 _localTotalShares,\n        uint256 _localTotalPrincipal\n    ) internal returns (uint256) {\n        uint256 newShares = _computeShares(\n            _amount,\n            _localTotalShares,\n            _localTotalPrincipal\n        );\n\n        claimer[_claimerId].totalShares += newShares;\n        claimer[_claimerId].totalPrincipal += _amount;\n\n        totalShares += newShares;\n        totalPrincipal += _amount;\n\n        deposits[_depositId] = Deposit(\n            _amount,\n            _claimerId,\n            _lockedUntil,\n            newShares\n        );\n\n        return newShares;\n    }\n\n    /**\n     * Claims the yield for a claimer.\n     *\n     * @param _claimerId ID of the claimer.\n     *\n     * @return claimed shares.\n     * @return amount to transfer.\n     */\n    function _claimYield(uint256 _claimerId)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 yield = _yieldFor(_claimerId);\n\n        if (yield == 0) return (0, 0);\n\n        uint256 shares = _computeShares(yield, totalShares, totalUnderlying());\n\n        uint256 sharesAmount = _computeAmount(\n            shares,\n            totalShares,\n            totalUnderlying()\n        );\n\n        claimer[_claimerId].totalShares -= shares;\n        totalShares -= shares;\n\n        return (shares, sharesAmount);\n    }\n\n    /**\n     * Calulates the yield available for a claimer.\n     *\n     * @param _claimerId ID of the claimer.\n     *\n     * @return amount available to claim.\n     */\n    function _yieldFor(uint256 _claimerId) internal view returns (uint256) {\n        uint256 claimerPrincipal = claimer[_claimerId].totalPrincipal;\n        uint256 claimerShares = claimer[_claimerId].totalShares;\n\n        uint256 currentClaimerPrincipal = _computeAmount(\n            claimerShares,\n            totalShares,\n            totalUnderlying()\n        );\n\n        if (currentClaimerPrincipal <= claimerPrincipal) {\n            return 0;\n        }\n\n        return currentClaimerPrincipal - claimerPrincipal;\n    }\n\n    /**\n     * Computes the amount of underlying from a given number of shares\n     *\n     * @param _shares Number of shares.\n     * @param _totalShares Amount of existing shares to consider.\n     * @param _totalUnderlying Amounf of existing underlying to consider.\n     *\n     * @return Amount that corresponds to the number of shares.\n     */\n    function _computeAmount(\n        uint256 _shares,\n        uint256 _totalShares,\n        uint256 _totalUnderlying\n    ) internal pure returns (uint256) {\n        if (_totalShares == 0 || _totalUnderlying == 0) {\n            return 0;\n        } else {\n            return ((_totalUnderlying * _shares) / _totalShares);\n        }\n    }\n\n    /**\n     * Computes amount of shares that will be received for a given deposit amount\n     *\n     * @param _amount Amount of deposit to consider.\n     * @param _totalShares Amount of existing shares to consider.\n     * @param _totalUnderlying Amounf of existing underlying to consider.\n     *\n     * @return Amount of shares the deposit will receive.\n     */\n    function _computeShares(\n        uint256 _amount,\n        uint256 _totalShares,\n        uint256 _totalUnderlying\n    ) internal pure returns (uint256) {\n        if (_amount == 0) return 0;\n        if (_totalShares == 0) return _amount * SHARES_MULTIPLIER;\n\n        require(\n            _totalUnderlying != 0,\n            \"Vault: cannot compute shares when there's no principal\"\n        );\n\n        return (_amount * _totalShares) / _totalUnderlying;\n    }\n\n    function totalUnderlying() public view virtual returns (uint256) {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@rari-capital/solmate/src/auth/Trust.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.0;\n\n/// @notice Ultra minimal authorization logic for smart contracts.\n/// @author Inspired by Dappsys V2 (https://github.com/dapp-org/dappsys-v2/blob/main/src/auth.sol)\nabstract contract Trust {\n    event UserTrustUpdated(address indexed user, bool trusted);\n\n    mapping(address => bool) public isTrusted;\n\n    constructor(address initialUser) {\n        isTrusted[initialUser] = true;\n\n        emit UserTrustUpdated(initialUser, true);\n    }\n\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\n        isTrusted[user] = trusted;\n\n        emit UserTrustUpdated(user, trusted);\n    }\n\n    modifier requiresTrust() {\n        require(isTrusted[msg.sender], \"UNTRUSTED\");\n\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/vault/Depositors.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {Counters} from \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract Depositors is ERC721 {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIds;\n    address public vault;\n\n    modifier onlyVault() {\n        require(msg.sender == vault, \"Depositors: not authorized\");\n        _;\n    }\n\n    constructor(\n        address _vault,\n        string memory _name,\n        string memory _symbol\n    ) ERC721(_name, _symbol) {\n        vault = _vault;\n    }\n\n    // should only be callable by the vault\n    function mint(address _owner) external onlyVault returns (uint256) {\n        uint256 localTokenId = _tokenIds.current();\n        _tokenIds.increment();\n\n        _safeMint(_owner, localTokenId);\n\n        return localTokenId;\n    }\n\n    // called when a deposit's principal is withdrawn\n    function burn(uint256 _id) external onlyVault {\n        _burn(_id);\n    }\n\n    function exists(uint256 _tokenId) external view returns (bool) {\n        return _exists(_tokenId);\n    }\n}\n"
    },
    "contracts/vault/Claimers.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {Counters} from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"hardhat/console.sol\";\n\nimport {IClaimers} from \"./IClaimers.sol\";\n\ncontract Claimers is ERC721, IClaimers {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIds;\n    address public vault = address(0);\n\n    mapping(address => uint256) public addressToTokenID;\n\n    modifier onlyVault() {\n        require(msg.sender == vault, \"Claimers: not authorized\");\n        _;\n    }\n\n    // TODO Make names dynamic\n    constructor(address _vault) ERC721(\"Claimers\", \"SNDCLM\") {\n        vault = _vault;\n    }\n\n    function mint(address _to) external onlyVault returns (uint256) {\n        uint256 localTokenId = addressToTokenID[_to];\n\n        if (localTokenId == 0) {\n            _tokenIds.increment();\n            localTokenId = _tokenIds.current();\n\n            _safeMint(_to, localTokenId);\n        }\n\n        return localTokenId;\n    }\n\n    function tokenOf(address _owner) external view returns (uint256) {\n        return addressToTokenID[_owner];\n    }\n\n    /**\n     * Ensures the addressToTokenID mapping is up to date.\n     *\n     * @notice This function prevents transfers to addresses that already own an NFT.\n     *\n     * @param _from origin address.\n     * @param _to destination address.\n     * @param _tokenId id of the token.\n     */\n    function _beforeTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) internal virtual override {\n        require(_to != address(0), \"Claimers: cannot burn this NFT\");\n\n        if (_from == address(0)) {\n            // MINT\n            addressToTokenID[_to] = _tokenId;\n        } else {\n            // TRANSFER\n            require(\n                addressToTokenID[_to] == 0,\n                \"Claimers: destination already has an NFT\"\n            );\n\n            addressToTokenID[_from] = 0;\n            addressToTokenID[_to] = _tokenId;\n        }\n    }\n}\n"
    },
    "contracts/lib/PercentMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nlibrary PercentMath {\n    // Divisor used for representing percentages\n    uint256 public constant PERC_DIVISOR = 10000;\n\n    /**\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\n     * @param _amount Amount that is supposed to be a percentage\n     */\n    function validPerc(uint256 _amount) internal pure returns (bool) {\n        return _amount <= PERC_DIVISOR;\n    }\n\n    /**\n     * @dev Compute percentage of a value with the percentage represented by a fraction\n     * @param _amount Amount to take the percentage of\n     * @param _fracNum Numerator of fraction representing the percentage\n     * @param _fracDenom Denominator of fraction representing the percentage\n     */\n    function percOf(\n        uint256 _amount,\n        uint256 _fracNum,\n        uint256 _fracDenom\n    ) internal pure returns (uint256) {\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\n    }\n\n    /**\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\n     * @param _amount Amount to take the percentage of\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\n     */\n    function percOf(uint256 _amount, uint256 _fracNum)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (_amount * _fracNum) / PERC_DIVISOR;\n    }\n\n    /**\n     * @dev Checks if a given number corresponds to 100%\n     * @param _perc Percentage value to check, with PERC_DIVISOR\n     */\n    function is100Perc(uint256 _perc) internal pure returns (bool) {\n        return _perc == PERC_DIVISOR;\n    }\n\n    /**\n     * @dev Compute percentage representation of a fraction\n     * @param _fracNum Numerator of fraction represeting the percentage\n     * @param _fracDenom Denominator of fraction represeting the percentage\n     */\n    function percPoints(uint256 _fracNum, uint256 _fracDenom)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/vault/IClaimers.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n\ninterface IClaimers is IERC721 {}\n"
    },
    "contracts/Vault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Counters} from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {Trust} from \"@rari-capital/solmate/src/auth/Trust.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport {IVault} from \"./vault/IVault.sol\";\nimport {IVaultSponsoring} from \"./vault/IVaultSponsoring.sol\";\nimport {PercentMath} from \"./lib/PercentMath.sol\";\nimport {Depositors} from \"./vault/Depositors.sol\";\nimport {Claimers} from \"./vault/Claimers.sol\";\nimport {IStrategy} from \"./strategy/IStrategy.sol\";\nimport {ERC165Query} from \"./lib/ERC165Query.sol\";\nimport {BaseVault} from \"./BaseVault.sol\";\n\nimport \"hardhat/console.sol\";\n\n/**\n * A vault where other accounts can deposit an underlying token\n * currency and set distribution params for their principal and yield\n *\n * @dev Yield generation strategies not yet implemented\n */\n\ncontract Vault is\n    IVault,\n    IVaultSponsoring,\n    Context,\n    ERC165,\n    Trust,\n    ReentrancyGuard,\n    BaseVault\n{\n    using Counters for Counters.Counter;\n    using SafeERC20 for IERC20;\n    using PercentMath for uint256;\n    using Address for address;\n    using ERC165Query for address;\n\n    //\n    // Constants\n    //\n\n    uint256 public constant MIN_SPONSOR_LOCK_DURATION = 1209600; // 2 weeks in seconds\n\n    //\n    // State\n    //\n\n    /// Underlying ERC20 token accepted by the vault\n    /// See {IVault}\n    IERC20 public override(IVault) underlying;\n\n    /// See {IVault}\n    IStrategy public strategy;\n\n    /// See {IVault}\n    uint256 public investPerc;\n\n    /// See {IVault}\n    uint256 public immutable override(IVault) minLockPeriod;\n\n    /// See {IVaultSponsoring}\n    uint256 public override(IVaultSponsoring) totalSponsored;\n\n    /// Depositors, represented as an NFT per deposit\n    Depositors public depositors;\n\n    /// Yield allocation\n    Claimers public claimers;\n\n    /**\n     * @param _underlying Underlying ERC20 token to use.\n     */\n    constructor(\n        IERC20 _underlying,\n        uint256 _minLockPeriod,\n        uint256 _investPerc,\n        address _owner\n    ) Trust(_owner) {\n        require(\n            PercentMath.validPerc(_investPerc),\n            \"Vault: invalid investPerc\"\n        );\n        require(\n            address(_underlying) != address(0x0),\n            \"VaultContext: underlying cannot be 0x0\"\n        );\n        investPerc = _investPerc;\n        underlying = _underlying;\n        minLockPeriod = _minLockPeriod;\n\n        depositors = new Depositors(address(this), \"depositors\", \"p\");\n        claimers = new Claimers(address(this));\n    }\n\n    //\n    // IVault\n    //\n\n    /// See {IVault}\n    function setStrategy(address _strategy)\n        external\n        override(IVault)\n        requiresTrust\n    {\n        require(_strategy != address(0), \"Vault: strategy 0x\");\n        require(\n            IStrategy(_strategy).vault() == address(this),\n            \"Vault: invalid vault\"\n        );\n        require(\n            address(strategy) == address(0) || strategy.investedAssets() == 0,\n            \"Vault: strategy has invested funds\"\n        );\n\n        strategy = IStrategy(_strategy);\n\n        emit StrategyUpdated(_strategy);\n    }\n\n    /// See {IVault}\n    function totalUnderlyingWithSponsor()\n        public\n        view\n        override(IVault)\n        returns (uint256)\n    {\n        if (address(strategy) != address(0)) {\n            return\n                underlying.balanceOf(address(this)) + strategy.investedAssets();\n        } else {\n            return underlying.balanceOf(address(this));\n        }\n    }\n\n    /// See {IVault}\n\n    /// See {IVault}\n    function yieldFor(address _to)\n        public\n        view\n        override(IVault)\n        returns (uint256)\n    {\n        uint256 tokenId = claimers.tokenOf(_to);\n        return _yieldFor(tokenId);\n    }\n\n    /// See {IVault}\n    function deposit(DepositParams calldata _params) external nonReentrant {\n        uint256 principalMinusStrategyFee = _applyInvestmentFee(totalPrincipal);\n\n        require(_params.amount != 0, \"Vault: cannot deposit 0\");\n        require(\n            principalMinusStrategyFee <= totalUnderlying(),\n            \"Vault: cannot deposit when yield is negative\"\n        );\n\n        _createDeposit(_params.amount, _params.lockedUntil, _params.claims);\n        _transferAndCheckUnderlying(_msgSender(), _params.amount);\n    }\n\n    /// See {IVault}\n    function claimYield(address _to) external override(IVault) nonReentrant {\n        require(_to != address(0), \"Vault: destination address is 0x\");\n\n        uint256 claimerId = claimers.tokenOf(_msgSender());\n\n        (uint256 shares, uint256 sharesAmount) = _claimYield(claimerId);\n\n        if (sharesAmount == 0) return;\n\n        underlying.safeTransfer(_to, sharesAmount);\n\n        emit YieldClaimed(claimerId, _to, sharesAmount, shares);\n    }\n\n    /// See {IVault}\n    function withdraw(address _to, uint256[] memory _ids)\n        external\n        override(IVault)\n        nonReentrant\n    {\n        require(_to != address(0), \"Vault: destination address is 0x\");\n\n        _withdraw(_to, _ids, false);\n    }\n\n    /// See {IVault}\n    function forceWithdraw(address _to, uint256[] memory _ids)\n        external\n        nonReentrant\n    {\n        require(_to != address(0), \"Vault: destination address is 0x\");\n\n        _withdraw(_to, _ids, true);\n    }\n\n    /// See {IVault}\n    function setInvestPerc(uint16 _investPerc) external requiresTrust {\n        require(\n            PercentMath.validPerc(_investPerc),\n            \"Vault: invalid investPerc\"\n        );\n\n        emit InvestPercentageUpdated(_investPerc);\n\n        investPerc = _investPerc;\n    }\n\n    /// See {IVault}\n    function investableAmount() public view returns (uint256) {\n        uint256 maxInvestableAssets = totalUnderlyingWithSponsor().percOf(\n            investPerc\n        );\n\n        uint256 alreadyInvested = strategy.investedAssets();\n\n        if (alreadyInvested >= maxInvestableAssets) {\n            return 0;\n        } else {\n            return maxInvestableAssets - alreadyInvested;\n        }\n    }\n\n    /// See {IVault}\n    function updateInvested() external requiresTrust {\n        require(address(strategy) != address(0), \"Vault: strategy is not set\");\n\n        uint256 _investable = investableAmount();\n\n        if (_investable != 0) {\n            underlying.safeTransfer(address(strategy), _investable);\n\n            emit Invested(_investable);\n        }\n\n        strategy.doHardWork();\n    }\n\n    //\n    // IVaultSponsoring\n\n    /// See {IVaultSponsoring}\n    function sponsor(uint256 _amount, uint256 _lockedUntil)\n        external\n        override(IVaultSponsoring)\n        nonReentrant\n    {\n        require(_amount != 0, \"Vault: cannot sponsor 0\");\n\n        if (_lockedUntil == 0)\n            _lockedUntil = block.timestamp + MIN_SPONSOR_LOCK_DURATION;\n        else\n            require(\n                _lockedUntil >= block.timestamp + MIN_SPONSOR_LOCK_DURATION,\n                \"Vault: lock time is too small\"\n            );\n\n        uint256 tokenId = depositors.mint(_msgSender());\n\n        deposits[tokenId] = Deposit(_amount, 0, _lockedUntil, 0);\n\n        emit Sponsored(tokenId, _amount, _msgSender(), _lockedUntil);\n\n        totalSponsored += _amount;\n        _transferAndCheckUnderlying(_msgSender(), _amount);\n    }\n\n    /// See {IVaultSponsoring}\n    function unsponsor(address _to, uint256[] memory _ids)\n        external\n        nonReentrant\n    {\n        require(_to != address(0), \"Vault: destination address is 0x\");\n\n        _unsponsor(_to, _ids);\n    }\n\n    //\n    // Public API\n    //\n\n    /**\n     * Computes the total amount of principal + yield currently controlled by the\n     * vault and the strategy. The principal + yield is the total amount\n     * of underlying that can be claimed or withdrawn, excluding the sponsored amount.\n     *\n     * @return Total amount of principal and yield help by the vault (not including sponsored amount).\n     */\n    function totalUnderlying() public view virtual override returns (uint256) {\n        return totalUnderlyingWithSponsor() - totalSponsored;\n    }\n\n    //\n    // ERC165\n    //\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IVault).interfaceId ||\n            interfaceId == type(IVaultSponsoring).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    //\n    // Internal API\n    //\n\n    /**\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\n     *\n     * @notice the NFTs of the deposits will be burned.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     * @param _force Boolean to specify if the action should be perfomed when there's loss.\n     */\n    function _withdraw(\n        address _to,\n        uint256[] memory _ids,\n        bool _force\n    ) internal {\n        uint256 localTotalShares = totalShares;\n        uint256 localTotalPrincipal = totalUnderlying();\n        uint256 amount;\n        uint256 idsLen = _ids.length;\n\n        for (uint8 i; i < idsLen; i++) {\n            amount += _withdrawDeposit(\n                _ids[i],\n                localTotalShares,\n                localTotalPrincipal,\n                _to,\n                _force\n            );\n        }\n\n        underlying.safeTransfer(_to, amount);\n    }\n\n    /**\n     * Withdraws the sponsored amount for the deposits with the ids provided\n     * in @param _ids and sends it to @param _to.\n     *\n     * @notice the NFTs of the deposits will be burned.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function _unsponsor(address _to, uint256[] memory _ids) internal {\n        uint256 sponsorAmount;\n        uint256 idsLen = _ids.length;\n\n        for (uint8 i; i < idsLen; i++) {\n            uint256 tokenId = _ids[i];\n\n            uint256 lockedUntil = deposits[tokenId].lockedUntil;\n            uint256 claimerId = deposits[tokenId].claimerId;\n            address owner = depositors.ownerOf(tokenId);\n            uint256 amount = deposits[tokenId].amount;\n\n            require(owner == _msgSender(), \"Vault: you are not allowed\");\n            require(lockedUntil <= block.timestamp, \"Vault: amount is locked\");\n            require(claimerId == 0, \"Vault: token id is not a sponsor\");\n\n            sponsorAmount += amount;\n\n            depositors.burn(tokenId);\n\n            emit Unsponsored(tokenId);\n        }\n\n        uint256 sponsorToTransfer = sponsorAmount;\n\n        require(\n            sponsorToTransfer <= totalUnderlyingWithSponsor(),\n            \"Vault: not enough funds\"\n        );\n\n        totalSponsored -= sponsorAmount;\n\n        underlying.safeTransfer(_to, sponsorToTransfer);\n    }\n\n    /**\n     * Creates a deposit with the given amount of underlying and claim\n     * structure. The deposit is locked until the timestamp specified in @param _lockedUntil.\n     * @notice This function assumes underlying will be transfered elsewhere in\n     * the transaction.\n     *\n     * @notice Underlying must be transfered *after* this function, in order to\n     * correctly calculate shares.\n     *\n     * @notice claims must add up to 100%.\n     *\n     * @param _amount Amount of underlying to consider @param claims claim\n     * @param _lockedUntil When the depositor can withdraw the amount.\n     * @param claims Claim params\n     * params.\n     */\n    function _createDeposit(\n        uint256 _amount,\n        uint256 _lockedUntil,\n        ClaimParams[] calldata claims\n    ) internal {\n        if (_lockedUntil == 0) _lockedUntil = block.timestamp + minLockPeriod;\n        else\n            require(\n                _lockedUntil >= block.timestamp + minLockPeriod,\n                \"Vault: lock time is too small\"\n            );\n\n        uint256 localTotalShares = totalShares;\n        uint256 localTotalUnderlying = totalUnderlying();\n        uint256 groupId = depositGroupIds.current();\n        uint256 pct;\n        uint256 claimsLen = claims.length;\n\n        depositGroupIds.increment();\n\n        for (uint256 i; i < claimsLen; ++i) {\n            ClaimParams memory claim = claims[i];\n            require(claim.pct != 0, \"Vault: claim percentage cannot be 0\");\n\n            _createClaim(\n                groupId,\n                _amount,\n                _lockedUntil,\n                claim,\n                localTotalShares,\n                localTotalUnderlying\n            );\n            pct += claim.pct;\n        }\n\n        require(pct.is100Perc(), \"Vault: claims don't add up to 100%\");\n    }\n\n    function _createClaim(\n        uint256 _depositGroupId,\n        uint256 _amount,\n        uint256 _lockedUntil,\n        ClaimParams memory _claim,\n        uint256 _localTotalShares,\n        uint256 _localTotalPrincipal\n    ) internal {\n        uint256 amount = _amount.percOf(_claim.pct);\n        uint256 claimerId = claimers.mint(_claim.beneficiary);\n        uint256 depositId = depositors.mint(_msgSender());\n\n        uint256 newShares = _deposit(\n            claimerId,\n            depositId,\n            amount,\n            _lockedUntil,\n            _localTotalShares,\n            _localTotalPrincipal\n        );\n\n        emit DepositMinted(\n            depositId,\n            _depositGroupId,\n            amount,\n            newShares,\n            _msgSender(),\n            _claim.beneficiary,\n            claimerId,\n            _lockedUntil\n        );\n    }\n\n    /**\n     * Burns a deposit NFT and reduces the principal and shares of the claimer.\n     * If there is any yield to be claimed, it will stay with the claimer.\n     *\n     * @notice This function doesn't transfer any funds, it only updates the state.\n     *\n     * @notice Only the owner of the deposit may call this function.\n     *\n     * @param _depositId The deposit ID to withdraw from.\n     * @param _totalShares The total shares to consider for the withdraw.\n     * @param _totalUnderlying The total underlying to consider for the withdraw.\n     * @param _to Where the funds will be sent\n     * @param _force If the withdraw should still withdraw if there are not enough funds in the vault.\n     *\n     * @return the amount to withdraw.\n     */\n    function _withdrawDeposit(\n        uint256 _depositId,\n        uint256 _totalShares,\n        uint256 _totalUnderlying,\n        address _to,\n        bool _force\n    ) internal returns (uint256) {\n        require(\n            depositors.ownerOf(_depositId) == _msgSender(),\n            \"Vault: you are not the owner of a deposit\"\n        );\n\n        require(\n            deposits[_depositId].lockedUntil <= block.timestamp,\n            \"Vault: deposit is locked\"\n        );\n\n        require(\n            deposits[_depositId].claimerId != 0,\n            \"Vault: deposit id is not a deposit\"\n        );\n\n        (uint256 shares, uint256 amount) = _withdraw(\n            _depositId,\n            _totalShares,\n            _totalUnderlying,\n            _to,\n            _force\n        );\n\n        depositors.burn(_depositId);\n\n        emit DepositBurned(_depositId, shares, _to);\n\n        return amount;\n    }\n\n    function _transferAndCheckUnderlying(address _from, uint256 _amount)\n        internal\n    {\n        uint256 balanceBefore = totalUnderlyingWithSponsor();\n        underlying.safeTransferFrom(_from, address(this), _amount);\n        uint256 balanceAfter = totalUnderlyingWithSponsor();\n\n        require(\n            balanceAfter == balanceBefore + _amount,\n            \"Vault: amount received does not match params\"\n        );\n    }\n\n    function _blockTimestamp() public view returns (uint64) {\n        return uint64(block.timestamp);\n    }\n\n    /**\n     * Applies an estimated fee to the given @param _amount.\n     *\n     * This function should be used to estimate how much underlying will be\n     * left after the strategy invests. For instance, the fees taken by Anchor\n     * and Curve.\n     *\n     * @notice Returns @param _amount when a strategy is not set.\n     *\n     * @param _amount Amount to apply the fees to.\n     *\n     * @return Amount with the fees applied.\n     */\n    function _applyInvestmentFee(uint256 _amount)\n        internal\n        view\n        returns (uint256)\n    {\n        if (address(strategy) == address(0)) return _amount;\n\n        return strategy.applyInvestmentFee(_amount);\n    }\n\n    function sharesOf(uint256 claimerId) external view returns (uint256) {\n        return claimer[claimerId].totalShares;\n    }\n\n    function principalOf(uint256 claimerId) external view returns (uint256) {\n        return claimer[claimerId].totalPrincipal;\n    }\n}\n"
    },
    "contracts/vault/IVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVault {\n    //\n    // Structs\n    //\n    struct ClaimParams {\n        uint16 pct;\n        address beneficiary;\n        bytes data;\n    }\n\n    struct DepositParams {\n        uint256 amount;\n        ClaimParams[] claims;\n        uint256 lockedUntil;\n    }\n\n    //\n    // Events\n    //\n\n    event DepositMinted(\n        uint256 indexed id,\n        uint256 groupId,\n        uint256 amount,\n        uint256 shares,\n        address indexed depositor,\n        address indexed claimer,\n        uint256 claimerId,\n        uint256 lockedUntil\n    );\n\n    event DepositBurned(uint256 indexed id, uint256 shares, address indexed to);\n\n    event InvestPercentageUpdated(uint256 percentage);\n\n    event Invested(uint256 amount);\n\n    event StrategyUpdated(address indexed strategy);\n\n    event YieldClaimed(\n        uint256 claimerId,\n        address indexed to,\n        uint256 amount,\n        uint256 burnedShares\n    );\n\n    //\n    // Public API\n    //\n\n    /**\n     * Update the invested amount;\n     */\n    function updateInvested() external;\n\n    /**\n     * Calculates underlying investable amount.\n     *\n     * @return the investable amount\n     */\n    function investableAmount() external view returns (uint256);\n\n    /**\n     * Update invest percentage\n     *\n     * Emits {InvestPercentageUpdated} event\n     *\n     * @param _investPct the new invest percentage\n     */\n    function setInvestPerc(uint16 _investPct) external;\n\n    /**\n     * Percentage of the total underlying to invest in the strategy\n     */\n    function investPerc() external view returns (uint256);\n\n    /**\n     * Underlying ERC20 token accepted by the vault\n     */\n    function underlying() external view returns (IERC20);\n\n    /**\n     * Minimum lock period for each deposit\n     */\n    function minLockPeriod() external view returns (uint256);\n\n    /**\n     * Total amount of underlying currently controlled by the\n     * vault and the its strategy.\n     */\n    function totalUnderlyingWithSponsor() external view returns (uint256);\n\n    /**\n     * Computes the amount of yield available for an an address.\n     *\n     * @param _to address to consider.\n     *\n     * @return amount of yield for @param _to.\n     */\n    function yieldFor(address _to) external view returns (uint256);\n\n    /**\n     * Transfers all the yield generated for the caller to\n     *\n     * @param _to Address that will receive the yield.\n     */\n    function claimYield(address _to) external;\n\n    /**\n     * Creates a new deposit\n     *\n     * @param _params Deposit params\n     */\n    function deposit(DepositParams calldata _params) external;\n\n    /**\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\n     *\n     * It fails if the vault is underperforming and there are not enough funds\n     * to withdraw the expected amount.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function withdraw(address _to, uint256[] memory _ids) external;\n\n    /**\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\n     *\n     * When the vault is underperforming it withdraws the funds with a loss.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function forceWithdraw(address _to, uint256[] memory _ids) external;\n\n    /**\n     * Changes the strategy used by the vault.\n     *\n     * @param _strategy the new strategy's address.\n     */\n    function setStrategy(address _strategy) external;\n}\n"
    },
    "contracts/vault/IVaultSponsoring.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVaultSponsoring {\n    /// Emitted when a new sponsor deposit is created\n    event Sponsored(\n        uint256 indexed id,\n        uint256 amount,\n        address indexed depositor,\n        uint256 lockedUntil\n    );\n\n    /// Emitted when an existing sponsor withdraws\n    event Unsponsored(uint256 indexed id);\n\n    /**\n     * Total amount currently sponsored\n     */\n    function totalSponsored() external view returns (uint256);\n\n    /**\n     * Creates a sponsored deposit with the amount provided in @param _amount.\n     * Sponsored amounts will be invested like deposits, but unlike deposits\n     * there are no claimers and the yield generated is donated to the vault.\n     * The amount is locked until the timestamp specified in @param _lockedUntil.\n     *\n     * @param _amount Amount to sponsor.\n     * @param _lockedUntil When the depositor can unsponsor the amount.\n     */\n    function sponsor(uint256 _amount, uint256 _lockedUntil) external;\n\n    /**\n     * Withdraws the sponsored amount for the deposits with the ids provided\n     * in @param _ids and sends it to @param _to.\n     *\n     * It fails if the vault is underperforming and there are not enough funds\n     * to withdraw the sponsored amount.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function unsponsor(address _to, uint256[] memory _ids) external;\n}\n"
    },
    "contracts/strategy/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * Strategies can be plugged into vaults to invest and manage their underlying funds\n *\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault\n *\n * @notice It's up to the vault to decide how much to invest from the total pool\n */\ninterface IStrategy {\n    /**\n     * The underlying ERC20 token stored by the vault\n     *\n     * @return The ERC20 token address\n     */\n    function underlying() external view returns (IERC20);\n\n    /**\n     * The vault linked to this stragegy\n     *\n     * @return The vault's address\n     */\n    function vault() external view returns (address);\n\n    /**\n     * Withdraws all underlying back to vault.\n     *\n     * @notice If underlying is currently invested, this also starts the\n     * cross-chain process to redeem it. After that is done, this function\n     * should be called a second time to finish the withdrawal of that portion.\n     */\n    function withdrawAllToVault() external;\n\n    /**\n     * Withdraws a specified amount back to the vault\n     *\n     * @notice Unlike `withdrawToVault`, this function only considers the\n     * amount currently not invested, but only what is currently held by the\n     * strategy\n     *\n     * @param amount Amount to withdraw\n     */\n    function withdrawToVault(uint256 amount) external;\n\n    /**\n     * Amount, expressed in the underlying currency, currently in the strategy\n     *\n     * @notice both held and invested amounts are included here, using the\n     * latest known exchange rates to the underlying currency\n     *\n     * @return The total amount of underlying\n     */\n    function investedAssets() external view returns (uint256);\n\n    /**\n     * Applies an estimated fee to the given @param _amount.\n     *\n     * This function should be used to estimate how much underlying will be\n     * left after the strategy invests. For instance, the fees taken by Anchor\n     * and Curve.\n     *\n     * @param _amount Amount to apply the fees to.\n     *\n     * @return Amount with the fees applied.\n     */\n    function applyInvestmentFee(uint256 _amount) external view returns (uint256);\n\n    /**\n     * Initiates the process of investing the underlying currency\n     */\n    function doHardWork() external;\n\n    /**\n     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.\n     *\n     * @notice Must be called some time after `initRedeemStable()`. Will only work if\n     * the EthAnchor bridge has finished processing the deposit.\n     *\n     * @param idx Id of the pending redeem operation\n     */\n    function finishRedeemStable(uint256 idx) external;\n}\n"
    },
    "contracts/lib/ERC165Query.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nlibrary ERC165Query {\n    bytes4 constant InvalidID = 0xffffffff;\n    bytes4 constant ERC165ID = 0x01ffc9a7;\n\n    function doesContractImplementInterface(\n        address _contract,\n        bytes4 _interfaceId\n    ) internal view returns (bool) {\n        uint256 success;\n        uint256 result;\n\n        (success, result) = noThrowCall(_contract, ERC165ID);\n        if ((success == 0) || (result == 0)) {\n            return false;\n        }\n\n        (success, result) = noThrowCall(_contract, InvalidID);\n        if ((success == 0) || (result != 0)) {\n            return false;\n        }\n\n        (success, result) = noThrowCall(_contract, _interfaceId);\n        if ((success == 1) && (result == 1)) {\n            return true;\n        }\n        return false;\n    }\n\n    function noThrowCall(address _contract, bytes4 _interfaceId)\n        internal\n        view\n        returns (uint256 success, uint256 result)\n    {\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n            let x := mload(0x40) // Find empty storage location using \"free memory pointer\"\n            mstore(x, erc165ID) // Place signature at beginning of empty storage\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n            success := staticcall(\n                30000, // 30k gas\n                _contract, // To addr\n                x, // Inputs are stored at location x\n                0x24, // Inputs are 36 bytes long\n                x, // Store output over input (saves space)\n                0x20\n            ) // Outputs are 32 bytes long\n\n            result := mload(x) // Load the result\n        }\n    }\n}\n"
    },
    "contracts/integrations/DCA/DCAUniswapV3.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport {Trust} from \"@rari-capital/solmate/src/auth/Trust.sol\";\n\nimport {IUniswapV3SwapRouter} from \"../../lib/uniswap-v3/IUniswapV3SwapRouter.sol\";\nimport {IVault} from \"../../vault/IVault.sol\";\nimport {IDCA} from \"./IDCA.sol\";\nimport {DCAQueue} from \"./DCAQueue.sol\";\nimport {DCAScheduler} from \"./DCAScheduler.sol\";\n\nimport \"hardhat/console.sol\";\n\n/**\n * DCA contract targeting a Uniswap pool\n *\n * @dev This currently uses Uniswap's Router. Ideally, we should directly call\n * the necessary pairs instead, to save on gas\n */\ncontract DCAUniswapV3 is IDCA, DCAQueue, DCAScheduler, Trust {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    //\n    // Constants\n    //\n\n    // Uniswap Router 02\n    IUniswapV3SwapRouter public constant router =\n        IUniswapV3SwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n\n    /// Since we need to avoid decimals, minRate requirements on swap functions need to be multiplied by this before being sent.\n    /// This allows the final minAmountOut to be calculated before losing precision\n    uint256 public constant RATES_MULTIPLIER = 1e18;\n\n    //\n    // State\n    //\n\n    address public input;\n    address public output;\n    bytes public path;\n\n    /**\n     * @param _vault the vault to claim from\n     * @param _output the token to buy\n     * @param _path the uniswap trading path\n     * @param _period The minimum period between each purchase\n     */\n    constructor(\n        address _vault,\n        address _output,\n        bytes memory _path,\n        uint256 _period,\n        address _trusted\n    ) DCAScheduler(_period) DCAQueue(_vault) Trust(_trusted) {\n        path = _path;\n        input = address(IVault(_vault).underlying());\n        output = _output;\n\n        IERC20(input).approve(address(router), MAX_INT);\n    }\n\n    //\n    // IDCA\n    //\n\n    /// See {IDCA}\n    function executeSwap(uint256 _minRate, uint256 _deadline)\n        external\n        override(IDCA)\n        onlyAfterPeriod\n        requiresTrust\n    {\n        // TODO check output balance before and after\n        // TODO keep track of various exchange rates\n\n        _claimFromVault();\n        _swap(_minRate, _deadline);\n    }\n\n    //\n    // Internal API\n    //\n\n    /**\n     * Performs the main swap\n     */\n    function _swap(uint256 _minRate, uint256 _deadline) internal {\n        uint256 purchaseIndex = purchases.length;\n        uint256 amountIn = IERC20(input).balanceOf(address(this));\n        uint256 amountOutMin = ((amountIn * _minRate) / RATES_MULTIPLIER);\n\n        uint256 balanceBefore = IERC20(output).balanceOf(address(this));\n        router.exactInput(\n            IUniswapV3SwapRouter.ExactInputParams({\n                path: path,\n                recipient: address(this),\n                deadline: _deadline,\n                amountIn: amountIn,\n                amountOutMinimum: amountOutMin\n            })\n        );\n        uint256 balanceAfter = IERC20(output).balanceOf(address(this));\n        uint256 amountOut = balanceAfter - balanceBefore;\n\n        purchases.push(Purchase(amountOut, totalShares));\n\n        emit SwapExecuted(purchaseIndex, amountIn, amountOut);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/lib/uniswap-v3/IUniswapV3SwapRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\n/// https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\ninterface IUniswapV3SwapRouter {\n    function exactInput(IUniswapV3SwapRouter.ExactInputParams memory params)\n        external\n        returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n}\n"
    },
    "contracts/integrations/DCA/IDCA.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IIntegration} from \"../IIntegration.sol\";\n\ninterface IDCA is IIntegration {\n    //\n    // Events\n    //\n\n    event Withdrawn(address indexed beneficiary, uint256 amount);\n\n    event SharesMinted(address indexed beneficiary, uint256 shares);\n\n    event SharesBurned(address indexed beneficiary, uint256 shares);\n\n    event SwapExecuted(\n        uint256 indexed purchaseIndex,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    //\n    // Public API\n    //\n\n    /**\n     * The vault linked to this DCA\n     */\n    function vault() external view returns (address);\n\n    /**\n     * The underlying token that will be used\n     */\n    function input() external view returns (address);\n\n    /**\n     * The token to invest in\n     */\n    function output() external view returns (address);\n\n    /**\n     * Withdraws all the amount due to an account\n     */\n    function withdraw() external;\n\n    /**\n     * Computes total amount due to an account, for all the purchases he had shares in\n     *\n     * @param _beneficiary Account to check the balance of\n     */\n    function balanceOf(address _beneficiary) external view returns (uint256);\n\n    /**\n     * Executes a periodic purchase\n     *\n     * @param _amountOutMin minimum expected amount of output token\n     */\n    function executeSwap(uint256 _amountOutMin, uint256 _deadline) external;\n}\n"
    },
    "contracts/integrations/DCA/DCAQueue.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {IIntegration} from \"../IIntegration.sol\";\nimport {IDCA} from \"./IDCA.sol\";\nimport {IVault} from \"../../vault/IVault.sol\";\n\nimport \"hardhat/console.sol\";\n\n/**\n * DCA logic registerend account positions as a Queue struct\n *\n * This allows vaults to keep constant gas prices when editing account\n * positions, which must later be collapsed and accounted for when calculating\n * the full account balance;\n */\nabstract contract DCAQueue is IDCA, Context, ERC165 {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    //\n    // Constants\n    //\n    uint256 public constant MAX_INT = 2**256 - 1;\n\n    //\n    // Structs\n    //\n\n    struct Purchase {\n        uint256 amountBought;\n        uint256 totalShares;\n    }\n\n    struct Position {\n        uint256 start;\n        uint256 end;\n        uint256 shares;\n    }\n\n    struct Deposit {\n        address beneficiary;\n        uint256 shares;\n    }\n\n    struct Queue {\n        mapping(uint256 => Position) queue;\n        uint256 first;\n        uint256 length;\n    }\n\n    // TODO this is essentially a Queue struct. maybe abstract that away into a separate lib?\n    struct Account {\n        Queue positions;\n        uint256 reserved;\n    }\n\n    //\n    // State\n    //\n\n    address public override(IDCA) vault;\n    Purchase[] public purchases;\n    mapping(uint256 => Deposit) public deposits;\n    mapping(address => Account) accounts;\n\n    uint256 public totalShares;\n\n    constructor(address _vault) {\n        require(\n            _vault.isContract() &&\n                IERC165(_vault).supportsInterface(type(IVault).interfaceId),\n            \"DCAQueue: vault does not implement IVault\"\n        );\n\n        vault = _vault;\n    }\n\n    //\n    // IDCA\n    //\n\n    /**\n     * Withdraws all the amount due to an account\n     */\n    function withdraw() external override(IDCA) {\n        Account storage account = accounts[_msgSender()];\n        Queue storage positions = account.positions;\n\n        // this check cannot be done inside _collapse since the (length - 1)\n        // argument could cause underflow\n        if (positions.length > 0) {\n            _collapse(\n                account,\n                positions.first,\n                positions.first + positions.length - 1\n            );\n        }\n\n        uint256 due = account.reserved;\n\n        account.reserved = 0;\n\n        IERC20(this.output()).transfer(_msgSender(), due);\n\n        emit Withdrawn(_msgSender(), due);\n    }\n\n    /**\n     * Computes total amount due to an account, for all the purchases he had shares in\n     *\n     * @notice For each purchase made, a user may have a certain position in\n     * it. The total due amount is the sum of his position in each share. We\n     * can compute this by looping through all relevant purchases, and also\n     * looping through the corresponding positions a the same time\n     *\n     * @dev This is not yet tested, and may need to be limited due to gas-limit\n     * reasons\n     *\n     * @param _account Account to calculate the balance of\n     * @return The amount due to the beneficiary\n     */\n    function balanceOf(address _account)\n        external\n        view\n        override(IDCA)\n        returns (uint256)\n    {\n        Account storage account = accounts[_account];\n        Queue storage positions = account.positions;\n\n        uint256 balance = account.reserved;\n\n        uint256 first = positions.first;\n        uint256 last = first + positions.length - 1;\n\n        // interate through all purchases and positions at the same time,\n        // adding up each amount due to the account\n        for (uint256 x = first; x <= last; ++x) {\n            Position storage position = positions.queue[x];\n\n            for (\n                uint256 y = position.start;\n                y <= position.end && y < purchases.length;\n                ++y\n            ) {\n                Purchase storage purchase = purchases[y];\n\n                balance +=\n                    (purchase.amountBought * position.shares) /\n                    purchase.totalShares;\n            }\n        }\n\n        return balance;\n    }\n\n    //\n    // Public API\n    //\n\n    /**\n     * Collapses multiple closed positions into the account's reserved balance\n     *\n     * @param _account Account to collapse\n     * @param _max Maximum number of positions to close\n     */\n    function collapse(address _account, uint256 _max) external {\n        Account storage account = accounts[_account];\n        Queue storage positions = account.positions;\n\n        // nothing to do in this case, and we actually need to avoid underflow\n        // in (length - 1) below\n        if (positions.length == 0) {\n            return;\n        }\n\n        uint256 first = positions.first;\n        uint256 last = first + positions.length - 1;\n\n        // truncate loop iterations\n        if (last > first + _max - 1) {\n            last = first + _max - 1;\n        }\n\n        _collapse(account, first, last);\n    }\n\n    /**\n     * Gets a position from an account\n     *\n     * @param _beneficiary The account to fetch\n     * @param _idx The index of the position to read\n     * @return The account's latest position\n     */\n    function getPositionAt(address _beneficiary, uint256 _idx)\n        external\n        view\n        returns (Position memory)\n    {\n        Account storage account = accounts[_beneficiary];\n\n        return account.positions.queue[_idx];\n    }\n\n    /**\n     * Gets the last position for an account\n     *\n     * @param _beneficiary The account to fetch\n     * @return The account's latest position\n     */\n    function getLastPosition(address _beneficiary)\n        external\n        view\n        returns (Position memory)\n    {\n        Queue storage positions = accounts[_beneficiary].positions;\n\n        return positions.queue[positions.first + positions.length - 1];\n    }\n\n    //\n    // IIntegration\n    //\n\n    /// @notice See IIntegration\n    function onDepositMinted(\n        uint256 _depositId,\n        uint256 _shares,\n        bytes calldata _data\n    ) external override(IIntegration) returns (bytes4) {\n        require(_msgSender() == vault, \"DCAQueue: sender is not the vault\");\n\n        address beneficiary = bytesToAddress(_data);\n\n        deposits[_depositId] = Deposit({\n            beneficiary: beneficiary,\n            shares: _shares\n        });\n\n        _addShares(beneficiary, _shares);\n\n        emit SharesMinted(beneficiary, _shares);\n\n        return IIntegration(this).onDepositMinted.selector;\n    }\n\n    /// @notice See IIntegration\n    function onDepositBurned(uint256 _depositId)\n        external\n        override(IIntegration)\n        returns (bytes4)\n    {\n        // This can only work if a previous {onDepostiMinted} call has been\n        // made for the same deposit So this check implicitly ensures the\n        // sender is a valid Vault\n        require(\n            address(_msgSender()) == vault,\n            \"DCAQueue: sender is not the vault\"\n        );\n\n        Deposit storage deposit = deposits[_depositId];\n\n        address beneficiary = deposit.beneficiary;\n        uint256 shares = deposit.shares;\n\n        _subShares(beneficiary, shares);\n        delete deposits[_depositId];\n\n        emit SharesBurned(beneficiary, shares);\n\n        return IIntegration(this).onDepositBurned.selector;\n    }\n\n    //\n    // ERC165\n    //\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IIntegration).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    //\n    // Internal logic\n    //\n\n    function _claimFromVault() internal {\n        IVault(vault).claimYield(address(this));\n    }\n\n    /**\n     * Collapses the given positions of an account\n     */\n    function _collapse(\n        Account storage _account,\n        uint256 _first,\n        uint256 _last\n    ) internal {\n        Queue storage positions = _account.positions;\n        uint256 newReserved;\n\n        // skip if no positions exist\n        if (positions.length == 0) {\n            return;\n        }\n\n        uint256 x = _first;\n        for (; x <= _last; ++x) {\n            Position storage position = positions.queue[x];\n\n            for (\n                uint256 y = position.start;\n                y < purchases.length && y <= position.end;\n                ++y\n            ) {\n                Purchase storage purchase = purchases[y];\n\n                newReserved +=\n                    (purchase.amountBought * position.shares) /\n                    purchase.totalShares;\n            }\n\n            if (position.end == MAX_INT) {\n                // if current position still open, we truncate it to the next purchase\n                position.start = purchases.length;\n            } else {\n                // otherwise we delete the position\n                delete positions.queue[x];\n            }\n        }\n\n        // update deque counters\n        positions.first = _last;\n        positions.length = _last - _first;\n\n        // update reserved amount\n        _account.reserved += newReserved;\n    }\n\n    /**\n     * Converts a byte sequence to address\n     *\n     * @dev This function requires the byte sequence to have 20 bytes of length\n     *\n     * @param bs Bytes sequence to decode (must have length 20)\n     * @return addr The decoded address\n     */\n    function bytesToAddress(bytes memory bs)\n        private\n        pure\n        returns (address addr)\n    {\n        require(bs.length == 20, \"invalid data length for address\");\n\n        assembly {\n            addr := mload(add(bs, 20))\n        }\n    }\n\n    function _addShares(address _beneficiary, uint256 _delta) internal {\n        Queue storage positions = accounts[_beneficiary].positions;\n\n        if (positions.length == 0) {\n            positions.queue[0] = Position(purchases.length, MAX_INT, _delta);\n            positions.length++;\n        } else {\n            // at least 1 position already exists\n            uint256 lastIdx = positions.first + positions.length - 1;\n\n            Position storage lastPosition = positions.queue[lastIdx];\n\n            if (lastPosition.start >= purchases.length) {\n                // current position still unused, replace it\n\n                lastPosition.shares += _delta;\n            } else {\n                // position used, close it and append\n                lastPosition.end = purchases.length - 1;\n\n                positions.queue[lastIdx + 1] = Position(\n                    purchases.length,\n                    MAX_INT,\n                    lastPosition.shares + _delta\n                );\n\n                positions.length++;\n            }\n        }\n\n        totalShares += _delta;\n\n        // TODO emit event\n    }\n\n    function _subShares(address _beneficiary, uint256 _delta) internal {\n        Queue storage positions = accounts[_beneficiary].positions;\n\n        // at least 1 position already exists\n        uint256 lastIdx = positions.first + positions.length - 1;\n\n        Position storage lastPosition = positions.queue[lastIdx];\n\n        if (lastPosition.start >= purchases.length) {\n            // current position still unused, replace it\n\n            lastPosition.shares -= _delta;\n        } else {\n            // position used, close it and append\n            lastPosition.end = purchases.length - 1;\n\n            positions.queue[lastIdx + 1] = Position(\n                purchases.length,\n                MAX_INT,\n                lastPosition.shares - _delta\n            );\n\n            positions.length++;\n        }\n\n        totalShares -= _delta;\n\n        // TODO emit event\n    }\n}\n"
    },
    "contracts/integrations/DCA/DCAScheduler.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IDCA} from \"./IDCA.sol\";\n\n/**\n * Utility functions to only allow period execution of specific functions in a contract\n */\nabstract contract DCAScheduler is IDCA {\n    uint256 period;\n    uint256 lastRunAt;\n\n    // TODO event for when period changes\n\n    constructor(uint256 _period) {\n        _setPeriod(_period);\n    }\n\n    /**\n     * Only allows a function to run after enough time has passed since the previous run\n     */\n    modifier onlyAfterPeriod() {\n        require(\n            lastRunAt == 0 || block.timestamp >= lastRunAt + period,\n            \"DCAScheduler: not enough time passed\"\n        );\n        lastRunAt = block.timestamp;\n\n        _;\n    }\n\n    /**\n     * Internal function to change the existing period set\n     */\n    function _setPeriod(uint256 _period) internal {\n        require(_period >= 30 days, \"DCAScheduler: period too small\");\n\n        period = _period;\n    }\n}\n"
    },
    "contracts/integrations/IIntegration.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\n/**\n * @title IIntegration interface\n *\n * Integrations act as claimers for IVault contracts, and process funds on\n * behalf of their final beneficiaries\n */\ninterface IIntegration {\n    /**\n     * Called when a new deposit is created is created for which this contract is the beneficiary\n     *\n     * @notice msg.sender will be the IVault instance\n     *\n     * @param _depositID new deposit ID\n     * @param _shares The amount of shares assigned to this deposit\n     * @param _data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onDepositMinted(uint256,uint256,bytes)\"))` unless throwing\n     */\n    function onDepositMinted(\n        uint256 _depositID,\n        uint256 _shares,\n        bytes memory _data\n    ) external returns (bytes4);\n\n    /**\n     * Called when an existing deposit is withdrawn\n     *\n     * @notice msg.sender will be the IVault instance\n     *\n     * @param _depositID claim ID\n     * @return `bytes4(keccak256(\"onDepositBurned(uint256)\"))` unless throwing\n     */\n    function onDepositBurned(uint256 _depositID) external returns (bytes4);\n}\n"
    },
    "contracts/test/TestDCAUniswapV3.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {DCAUniswapV3} from \"../integrations/DCA/DCAUniswapV3.sol\";\n\ncontract TestDCAUniswapV3 is DCAUniswapV3 {\n    constructor(\n        address _vault,\n        address _output,\n        bytes memory _path,\n        uint256 _period\n    ) DCAUniswapV3(_vault, _output, _path, _period, msg.sender) {}\n\n    function test_claimFromVault() external {\n        _claimFromVault();\n    }\n\n    function test_swap(uint256 _amountOutMin, uint256 _deadline) external {\n        _swap(_amountOutMin, _deadline);\n    }\n}\n"
    },
    "contracts/test/TestDCAQueue.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {DCAQueue} from \"../integrations/DCA/DCAQueue.sol\";\n\ncontract TestDCAQueue is DCAQueue {\n    constructor(address _vault) DCAQueue(_vault) {}\n\n    function input() external pure returns (address) {\n        return address(0);\n    }\n\n    function output() external pure returns (address) {\n        return address(0);\n    }\n\n    function getAccount(address addr)\n        external\n        view\n        returns (\n            uint256 reserved,\n            uint256 positionsFirst,\n            uint256 positionsLength\n        )\n    {\n        Account storage account = accounts[addr];\n\n        return (\n            account.reserved,\n            account.positions.first,\n            account.positions.length\n        );\n    }\n\n    function test_addPurchase(uint256 amountBought) external {\n        purchases.push(Purchase(amountBought, totalShares));\n    }\n\n    function test_claimFromVault() external {\n        _claimFromVault();\n    }\n\n    function executeSwap(uint256 _amountOutMin, uint256 _deadline) external {}\n}\n"
    },
    "contracts/strategy/BaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./IStrategy.sol\";\nimport \"../lib/PercentMath.sol\";\nimport \"../vault/IVault.sol\";\nimport \"./anchor/IEthAnchorRouter.sol\";\n\n/**\n * Base eth anchor strategy that handles UST tokens and invests them via the EthAnchor\n * protocol (https://docs.anchorprotocol.com/ethanchor/ethanchor)\n */\nabstract contract BaseStrategy is IStrategy, AccessControl {\n    using SafeERC20 for IERC20;\n    using PercentMath for uint256;\n\n    event PerfFeeClaimed(uint256 amount);\n    event PerfFeePctUpdated(uint256 pct);\n    event InitDepositStable(\n        address indexed operator,\n        uint256 indexed idx,\n        uint256 underlyingAmount,\n        uint256 ustAmount\n    );\n    event FinishDepositStable(\n        address indexed operator,\n        uint256 ustAmount,\n        uint256 aUstAmount\n    );\n    event InitRedeemStable(address indexed operator, uint256 aUstAmount);\n    event FinishRedeemStable(\n        address indexed operator,\n        uint256 aUstAmount,\n        uint256 ustAmount,\n        uint256 underlyingAmount\n    );\n\n    struct Operation {\n        address operator;\n        uint256 amount;\n    }\n\n    bytes32 public constant MANAGER_ROLE =\n        0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08; // keccak256(\"MANAGER_ROLE\");\n\n    // Underlying token address\n    IERC20 public override(IStrategy) underlying;\n\n    // Vault address\n    address public override(IStrategy) vault;\n\n    // Treasury address\n    address public treasury;\n\n    // UST token address\n    IERC20 public ustToken;\n\n    // aUST token address (wrapped Anchor UST, received to accrue interest for an Anchor deposit)\n    IERC20 public aUstToken;\n\n    // performance fee taken by the treasury on profits\n    uint16 public perfFeePct;\n\n    // Router contract to interact with EthAnchor\n    IEthAnchorRouter public ethAnchorRouter;\n\n    // Chainlink aUST / UST price feed\n    AggregatorV3Interface public aUstToUstFeed;\n\n    // amount currently pending in deposits to EthAnchor\n    uint256 public pendingDeposits;\n\n    // amount currently pending redeemption from EthAnchor\n    uint256 public pendingRedeems;\n\n    // deposit operations history\n    Operation[] public depositOperations;\n\n    // redeem operations history\n    Operation[] public redeemOperations;\n\n    // amount of UST converted (used to calculate yield)\n    uint256 public convertedUst;\n\n    // Decimals of aUST / UST feed\n    uint256 internal _aUstToUstFeedDecimals;\n\n    modifier onlyManager() {\n        require(\n            hasRole(MANAGER_ROLE, msg.sender),\n            \"BaseStrategy: caller is not manager\"\n        );\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"BaseStrategy: caller is not admin\"\n        );\n        _;\n    }\n\n    /**\n     * Constructor of Base Strategy - Initialize required addresses and params\n     *\n     * @notice Vault will be automatically set to Manager Role to handle underlyings\n     *\n     * @param _vault Vault address\n     * @param _treasury Treasury address\n     * @param _ethAnchorRouter EthAnchorRouter address\n     * @param _aUstToUstFeed aUST / UST chainlink feed address\n     * @param _ustToken UST token address\n     * @param _aUstToken aUST token address\n     * @param _perfFeePct Performance fee percentage\n     * @param _owner Owner address\n     */\n    constructor(\n        address _vault,\n        address _treasury,\n        address _ethAnchorRouter,\n        AggregatorV3Interface _aUstToUstFeed,\n        IERC20 _ustToken,\n        IERC20 _aUstToken,\n        uint16 _perfFeePct,\n        address _owner\n    ) {\n        require(_owner != address(0), \"BaseStrategy: owner is 0x\");\n        require(_ethAnchorRouter != address(0), \"BaseStrategy: router is 0x\");\n        require(_treasury != address(0), \"BaseStrategy: treasury is 0x\");\n        require(\n            PercentMath.validPerc(_perfFeePct),\n            \"BaseStrategy: invalid performance fee\"\n        );\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n        _setupRole(MANAGER_ROLE, _vault);\n\n        treasury = _treasury;\n        vault = _vault;\n        underlying = IVault(_vault).underlying();\n        ethAnchorRouter = IEthAnchorRouter(_ethAnchorRouter);\n        aUstToUstFeed = _aUstToUstFeed;\n        ustToken = _ustToken;\n        aUstToken = _aUstToken;\n        perfFeePct = _perfFeePct;\n\n        _aUstToUstFeedDecimals = 10**_aUstToUstFeed.decimals();\n    }\n\n    /**\n     * Invest underlying assets to EthAnchor contract.\n     */\n    function doHardWork() external virtual;\n\n    /**\n     * Initiates available UST to EthAnchor\n     *\n     * @notice since EthAnchor uses an asynchronous model, this function\n     * only starts the deposit process, but does not finish it.\n     * Each EthAnchor deposits are handled by different operator, so we store\n     * operator address to finish later.\n     * We need to increase pendingDeposits to track correct underlying assets.\n     */\n    function _initDepositStable() internal returns (address, uint256) {\n        uint256 ustBalance = _getUstBalance();\n        require(ustBalance > 0, \"BaseStrategy: no ust exist\");\n        pendingDeposits += ustBalance;\n\n        ustToken.safeIncreaseAllowance(address(ethAnchorRouter), ustBalance);\n        address operator = ethAnchorRouter.initDepositStable(ustBalance);\n        depositOperations.push(\n            Operation({operator: operator, amount: ustBalance})\n        );\n\n        return (operator, ustBalance);\n    }\n\n    /**\n     * Calls EthAnchor with a pending deposit ID, and attempts to finish it.\n     *\n     * @notice Must be called some time after `_initDepositStable()`. Will only work if\n     * the EthAnchor bridge has finished processing the deposit.\n     *\n     * @param idx Id of the pending deposit operation\n     */\n    function finishDepositStable(uint256 idx) external onlyManager {\n        require(depositOperations.length > idx, \"BaseStrategy: not running\");\n        Operation storage operation = depositOperations[idx];\n        address operator = operation.operator;\n\n        uint256 aUstBalanceBefore = _getAUstBalance();\n\n        ethAnchorRouter.finishDepositStable(operator);\n        uint256 newAUst = _getAUstBalance() - aUstBalanceBefore;\n        require(newAUst > 0, \"BaseStrategy: no aUST returned\");\n\n        uint256 ustAmount = operation.amount;\n        pendingDeposits -= ustAmount;\n        convertedUst += ustAmount;\n\n        emit FinishDepositStable(operator, ustAmount, newAUst);\n\n        if (idx < depositOperations.length - 1) {\n            Operation memory lastOperation = depositOperations[\n                depositOperations.length - 1\n            ];\n            operation.operator = lastOperation.operator;\n            operation.amount = lastOperation.amount;\n        }\n\n        depositOperations.pop();\n    }\n\n    /**\n     * Initiates a withdrawal of UST from EthAnchor\n     *\n     * @notice since EthAnchor uses an asynchronous model, this function\n     * only starts the redeem process, but does not finish it.\n     *\n     * @param amount Amount of aUST to redeem\n     */\n    function initRedeemStable(uint256 amount) public onlyManager {\n        uint256 aUstBalance = _getAUstBalance();\n        require(amount > 0, \"BaseStrategy: amount 0\");\n        pendingRedeems += amount;\n\n        aUstToken.safeIncreaseAllowance(address(ethAnchorRouter), amount);\n        address operator = ethAnchorRouter.initRedeemStable(amount);\n\n        redeemOperations.push(Operation({operator: operator, amount: amount}));\n\n        emit InitRedeemStable(operator, amount);\n    }\n\n    /**\n     * Request withdrawal from EthAnchor\n     *\n     * @notice since EthAnchor uses an asynchronous model, we can only request withdrawal for whole aUST\n     */\n    function withdrawAllToVault() external override(IStrategy) onlyManager {\n        uint256 aUstBalance = _getAUstBalance();\n        if (aUstBalance != 0) {\n            initRedeemStable(aUstBalance);\n        }\n    }\n\n    /**\n     * Withdraws a specified amount back to the vault\n     *\n     * @notice since EthAnchor uses an asynchronous model, and there is no underlying amount\n     * in the strategy, this function do nothing at all, However override interface of IStrategy.\n     */\n    function withdrawToVault(uint256 amount)\n        external\n        override(IStrategy)\n        onlyManager\n    {}\n\n    /**\n     * Updates the performance fee\n     *\n     * @notice Can only be called by governance\n     *\n     * @param _perfFeePct The new performance fee %\n     */\n    function setPerfFeePct(uint16 _perfFeePct) external onlyAdmin {\n        require(\n            PercentMath.validPerc(_perfFeePct),\n            \"BaseStrategy: invalid performance fee\"\n        );\n        perfFeePct = _perfFeePct;\n        emit PerfFeePctUpdated(_perfFeePct);\n    }\n\n    /// See {IStrategy}\n    function applyInvestmentFee(uint256 _amount)\n        external\n        view\n        virtual\n        override(IStrategy)\n        returns (uint256)\n    {\n        return _amount.percOf(9800);\n    }\n\n    /**\n     * Amount, expressed in the underlying currency, currently in the strategy\n     *\n     * @notice both held and invested amounts are included here, using the\n     * latest known exchange rates to the underlying currency.\n     * This will return value without performance fee.\n     *\n     * @return The total amount of underlying\n     */\n    function investedAssets()\n        external\n        view\n        virtual\n        override(IStrategy)\n        returns (uint256);\n\n    /**\n     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.\n     *\n     * @notice Must be called some time after `initRedeemStable()`. Will only work if\n     * the EthAnchor bridge has finished processing the deposit.\n     * Will take performance fee if some yield generated.\n     *\n     * @param idx Id of the pending redeem operation\n     *\n     * @return Redeemed UST amount without performance fee.\n     */\n    function _finishRedeemStable(uint256 idx)\n        internal\n        returns (\n            address,\n            uint256,\n            uint256\n        )\n    {\n        require(redeemOperations.length > idx, \"BaseStrategy: not running\");\n        Operation storage operation = redeemOperations[idx];\n        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\n\n        uint256 operationAmount = operation.amount;\n        address operator = operation.operator;\n        uint256 originalUst = (convertedUst * operationAmount) / aUstBalance;\n\n        ethAnchorRouter.finishRedeemStable(operator);\n\n        uint256 redeemedAmount = _getUstBalance();\n        require(redeemedAmount > 0, \"BaseStrategy: nothing redeemed\");\n\n        uint256 perfFee = redeemedAmount > originalUst\n            ? (redeemedAmount - originalUst).percOf(perfFeePct)\n            : 0;\n        if (perfFee != 0) {\n            ustToken.safeTransfer(treasury, perfFee);\n            emit PerfFeeClaimed(perfFee);\n        }\n        convertedUst -= originalUst;\n        pendingRedeems -= operationAmount;\n\n        if (idx < redeemOperations.length - 1) {\n            Operation memory lastOperation = redeemOperations[\n                redeemOperations.length - 1\n            ];\n            operation.operator = lastOperation.operator;\n            operation.amount = lastOperation.amount;\n        }\n        redeemOperations.pop();\n\n        return (operator, operationAmount, redeemedAmount - perfFee);\n    }\n\n    /**\n     * @return underlying balance of strategy\n     */\n    function _getUnderlyingBalance() internal view returns (uint256) {\n        return underlying.balanceOf(address(this));\n    }\n\n    /**\n     * @return UST balance of strategy\n     */\n    function _getUstBalance() internal view returns (uint256) {\n        return ustToken.balanceOf(address(this));\n    }\n\n    /**\n     * @return aUST balance of strategy\n     */\n    function _getAUstBalance() internal view returns (uint256) {\n        return aUstToken.balanceOf(address(this));\n    }\n\n    /**\n     * @return Length of pending deposit operations\n     */\n    function depositOperationLength() external view returns (uint256) {\n        return depositOperations.length;\n    }\n\n    /**\n     * @return Length of pending redeem operations\n     */\n    function redeemOperationLength() external view returns (uint256) {\n        return redeemOperations.length;\n    }\n\n    /**\n     * Calculate performance fee for known aUST balance and aUST / UST exchange rate.\n     *\n     * @return Length of pending redeem operations\n     */\n    function _performanceUstFeeWithInfo(uint256 aUstBalance, uint256 price)\n        private\n        view\n        returns (uint256)\n    {\n        // aUST and UST decimals are same, so we only care about aUST / UST feed decimals\n        uint256 estimatedUstAmount = (price * aUstBalance) /\n            _aUstToUstFeedDecimals;\n        if (estimatedUstAmount > convertedUst) {\n            return (estimatedUstAmount - convertedUst).percOf(perfFeePct);\n        }\n        return 0;\n    }\n\n    /**\n     * Calculate current performance fee amount\n     *\n     * @notice Performance fee is in UST\n     *\n     * @return current performance fee\n     */\n    function currentPerformanceFee() external view returns (uint256) {\n        if (convertedUst == 0) {\n            return 0;\n        }\n\n        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\n\n        return _performanceUstFeeWithInfo(aUstBalance, _aUstExchangeRate());\n    }\n\n    /**\n     * @return UST value of current aUST balance (+ pending redeems) without performance fee\n     */\n    function _estimateAUstBalanceInUstMinusFee()\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\n\n        if (aUstBalance == 0) {\n            return 0;\n        }\n\n        uint256 aUstPrice = _aUstExchangeRate();\n\n        return\n            ((aUstPrice * aUstBalance) / _aUstToUstFeedDecimals) -\n            _performanceUstFeeWithInfo(aUstBalance, aUstPrice);\n    }\n\n    /**\n     * @return aUST / UST exchange rate from chainlink\n     */\n    function _aUstExchangeRate() internal view virtual returns (uint256) {\n        (\n            uint80 roundID,\n            int256 price,\n            ,\n            uint256 updateTime,\n            uint80 answeredInRound\n        ) = aUstToUstFeed.latestRoundData();\n\n        require(\n            price > 0 && updateTime != 0 && answeredInRound >= roundID,\n            \"invalid price\"\n        );\n\n        return uint256(price);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/strategy/anchor/IEthAnchorRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface IEthAnchorRouter {\n    function initDepositStable(uint256 _amount) external returns (address);\n\n    function finishDepositStable(address _operation) external;\n\n    function initRedeemStable(uint256 _amount) external returns (address);\n\n    function finishRedeemStable(address _operation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/strategy/USTStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./BaseStrategy.sol\";\nimport \"../lib/PercentMath.sol\";\n\n/**\n * A Eth Anchor strategy that uses UST as the underlying currency\n */\ncontract USTStrategy is BaseStrategy {\n    using SafeERC20 for IERC20;\n    using PercentMath for uint256;\n\n    /**\n     * Constructor of UST Strategy\n     *\n     * @notice The underlying token must be UST token.\n     */\n    constructor(\n        address _vault,\n        address _treasury,\n        address _ethAnchorRouter,\n        AggregatorV3Interface _aUstFeed,\n        IERC20 _ustToken,\n        IERC20 _aUstToken,\n        uint16 _perfFeePct,\n        address _owner\n    )\n        BaseStrategy(\n            _vault,\n            _treasury,\n            _ethAnchorRouter,\n            _aUstFeed,\n            _ustToken,\n            _aUstToken,\n            _perfFeePct,\n            _owner\n        )\n    {\n        require(underlying == _ustToken, \"USTStrategy: invalid underlying\");\n    }\n\n    /**\n     * Initiates a deposit of all the currently held UST into EthAnchor\n     *\n     * @notice since EthAnchor uses an asynchronous model, this function\n     * only starts the deposit process, but does not finish it.\n     */\n    function doHardWork() external override onlyManager {\n        (address operator, uint256 ustAmount) = _initDepositStable();\n\n        emit InitDepositStable(\n            operator,\n            depositOperations.length - 1,\n            ustAmount,\n            ustAmount\n        );\n    }\n\n    /**\n     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.\n     *\n     * @notice Must be called some time after `initRedeemStable()`. Will only work if\n     * the EthAnchor bridge has finished processing the deposit.\n     *\n     * @param idx Id of the pending redeem operation\n     */\n    function finishRedeemStable(uint256 idx) external onlyManager {\n        (\n            address operator,\n            uint256 aUstAmount,\n            uint256 ustAmount\n        ) = _finishRedeemStable(idx);\n        emit FinishRedeemStable(operator, aUstAmount, ustAmount, ustAmount);\n\n        underlying.safeTransfer(vault, _getUnderlyingBalance());\n    }\n\n    /**\n     * Amount, expressed in the underlying currency, currently in the strategy\n     *\n     * @notice both held and invested amounts are included here, using the\n     * latest known exchange rates to the underlying currency.\n     * This will return value without performance fee.\n     *\n     * @return The total amount of underlying\n     */\n    function investedAssets() external view override returns (uint256) {\n        return pendingDeposits + _estimateAUstBalanceInUstMinusFee();\n    }\n}\n"
    },
    "contracts/test/strategy/TestUSTAnchorStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"../../strategy/USTStrategy.sol\";\nimport \"../../strategy/anchor/IExchangeRateFeeder.sol\";\n\n/**\n * USTAnchorStrategy for testnet.\n * Since aUST/UST chainlink does not exist on testnet, we use EthAnchorExchangeRateFeeder\n * to get aUST/UST exchange rate.\n */\ncontract TestUSTAnchorStrategy is USTStrategy {\n    IExchangeRateFeeder public exchangeRateFeeder;\n\n    /**\n     * @notice _aUstToUstFeed is a fake chainlink feed, it is used to just\n     * inhert constructor of USTStrategy\n     */\n    constructor(\n        address _vault,\n        address _treasury,\n        address _ethAnchorRouter,\n        AggregatorV3Interface _aUstToUstFeed,\n        IExchangeRateFeeder _exchangeRateFeeder,\n        IERC20 _ustToken,\n        IERC20 _aUstToken,\n        uint16 _perfFeePct,\n        address _owner\n    )\n        USTStrategy(\n            _vault,\n            _treasury,\n            _ethAnchorRouter,\n            _aUstToUstFeed,\n            _ustToken,\n            _aUstToken,\n            _perfFeePct,\n            _owner\n        )\n    {\n        exchangeRateFeeder = _exchangeRateFeeder;\n        _aUstToUstFeedDecimals = 1e18;\n    }\n\n    // get aUST/UST exchange rate from eth anchor ExchangeRateFeeder contract\n    function _aUstExchangeRate() internal view override returns (uint256) {\n        return exchangeRateFeeder.exchangeRateOf(address(ustToken), true);\n    }\n}\n"
    },
    "contracts/strategy/anchor/IExchangeRateFeeder.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface IExchangeRateFeeder {\n    function exchangeRateOf(address _token, bool _simulate)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "contracts/test/strategy/TestNonUSTAnchorStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../strategy/NonUSTStrategy.sol\";\nimport \"../../strategy/anchor/IExchangeRateFeeder.sol\";\nimport \"./IUniswapV2Router01.sol\";\n\n/**\n * NonUSTAnchorStrategy for testnet.\n * Since aUST/UST chainlink does not exist on testnet, we use EthAnchorExchangeRateFeeder\n * to get aUST/UST exchange rate.\n * And we use uniswap V2 to swap underlying to UST and vice versa.\n */\nabstract contract TestNonUSTAnchorStrategy is NonUSTStrategy {\n    using SafeERC20 for IERC20;\n\n    IExchangeRateFeeder public exchangeRateFeeder;\n    IUniswapV2Router01 public uniV2Router;\n\n    constructor(\n        address _vault,\n        address _treasury,\n        address _ethAnchorRouter,\n        IExchangeRateFeeder _exchangeRateFeeder,\n        IERC20 _ustToken,\n        IERC20 _aUstToken,\n        uint16 _perfFeePct,\n        address _owner,\n        address _uniV2Router\n    ) {\n        require(_owner != address(0), \"BaseStrategy: owner is 0x\");\n        require(_ethAnchorRouter != address(0), \"BaseStrategy: router is 0x\");\n        require(_treasury != address(0), \"BaseStrategy: treasury is 0x\");\n        require(\n            PercentMath.validPerc(_perfFeePct),\n            \"BaseStrategy: invalid performance fee\"\n        );\n        require(underlying == _ustToken, \"USTStrategy: invalid underlying\");\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n        _setupRole(MANAGER_ROLE, _vault);\n\n        treasury = _treasury;\n        vault = _vault;\n        underlying = IVault(_vault).underlying();\n        ethAnchorRouter = IEthAnchorRouter(_ethAnchorRouter);\n        exchangeRateFeeder = _exchangeRateFeeder;\n        ustToken = _ustToken;\n        aUstToken = _aUstToken;\n        perfFeePct = _perfFeePct;\n\n        _aUstToUstFeedDecimals = 1e18;\n\n        require(underlying != _ustToken, \"NonUSTStrategy: invalid underlying\");\n        uniV2Router = IUniswapV2Router01(_uniV2Router);\n\n        ustToken.safeIncreaseAllowance(_uniV2Router, type(uint256).max);\n        underlying.safeIncreaseAllowance(_uniV2Router, type(uint256).max);\n\n        // No need to initialize chainlink feed, because they don't exist on testnet\n        initialized = true;\n    }\n\n    /**\n     * Swap Underlying to UST through uniswap V2\n     *\n     * @return swapped underlying amount\n     */\n    function _swapUnderlyingToUst() internal override returns (uint256) {\n        uint256 underlyingBalance = _getUnderlyingBalance();\n        require(underlyingBalance > 0, \"NonUSTStrategy: no underlying exist\");\n\n        address[] memory path = new address[](2);\n        path[0] = address(underlying);\n        path[1] = address(ustToken);\n        uniV2Router.swapExactTokensForTokens(\n            underlyingBalance,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        return underlyingBalance;\n    }\n\n    /**\n     * Swap UST to Underlying through uniswap V2\n     *\n     * @return swapped underlying amount\n     */\n    function _swapUstToUnderlying() internal override returns (uint256) {\n        uint256 ustBalance = _getUstBalance();\n        if (ustBalance > 0) {\n            address[] memory path = new address[](2);\n            path[0] = address(ustToken);\n            path[1] = address(underlying);\n            uniV2Router.swapExactTokensForTokens(\n                ustBalance,\n                0,\n                path,\n                address(this),\n                block.timestamp\n            );\n            return _getUnderlyingBalance();\n        }\n\n        return 0;\n    }\n\n    // get aUST/UST exchange rate from eth anchor ExchangeRateFeeder contract\n    function _aUstExchangeRate() internal view override returns (uint256) {\n        return exchangeRateFeeder.exchangeRateOf(address(ustToken), true);\n    }\n}\n"
    },
    "contracts/strategy/NonUSTStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./curve/ICurve.sol\";\nimport \"./BaseStrategy.sol\";\nimport \"./IERC20Detailed.sol\";\n\n/**\n * EthAnchor Strategy that handles non-UST tokens, by first converting them to UST via\n * Curve (https://curve.fi/), and only then depositing into EthAnchor\n */\ncontract NonUSTStrategy is BaseStrategy {\n    using SafeERC20 for IERC20;\n\n    event Initialized();\n\n    // UST / USDC / USDT / DAI curve pool address\n    ICurve public curvePool;\n\n    // index of the underlying token in the curve pool\n    int128 public underlyingI;\n\n    // index of the UST token in the curve pool\n    int128 public ustI;\n\n    // flag to indicate initialization status\n    bool public initialized;\n\n    // Chainlink UST / USD feed\n    AggregatorV3Interface public ustFeed;\n\n    // Chainlink underlying / USD feed - ex. USDT / USD\n    AggregatorV3Interface public underlyingFeed;\n\n    // Underlying decimals multiplier to calculate UST -> Underlying amount\n    uint256 internal _underlyingDecimalsMultiplier;\n\n    // UST decimals multiplier to calculate UST -> Underlying amount\n    uint256 internal _ustDecimalsMultiplier;\n\n    /**\n     * Constructor of Non-UST Strategy\n     *\n     * @notice The underlying token must be different from UST token.\n     */\n    constructor(\n        address _vault,\n        address _treasury,\n        address _ethAnchorRouter,\n        AggregatorV3Interface _aUstFeed,\n        IERC20 _ustToken,\n        IERC20 _aUstToken,\n        uint16 _perfFeePct,\n        address _owner,\n        address _curvePool,\n        int128 _underlyingI,\n        int128 _ustI\n    )\n        BaseStrategy(\n            _vault,\n            _treasury,\n            _ethAnchorRouter,\n            _aUstFeed,\n            _ustToken,\n            _aUstToken,\n            _perfFeePct,\n            _owner\n        )\n    {\n        require(underlying != _ustToken, \"NonUSTStrategy: invalid underlying\");\n        require(_curvePool != address(0), \"NonUSTStrategy: curve pool is 0x\");\n        curvePool = ICurve(_curvePool);\n        underlyingI = _underlyingI;\n        ustI = _ustI;\n\n        ustToken.safeIncreaseAllowance(_curvePool, type(uint256).max);\n        underlying.safeIncreaseAllowance(_curvePool, type(uint256).max);\n    }\n\n    /**\n     * Initialize UST / USD, and Underlying / USD chainlink feed\n     *\n     * @notice Since constructor has too many variables, we initialize these feed\n     * in different function\n     */\n    function initializeStrategy(\n        AggregatorV3Interface _ustFeed,\n        AggregatorV3Interface _underlyingFeed\n    ) external onlyAdmin {\n        require(!initialized, \"NonUSTStrategy: already initialized\");\n\n        initialized = true;\n\n        ustFeed = _ustFeed;\n        underlyingFeed = _underlyingFeed;\n\n        uint8 _underlyingDecimals = _underlyingFeed.decimals() +\n            IERC20Detailed(address(underlying)).decimals();\n        uint8 _ustDecimals = _ustFeed.decimals() +\n            IERC20Detailed(address(ustToken)).decimals();\n\n        // Set underlying decimals multiplier and UST decimals multiplier based on\n        // feeds and token decimals\n        if (_underlyingDecimals > _ustDecimals) {\n            _underlyingDecimalsMultiplier =\n                10**(_underlyingDecimals - _ustDecimals);\n            _ustDecimalsMultiplier = 1;\n        } else if (_underlyingDecimals < _ustDecimals) {\n            _underlyingDecimalsMultiplier = 1;\n            _ustDecimalsMultiplier = 10**(_ustDecimals - _underlyingDecimals);\n        } else {\n            _underlyingDecimalsMultiplier = 1;\n            _ustDecimalsMultiplier = 1;\n        }\n\n        emit Initialized();\n    }\n\n    /**\n     * Swaps the underlying currency for UST, and initiates a deposit of all\n     * the converted UST into EthAnchor\n     *\n     * @notice since EthAnchor uses an asynchronous model, this function\n     * only starts the deposit process, but does not finish it.\n     */\n    function doHardWork() external override(BaseStrategy) onlyManager {\n        require(initialized, \"NonUSTStrategy: not initialized\");\n        uint256 underlyingAmount = _swapUnderlyingToUst();\n\n        (address operator, uint256 ustAmount) = _initDepositStable();\n\n        emit InitDepositStable(\n            operator,\n            depositOperations.length - 1,\n            underlyingAmount,\n            ustAmount\n        );\n    }\n\n    /**\n     * Calls Curve to convert the existing underlying balance into UST\n     *\n     * @return swapped underlying amount\n     */\n    function _swapUnderlyingToUst() internal virtual returns (uint256) {\n        uint256 underlyingBalance = _getUnderlyingBalance();\n        require(underlyingBalance > 0, \"NonUSTStrategy: no underlying exist\");\n        // slither-disable-next-line unused-return\n        curvePool.exchange_underlying(underlyingI, ustI, underlyingBalance, 0);\n\n        return underlyingBalance;\n    }\n\n    /**\n     * Calls Curve to convert the existing UST back into the underlying token\n     *\n     * @return swapped underlying amount\n     */\n    function _swapUstToUnderlying() internal virtual returns (uint256) {\n        uint256 ustBalance = _getUstBalance();\n        if (ustBalance > 0) {\n            // slither-disable-next-line unused-return\n            return\n                curvePool.exchange_underlying(ustI, underlyingI, ustBalance, 0);\n        }\n\n        return 0;\n    }\n\n    /**\n     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.\n     * Once UST is retrieved, convert it back to underlying via Curve\n     * Then transfer underlying to vault.\n     *\n     * @notice Must be called some time after `initRedeemStable()`. Will only work if\n     * the EthAnchor bridge has finished processing the deposit.\n     *\n     * @param idx Id of the pending redeem operation\n     */\n    function finishRedeemStable(uint256 idx) public onlyManager {\n        (\n            address operator,\n            uint256 aUstAmount,\n            uint256 ustAmount\n        ) = _finishRedeemStable(idx);\n\n        _swapUstToUnderlying();\n        uint256 underlyingAmount = _getUnderlyingBalance();\n        underlying.safeTransfer(vault, underlyingAmount);\n\n        emit FinishRedeemStable(\n            operator,\n            aUstAmount,\n            ustAmount,\n            underlyingAmount\n        );\n    }\n\n    /**\n     * Amount, expressed in the underlying currency, currently in the strategy\n     *\n     * @notice both held and invested amounts are included here, using the\n     * latest known exchange rates to the underlying currency\n     * This will return value without performance fee.\n     *\n     * @return The total amount of underlying\n     */\n    function investedAssets()\n        external\n        view\n        override(BaseStrategy)\n        returns (uint256)\n    {\n        return\n            _estimateUstAmountInUnderlying(\n                pendingDeposits + _estimateAUstBalanceInUstMinusFee()\n            );\n    }\n\n    /**\n     * @return Underlying value of UST amount\n     */\n    function _estimateUstAmountInUnderlying(uint256 ustAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        (\n            uint80 ustRoundID,\n            int256 ustPrice,\n            ,\n            uint256 ustUpdateTime,\n            uint80 ustAnsweredInRound\n        ) = ustFeed.latestRoundData();\n        (\n            uint80 underlyingRoundID,\n            int256 underlyingPrice,\n            ,\n            uint256 underlyingUpdateTime,\n            uint80 underlyingAnsweredInRound\n        ) = underlyingFeed.latestRoundData();\n        require(\n            ustPrice > 0 &&\n                underlyingPrice > 0 &&\n                ustUpdateTime != 0 &&\n                underlyingUpdateTime != 0 &&\n                ustAnsweredInRound >= ustRoundID &&\n                underlyingAnsweredInRound >= underlyingRoundID,\n            \"NonUSTStrategy: invalid price\"\n        );\n        return\n            (ustAmount * uint256(ustPrice) * _underlyingDecimalsMultiplier) /\n            (uint256(underlyingPrice) * _ustDecimalsMultiplier);\n    }\n}\n"
    },
    "contracts/test/strategy/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/strategy/curve/ICurve.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface ICurve {\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external returns (uint256);\n}\n"
    },
    "contracts/strategy/IERC20Detailed.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * ERC20 token interface with decimals\n */\ninterface IERC20Detailed is IERC20 {\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/mock/MockVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {Vault} from \"../Vault.sol\";\n\ncontract MockVault is Vault {\n    constructor(\n        IERC20 _underlying,\n        uint256 _minLockPeriod,\n        uint256 _investPerc\n    ) Vault(_underlying, _minLockPeriod, _investPerc, msg.sender) {}\n}\n"
    },
    "contracts/mock/MockStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {IStrategy} from \"../strategy/IStrategy.sol\";\nimport {BaseStrategy} from \"../strategy/BaseStrategy.sol\";\n\ncontract MockStrategy is BaseStrategy {\n    constructor(\n        address _vault,\n        address _treasury,\n        address _ethAnchorRouter,\n        AggregatorV3Interface _aUstFeed,\n        IERC20 _ustToken,\n        IERC20 _aUstToken,\n        uint16 _perfFeePct\n    )\n        BaseStrategy(\n            _vault,\n            _treasury,\n            _ethAnchorRouter,\n            _aUstFeed,\n            _ustToken,\n            _aUstToken,\n            _perfFeePct,\n            msg.sender\n        )\n    {}\n\n    function doHardWork() external override(BaseStrategy) onlyManager {}\n\n    function finishRedeemStable(uint256 idx) external {\n        _finishRedeemStable(idx);\n    }\n\n    function investedAssets() external view override returns (uint256) {\n        uint256 underlyingBalance = _getUnderlyingBalance() + pendingDeposits;\n        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\n\n        return underlyingBalance + _estimateAUstBalanceInUstMinusFee();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/mock/MockChainlinkPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockChainlinkPriceFeed is AggregatorV3Interface {\n    uint8 public override decimals;\n\n    uint80 roundId_;\n    int256 answer_;\n    uint256 startedAt_;\n    uint256 updatedAt_;\n    uint80 answeredInRound_;\n\n    constructor(uint8 _decimals) {\n        decimals = _decimals;\n    }\n\n    function description() external view override returns (string memory) {\n        return \"\";\n    }\n\n    function version() external view override returns (uint256) {\n        return 1;\n    }\n\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        // return all zero because this function not used\n        return (0, 0, 0, 0, 0);\n    }\n\n    function setAnswer(int256 answer) external {\n        roundId_ = 10;\n        answer_ = answer;\n        startedAt_ = block.timestamp;\n        updatedAt_ = block.timestamp;\n        answeredInRound_ = 10;\n    }\n\n    function setLatestRoundData(\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    ) external {\n        roundId_ = roundId;\n        answer_ = answer;\n        startedAt_ = startedAt;\n        updatedAt_ = updatedAt;\n        answeredInRound_ = answeredInRound;\n    }\n\n    function latestRoundData()\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        return (roundId_, answer_, startedAt_, updatedAt_, answeredInRound_);\n    }\n}\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20(\"MockERC20\", \"ME2\") {\n    constructor(uint256 _totalSupply) {\n        _mint(msg.sender, _totalSupply);\n    }\n\n    function mint(address _user, uint256 _amount) public {\n        _mint(_user, _amount);\n    }\n\n    function burn(address _user, uint256 _amount) public {\n        _burn(_user, _amount);\n    }\n}\n"
    },
    "contracts/SandclockFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport {Trust} from \"@rari-capital/solmate/src/auth/Trust.sol\";\n\ncontract SandclockFactory is Context, Trust {\n    //\n    // Events\n    //\n\n    event NewVault(address indexed vault, uint256 salt);\n\n    //\n    // Constructor\n    //\n\n    constructor() Trust(_msgSender()) {}\n\n    //\n    // Public API\n    //\n\n    function deployVault(bytes memory code, uint256 salt)\n        external\n        requiresTrust\n    {\n        address addr = deploy(code, salt);\n\n        emit NewVault(addr, salt);\n    }\n\n    //\n    // Internal\n    //\n\n    function deploy(bytes memory code, uint256 salt)\n        internal\n        returns (address)\n    {\n        address addr;\n        assembly {\n            addr := create2(0, add(code, 0x20), mload(code), salt)\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n\n        return addr;\n    }\n}\n"
    },
    "contracts/mock/MockEthAnchorRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../strategy/anchor/IEthAnchorRouter.sol\";\n\ncontract MockEthAnchorRouter is IEthAnchorRouter {\n    using SafeERC20 for IERC20;\n\n    IERC20 public ustToken;\n    IERC20 public aUstToken;\n\n    address public pendingOperator;\n    mapping(address => uint256) public depositOperations;\n    mapping(address => uint256) public redeemOperations;\n    mapping(address => uint256) public depositFinishResults;\n    mapping(address => uint256) public redeemFinishResults;\n\n    constructor(IERC20 _ustToken, IERC20 _aUstToken) {\n        require(address(_ustToken) != address(0), \"invalid UST token\");\n        require(address(_aUstToken) != address(0), \"invalid aUST token\");\n\n        ustToken = _ustToken;\n        aUstToken = _aUstToken;\n    }\n\n    function addPendingOperator(address _operator) external {\n        require(_operator != address(0), \"invalid operator\");\n\n        pendingOperator = _operator;\n    }\n\n    function initDepositStable(uint256 _amount)\n        external\n        override(IEthAnchorRouter)\n        returns (address operator)\n    {\n        require(pendingOperator != address(0));\n        ustToken.safeTransferFrom(msg.sender, address(this), _amount);\n        depositOperations[pendingOperator] = _amount;\n        operator = pendingOperator;\n        pendingOperator = address(0);\n    }\n\n    function notifyDepositResult(address _operation, uint256 _amount) external {\n        require(depositOperations[_operation] > 0);\n        aUstToken.safeTransferFrom(msg.sender, address(this), _amount);\n        depositOperations[_operation] = 0;\n        depositFinishResults[_operation] = _amount;\n    }\n\n    function finishDepositStable(address _operation)\n        external\n        override(IEthAnchorRouter)\n    {\n        aUstToken.safeTransfer(msg.sender, depositFinishResults[_operation]);\n        depositFinishResults[_operation] = 0;\n    }\n\n    function initRedeemStable(uint256 _amount)\n        external\n        override(IEthAnchorRouter)\n        returns (address operator)\n    {\n        require(pendingOperator != address(0));\n        aUstToken.safeTransferFrom(msg.sender, address(this), _amount);\n        redeemOperations[pendingOperator] = _amount;\n        operator = pendingOperator;\n        pendingOperator = address(0);\n    }\n\n    function notifyRedeemResult(address _operation, uint256 _amount) external {\n        require(redeemOperations[_operation] > 0);\n        ustToken.safeTransferFrom(msg.sender, address(this), _amount);\n        redeemOperations[_operation] = 0;\n        redeemFinishResults[_operation] = _amount;\n    }\n\n    function finishRedeemStable(address _operation) external override {\n        ustToken.safeTransfer(msg.sender, redeemFinishResults[_operation]);\n        redeemFinishResults[_operation] = 0;\n    }\n}\n"
    },
    "contracts/mock/MockCurvePool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../strategy/curve/ICurve.sol\";\n\ncontract MockCurvePool is ICurve {\n    using SafeERC20 for IERC20;\n\n    mapping(int128 => IERC20) public tokens;\n    mapping(int128 => mapping(int128 => uint256)) public rate;\n\n    function addToken(int128 i, IERC20 token) external {\n        tokens[i] = token;\n    }\n\n    function updateRate(\n        int128 i,\n        int128 j,\n        uint256 _rate\n    ) external {\n        rate[i][j] = _rate;\n    }\n\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external override returns (uint256) {\n        tokens[i].safeTransferFrom(msg.sender, address(this), dx);\n        uint256 amount = (dx * 1e18) / rate[i][j];\n        tokens[j].safeTransfer(msg.sender, amount);\n        require(amount >= min_dy);\n        return amount;\n    }\n}\n"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20(\"MockERC20\", \"ME2\") {\n    uint8 private decimals_;\n\n    constructor(uint256 _totalSupply) {\n        decimals_ = 18;\n        _mint(msg.sender, _totalSupply);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return decimals_;\n    }\n\n    function updateDecimals(uint8 _decimals) external {\n        decimals_ = _decimals;\n    }\n\n    function mint(address _user, uint256 _amount) public {\n        _mint(_user, _amount);\n    }\n}\n"
    },
    "contracts/mock/MockExchangeRateFeeder.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"../strategy/anchor/IExchangeRateFeeder.sol\";\n\ncontract MockExchangeRateFeeder is IExchangeRateFeeder {\n    uint256 internal exchangeRate;\n\n    function setExchangeRate(uint256 _exchangeRate) external {\n        exchangeRate = _exchangeRate;\n    }\n\n    function exchangeRateOf(address, bool)\n        external\n        view\n        override(IExchangeRateFeeder)\n        returns (uint256)\n    {\n        return exchangeRate;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}