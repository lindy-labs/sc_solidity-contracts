{
  "address": "0x092982E6d18d76CE4961910a9D65B6C63436A421",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_minLockPeriod",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_investPct",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_perfFeePct",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_investmentFeeEstimatePct",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "int128",
              "name": "tokenI",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "underlyingI",
              "type": "int128"
            }
          ],
          "internalType": "struct CurveSwapper.SwapPoolParam[]",
          "name": "_swapPools",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "StrategyAmountZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyCallerNotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyInvalidAUSTRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNoAUSTReturned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNoUST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotIVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotRunning",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNothingRedeemed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyOwnerCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyRouterCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyUnderlyingCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyYieldTokenCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAmountDoesNotMatchParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAmountLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAmountTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotComputeSharesWithoutPrincipal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotDeposit0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotDepositWhenYieldNegative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotSponsor0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotWithdrawMoreThanAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultClaimPercentageCannotBe0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultClaimsDontAddUp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultDepositLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultDestinationCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidInvestmentFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidInvestpct",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidLockPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidMinLockPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidPerformanceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNoPerformanceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotEnoughToRebalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotOwnerOfDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotSponsor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNothingToDo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultOwnerCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultStrategyHasInvestedFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultStrategyNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultTreasuryCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultUnderlyingCannotBe0Address",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "tokenI",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "underlyingI",
          "type": "int128"
        }
      ],
      "name": "CurveSwapPoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CurveSwapPoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimerId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "lockedUntil",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "DepositMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "burned",
          "type": "bool"
        }
      ],
      "name": "DepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Disinvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "InvestPctUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Invested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "pct",
          "type": "uint16"
        }
      ],
      "name": "InvestmentFeeEstimatePctUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "pct",
          "type": "uint16"
        }
      ],
      "name": "PerfFeePctUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "Sponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Unsponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimerId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnedShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "perfFee",
          "type": "uint256"
        }
      ],
      "name": "YieldClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INVESTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DEPOSIT_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SPONSOR_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_SPONSOR_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTINGS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHARES_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPONSOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accumulatedPerfFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "int128",
              "name": "tokenI",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "underlyingI",
              "type": "int128"
            }
          ],
          "internalType": "struct CurveSwapper.SwapPoolParam",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockDuration",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "pct",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IVault.ClaimParams[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct IVault.DepositParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "depositIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "contract Depositors",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimerId",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "forceWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investPct",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxInvestableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "alreadyInvested",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investmentFeeEstimatePct",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLockPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "partialWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perfFeePct",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimerId",
          "type": "address"
        }
      ],
      "name": "principalOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_investPct",
          "type": "uint16"
        }
      ],
      "name": "setInvestPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "pct",
          "type": "uint16"
        }
      ],
      "name": "setInvestmentFeeEstimatePct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_perfFeePct",
          "type": "uint16"
        }
      ],
      "name": "setPerfFeePct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimerId",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "sponsor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swappers",
      "outputs": [
        {
          "internalType": "contract ICurve",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "underlyingDecimals",
          "type": "uint8"
        },
        {
          "internalType": "int128",
          "name": "tokenI",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "underlyingI",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSponsored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingMinusSponsored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "unsponsor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateInvested",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "yieldFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimableYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perfFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
  "receipt": {
    "to": null,
    "from": "0x8f592F2594C43eA30879f9fbED4d930248D81D41",
    "contractAddress": "0x092982E6d18d76CE4961910a9D65B6C63436A421",
    "transactionIndex": 3,
    "gasUsed": "6145417",
    "logsBloom": "0x0000480400000000000000200000080000000040400000000000000800000000400000000000000000000000000400000000020000080010000000010020000000100000010000800000000000200000082000000000000400000000000000008000000002000000000000000000080000010000000000000000000000000000000000000000000000000000000000000000000001000000000080000001000802000000000000000000000000000000000000000c000000001000000000000000800000000000000000000010000000001008000000040100000000200020000010000800400000000000000000000000000400000000000000000000080000",
    "blockHash": "0x810f40b678d76aeb70c23ce23e038b09200b6306a85c3e933c9451559a095db7",
    "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 12235894,
        "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
        "address": "0x092982E6d18d76CE4961910a9D65B6C63436A421",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008f592f2594c43ea30879f9fbed4d930248d81d41",
          "0x0000000000000000000000008f592f2594c43ea30879f9fbed4d930248d81d41"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x810f40b678d76aeb70c23ce23e038b09200b6306a85c3e933c9451559a095db7"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 12235894,
        "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
        "address": "0x092982E6d18d76CE4961910a9D65B6C63436A421",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb165298935924f540e4181c03493a5d686c54a0aaeb3f6216de85b7ffbba7738",
          "0x0000000000000000000000008f592f2594c43ea30879f9fbed4d930248d81d41",
          "0x0000000000000000000000008f592f2594c43ea30879f9fbed4d930248d81d41"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x810f40b678d76aeb70c23ce23e038b09200b6306a85c3e933c9451559a095db7"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 12235894,
        "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
        "address": "0x092982E6d18d76CE4961910a9D65B6C63436A421",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf603095",
          "0x0000000000000000000000008f592f2594c43ea30879f9fbed4d930248d81d41",
          "0x0000000000000000000000008f592f2594c43ea30879f9fbed4d930248d81d41"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x810f40b678d76aeb70c23ce23e038b09200b6306a85c3e933c9451559a095db7"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 12235894,
        "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
        "address": "0x092982E6d18d76CE4961910a9D65B6C63436A421",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x1597bc5e34ff090612f53164e4e642d2ab4fc78bffe19ed1b602a0d12559561a",
          "0x0000000000000000000000008f592f2594c43ea30879f9fbed4d930248d81d41",
          "0x0000000000000000000000008f592f2594c43ea30879f9fbed4d930248d81d41"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x810f40b678d76aeb70c23ce23e038b09200b6306a85c3e933c9451559a095db7"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 12235894,
        "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
        "address": "0x6cA13a4ab78dd7D657226b155873A04DB929A3A4",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000092982e6d18d76ce4961910a9d65b6c63436a421",
          "0x0000000000000000000000001f8f4090c3a2dee7941daf29830878973991d8f0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x810f40b678d76aeb70c23ce23e038b09200b6306a85c3e933c9451559a095db7"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 12235894,
        "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
        "address": "0x6Bb59E3F447222b3fcF2847111700723153F625a",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000092982e6d18d76ce4961910a9d65b6c63436a421",
          "0x0000000000000000000000001f8f4090c3a2dee7941daf29830878973991d8f0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x810f40b678d76aeb70c23ce23e038b09200b6306a85c3e933c9451559a095db7"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 12235894,
        "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
        "address": "0x092982E6d18d76CE4961910a9D65B6C63436A421",
        "topics": [
          "0x1576b5fcfa863788d9ef6558cab7aa68d4b48c44eb7bacaf1a8ac6d6b9d26f94",
          "0x0000000000000000000000006bb59e3f447222b3fcf2847111700723153f625a",
          "0x0000000000000000000000001f8f4090c3a2dee7941daf29830878973991d8f0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 9,
        "blockHash": "0x810f40b678d76aeb70c23ce23e038b09200b6306a85c3e933c9451559a095db7"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 12235894,
        "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
        "address": "0xE015FD30cCe08Bc10344D934bdb2292B1eC4BBBD",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000092982e6d18d76ce4961910a9d65b6c63436a421",
          "0x0000000000000000000000001f8f4090c3a2dee7941daf29830878973991d8f0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 10,
        "blockHash": "0x810f40b678d76aeb70c23ce23e038b09200b6306a85c3e933c9451559a095db7"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 12235894,
        "transactionHash": "0x11a2a9d7233cb9ddb409b7c190a7bba6f5fa29d4af540725990fb4d4616e62b9",
        "address": "0x092982E6d18d76CE4961910a9D65B6C63436A421",
        "topics": [
          "0x1576b5fcfa863788d9ef6558cab7aa68d4b48c44eb7bacaf1a8ac6d6b9d26f94",
          "0x000000000000000000000000e015fd30cce08bc10344d934bdb2292b1ec4bbbd",
          "0x0000000000000000000000001f8f4090c3a2dee7941daf29830878973991d8f0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 11,
        "blockHash": "0x810f40b678d76aeb70c23ce23e038b09200b6306a85c3e933c9451559a095db7"
      }
    ],
    "blockNumber": 12235894,
    "cumulativeGasUsed": "6274500",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6cA13a4ab78dd7D657226b155873A04DB929A3A4",
    1,
    9000,
    "0x8f592F2594C43eA30879f9fbED4d930248D81D41",
    "0x8f592F2594C43eA30879f9fbED4d930248D81D41",
    100,
    200,
    [
      {
        "token": "0x6bb59e3f447222b3fcf2847111700723153f625a",
        "pool": "0x1F8f4090c3A2DEE7941daF29830878973991D8F0",
        "tokenI": 1,
        "underlyingI": 0
      },
      {
        "token": "0xE015FD30cCe08Bc10344D934bdb2292B1eC4BBBD",
        "pool": "0x1F8f4090c3A2DEE7941daF29830878973991D8F0",
        "tokenI": 2,
        "underlyingI": 0
      }
    ]
  ],
  "numDeployments": 4,
  "solcInputHash": "7daa75f08ebe0e213cb138a300d6a9be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_minLockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_investPct\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_perfFeePct\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_investmentFeeEstimatePct\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"tokenI\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"underlyingI\",\"type\":\"int128\"}],\"internalType\":\"struct CurveSwapper.SwapPoolParam[]\",\"name\":\"_swapPools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"StrategyAmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyCallerNotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyInvalidAUSTRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNoAUSTReturned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNoUST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotIVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotRunning\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNothingRedeemed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyOwnerCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyRouterCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyUnderlyingCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyYieldTokenCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAmountDoesNotMatchParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAmountLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAmountTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotComputeSharesWithoutPrincipal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotDeposit0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotDepositWhenYieldNegative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotSponsor0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotWithdrawMoreThanAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultClaimPercentageCannotBe0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultClaimsDontAddUp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultDepositLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultDestinationCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidInvestmentFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidInvestpct\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidLockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidMinLockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidPerformanceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNoPerformanceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotEnoughToRebalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotOwnerOfDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotSponsor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNothingToDo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultOwnerCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultStrategyHasInvestedFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultStrategyNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultTreasuryCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultUnderlyingCannotBe0Address\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"tokenI\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"underlyingI\",\"type\":\"int128\"}],\"name\":\"CurveSwapPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CurveSwapPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimerId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DepositMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Disinvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"InvestPctUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"}],\"name\":\"InvestmentFeeEstimatePctUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"}],\"name\":\"PerfFeePctUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"Sponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unsponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimerId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perfFee\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVESTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SPONSOR_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SPONSOR_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTINGS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARES_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPONSOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedPerfFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"tokenI\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"underlyingI\",\"type\":\"int128\"}],\"internalType\":\"struct CurveSwapper.SwapPoolParam\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.ClaimParams[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IVault.DepositParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"contract Depositors\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimerId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"forceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investPct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxInvestableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyInvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investmentFeeEstimatePct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"partialWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perfFeePct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimerId\",\"type\":\"address\"}],\"name\":\"principalOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_investPct\",\"type\":\"uint16\"}],\"name\":\"setInvestPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"}],\"name\":\"setInvestmentFeeEstimatePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_perfFeePct\",\"type\":\"uint16\"}],\"name\":\"setPerfFeePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimerId\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"sponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"int128\",\"name\":\"tokenI\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"underlyingI\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSponsored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingMinusSponsored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"unsponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateInvested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"yieldFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool((address,address,int128,int128))\":{\"params\":{\"_param\":\"Swap pool params\"}},\"claimYield(address)\":{\"params\":{\"_to\":\"Address that will receive the yield.\"}},\"constructor\":{\"params\":{\"_investPct\":\"Percentage of the total underlying to invest in the strategy\",\"_investmentFeeEstimatePct\":\"Estimated fee charged when investing through the strategy\",\"_minLockPeriod\":\"Minimum lock period to deposit\",\"_owner\":\"Vault admin address\",\"_perfFeePct\":\"Performance fee percentage\",\"_swapPools\":\"Swap pools used to automatically convert tokens to underlying\",\"_treasury\":\"Treasury address to collect performance fee\",\"_underlying\":\"Underlying ERC20 token to use.\"}},\"deposit((address,uint64,uint256,(uint16,address,bytes)[],string))\":{\"params\":{\"_params\":\"Deposit params\"}},\"forceWithdraw(address,uint256[])\":{\"params\":{\"_ids\":\"Array with the ids of the deposits.\",\"_to\":\"Address that will receive the funds.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getUnderlying()\":{\"returns\":{\"_0\":\"The address of the vault's main underlying token\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"investState()\":{\"returns\":{\"alreadyInvested\":\"already invested amount\",\"maxInvestableAmount\":\"maximum investable amount\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removePool(address)\":{\"params\":{\"_inputToken\":\"the token to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setInvestPct(uint16)\":{\"params\":{\"_investPct\":\"the new invest percentage\"}},\"setInvestmentFeeEstimatePct(uint16)\":{\"params\":{\"_pct\":\"the new investment fee estimated percentage.\"}},\"setPerfFeePct(uint16)\":{\"params\":{\"_perfFeePct\":\"the new performance fee.\"}},\"setStrategy(address)\":{\"params\":{\"_strategy\":\"the new strategy's address.\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"the new strategy's address.\"}},\"sponsor(address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount to sponsor.\",\"_inputToken\":\"The input token to deposit.\",\"_lockedUntil\":\"When the sponsor can unsponsor the amount.\"}},\"totalUnderlyingMinusSponsored()\":{\"returns\":{\"_0\":\"Total amount of principal and yield help by the vault (not including sponsored amount and performance fee).\"}},\"unsponsor(address,uint256[])\":{\"params\":{\"_ids\":\"Array with the ids of the deposits.\",\"_to\":\"Address that will receive the funds.\"}},\"withdraw(address,uint256[])\":{\"params\":{\"_ids\":\"Array with the ids of the deposits.\",\"_to\":\"Address that will receive the funds.\"}},\"yieldFor(address)\":{\"params\":{\"_to\":\"address to consider.\"},\"returns\":{\"claimableYield\":\"claimable yield for @param _to, share of generated yield by @param _to,      and performance fee from generated yield\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CurveSwapPoolAdded(address,address,int128,int128)\":{\"notice\":\"Emitted when a new swap pool is added\"},\"CurveSwapPoolRemoved(address)\":{\"notice\":\"Emitted when a swap pool is removed\"},\"Sponsored(uint256,uint256,address,uint256)\":{\"notice\":\"Emitted when a new sponsor deposit is created\"},\"Swap(address,address,uint256,uint256)\":{\"notice\":\"Emitted after every swap\"},\"Unsponsored(uint256)\":{\"notice\":\"Emitted when an existing sponsor withdraws\"}},\"kind\":\"user\",\"methods\":{\"INVESTOR_ROLE()\":{\"notice\":\"Role allowed to invest/desinvest from strategy\"},\"MAX_DEPOSIT_LOCK_DURATION()\":{\"notice\":\"Maximum lock for each deposit\"},\"MAX_SPONSOR_LOCK_DURATION()\":{\"notice\":\"Maximum lock for each sponsor\"},\"MIN_SPONSOR_LOCK_DURATION()\":{\"notice\":\"Minimum lock for each sponsor\"},\"SETTINGS_ROLE()\":{\"notice\":\"Role allowed to change settings such as performance fee and investment fee\"},\"SHARES_MULTIPLIER()\":{\"notice\":\"Helper constant for computing shares without losing precision\"},\"SLIPPAGE()\":{\"notice\":\"Static 95% slippage (TODO should probably make this configurable)\"},\"SPONSOR_ROLE()\":{\"notice\":\"Role for sponsors allowed to call sponsor/unsponsor\"},\"accumulatedPerfFee()\":{\"notice\":\"Current accumulated performance fee;\"},\"addPool((address,address,int128,int128))\":{\"notice\":\"Adds a new curve swap pool from an input token to {underlying}\"},\"claimYield(address)\":{\"notice\":\"Accumulate performance fee and transfers rest yield generated for the caller to\"},\"claimer(address)\":{\"notice\":\"claimer address => claimer data\"},\"deposit((address,uint64,uint256,(uint16,address,bytes)[],string))\":{\"notice\":\"Creates a new deposit\"},\"depositors()\":{\"notice\":\"Depositors, represented as an NFT per deposit\"},\"deposits(uint256)\":{\"notice\":\"deposit NFT ID => deposit data\"},\"investPct()\":{\"notice\":\"Percentage of the total underlying to invest in the strategy\"},\"investState()\":{\"notice\":\"Calculate maximum investable amount and already invested amount\"},\"investmentFeeEstimatePct()\":{\"notice\":\"Investment fee pct\"},\"minLockPeriod()\":{\"notice\":\"Minimum lock period for each deposit\"},\"perfFeePct()\":{\"notice\":\"Performance fee percentage\"},\"removePool(address)\":{\"notice\":\"Removes an existing swap pool, and the ability to deposit the given token as underlying\"},\"setInvestPct(uint16)\":{\"notice\":\"Update invest percentage Emits {InvestPercentageUpdated} event\"},\"setInvestmentFeeEstimatePct(uint16)\":{\"notice\":\"Changes the estimated investment fee used by the strategy.\"},\"setPerfFeePct(uint16)\":{\"notice\":\"Changes the performance fee used by the vault.\"},\"setStrategy(address)\":{\"notice\":\"Changes the strategy used by the vault.if there is invested funds in previous strategy, it is not allowed to set new strategy.\"},\"setTreasury(address)\":{\"notice\":\"Changes the treasury used by the vault.\"},\"strategy()\":{\"notice\":\"The investment strategy\"},\"swappers(address)\":{\"notice\":\"token => curve pool (for trading token/underlying)\"},\"totalPrincipal()\":{\"notice\":\"The total of principal deposited\"},\"totalShares()\":{\"notice\":\"Total amount of shares\"},\"totalSponsored()\":{\"notice\":\"Total amount currently sponsored\"},\"totalUnderlying()\":{\"notice\":\"Total amount of underlying currently controlled by the vault and the its strategy.\"},\"totalUnderlyingMinusSponsored()\":{\"notice\":\"Computes the total amount of principal + yield currently controlled by the vault and the strategy. The principal + yield is the total amount of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee.\"},\"treasury()\":{\"notice\":\"Treasury address to collect performance fee\"},\"underlying()\":{\"notice\":\"Underlying ERC20 token accepted by the vault\"},\"unsponsor(address,uint256[])\":{\"notice\":\"Withdraws the sponsored amount for the deposits with the ids provided\"},\"updateInvested()\":{\"notice\":\"Update the invested amount;\"},\"withdrawPerformanceFee()\":{\"notice\":\"Withdraws any pending performance fee amount back to the treasury\"},\"yieldFor(address)\":{\"notice\":\"Computes the amount of yield available for an an address.\"}},\"notice\":\"A vault where other accounts can deposit an underlying token currency and set distribution params for their principal and yieldThe underlying token can be automatically swapped from any configured ERC20 token via {CurveSwapper}\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport {IVault} from \\\"./vault/IVault.sol\\\";\\nimport {IVaultSponsoring} from \\\"./vault/IVaultSponsoring.sol\\\";\\nimport {IVaultSettings} from \\\"./vault/IVaultSettings.sol\\\";\\nimport {CurveSwapper} from \\\"./vault/CurveSwapper.sol\\\";\\nimport {PercentMath} from \\\"./lib/PercentMath.sol\\\";\\nimport {Depositors} from \\\"./vault/Depositors.sol\\\";\\nimport {IStrategy} from \\\"./strategy/IStrategy.sol\\\";\\nimport {CustomErrors} from \\\"./interfaces/CustomErrors.sol\\\";\\n\\n/**\\n * A vault where other accounts can deposit an underlying token\\n * currency and set distribution params for their principal and yield\\n *\\n * @notice The underlying token can be automatically swapped from any configured ERC20 token via {CurveSwapper}\\n */\\ncontract Vault is\\n    IVault,\\n    IVaultSponsoring,\\n    IVaultSettings,\\n    CurveSwapper,\\n    Context,\\n    ERC165,\\n    AccessControl,\\n    ReentrancyGuard,\\n    Pausable,\\n    CustomErrors\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Metadata;\\n    using PercentMath for uint256;\\n    using PercentMath for uint16;\\n\\n    //\\n    // Constants\\n    //\\n\\n    /// Role allowed to invest/desinvest from strategy\\n    bytes32 public constant INVESTOR_ROLE = keccak256(\\\"INVESTOR_ROLE\\\");\\n\\n    /// Role allowed to change settings such as performance fee and investment fee\\n    bytes32 public constant SETTINGS_ROLE = keccak256(\\\"SETTINGS_ROLE\\\");\\n\\n    /// Role for sponsors allowed to call sponsor/unsponsor\\n    bytes32 public constant SPONSOR_ROLE = keccak256(\\\"SPONSOR_ROLE\\\");\\n\\n    /// Minimum lock for each sponsor\\n    uint64 public constant MIN_SPONSOR_LOCK_DURATION = 2 weeks;\\n\\n    /// Maximum lock for each sponsor\\n    uint64 public constant MAX_SPONSOR_LOCK_DURATION = 24 weeks;\\n\\n    /// Maximum lock for each deposit\\n    uint64 public constant MAX_DEPOSIT_LOCK_DURATION = 24 weeks;\\n\\n    /// Helper constant for computing shares without losing precision\\n    uint256 public constant SHARES_MULTIPLIER = 10**18;\\n\\n    //\\n    // State\\n    //\\n\\n    /// @inheritdoc IVault\\n    IERC20Metadata public override(IVault) underlying;\\n\\n    /// @inheritdoc IVault\\n    uint16 public override(IVault) investPct;\\n\\n    /// @inheritdoc IVault\\n    uint64 public immutable override(IVault) minLockPeriod;\\n\\n    /// @inheritdoc IVaultSponsoring\\n    uint256 public override(IVaultSponsoring) totalSponsored;\\n\\n    /// @inheritdoc IVault\\n    uint256 public override(IVault) totalShares;\\n\\n    /// The investment strategy\\n    IStrategy public strategy;\\n\\n    /// Depositors, represented as an NFT per deposit\\n    Depositors public depositors;\\n\\n    /// Unique IDs to correlate donations that belong to the same foundation\\n    uint256 private _depositGroupIds;\\n\\n    /// deposit NFT ID => deposit data\\n    mapping(uint256 => Deposit) public deposits;\\n\\n    /// claimer address => claimer data\\n    mapping(address => Claimer) public claimer;\\n\\n    /// The total of principal deposited\\n    uint256 public totalPrincipal;\\n\\n    /// Treasury address to collect performance fee\\n    address public treasury;\\n\\n    /// Performance fee percentage\\n    uint16 public perfFeePct;\\n\\n    /// Current accumulated performance fee;\\n    uint256 public accumulatedPerfFee;\\n\\n    /// Investment fee pct\\n    uint16 public investmentFeeEstimatePct;\\n\\n    /// Rebalance minimum\\n    uint256 private immutable rebalanceMinimum;\\n\\n    /**\\n     * @param _underlying Underlying ERC20 token to use.\\n     * @param _minLockPeriod Minimum lock period to deposit\\n     * @param _investPct Percentage of the total underlying to invest in the strategy\\n     * @param _treasury Treasury address to collect performance fee\\n     * @param _owner Vault admin address\\n     * @param _perfFeePct Performance fee percentage\\n     * @param _investmentFeeEstimatePct Estimated fee charged when investing through the strategy\\n     * @param _swapPools Swap pools used to automatically convert tokens to underlying\\n     */\\n    constructor(\\n        IERC20Metadata _underlying,\\n        uint64 _minLockPeriod,\\n        uint16 _investPct,\\n        address _treasury,\\n        address _owner,\\n        uint16 _perfFeePct,\\n        uint16 _investmentFeeEstimatePct,\\n        SwapPoolParam[] memory _swapPools\\n    ) {\\n        if (!_investPct.validPct()) revert VaultInvalidInvestpct();\\n        if (!_perfFeePct.validPct()) revert VaultInvalidPerformanceFee();\\n        if (!_investmentFeeEstimatePct.validPct()) revert VaultInvalidInvestmentFee();\\n        if (address(_underlying) == address(0x0)) revert VaultUnderlyingCannotBe0Address();\\n        if (_treasury == address(0x0)) revert VaultTreasuryCannotBe0Address();\\n        if (_owner == address(0x0)) revert VaultOwnerCannotBe0Address();\\n        if (_minLockPeriod == 0 || _minLockPeriod > MAX_DEPOSIT_LOCK_DURATION) revert VaultInvalidMinLockPeriod();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(INVESTOR_ROLE, _owner);\\n        _setupRole(SETTINGS_ROLE, _owner);\\n        _setupRole(SPONSOR_ROLE, _owner);\\n\\n        investPct = _investPct;\\n        underlying = _underlying;\\n        treasury = _treasury;\\n        minLockPeriod = _minLockPeriod;\\n        perfFeePct = _perfFeePct;\\n        investmentFeeEstimatePct = _investmentFeeEstimatePct;\\n\\n        depositors = new Depositors(this);\\n\\n        rebalanceMinimum = 10 * 10 ** underlying.decimals();\\n\\n        _addPools(_swapPools);\\n    }\\n\\n    //\\n    // IVault\\n    //\\n\\n    /// @inheritdoc IVault\\n    function totalUnderlying() public view override(IVault) returns (uint256) {\\n        if (address(strategy) != address(0)) {\\n            return\\n                underlying.balanceOf(address(this)) + strategy.investedAssets();\\n        }\\n\\n        return underlying.balanceOf(address(this));\\n    }\\n\\n    /// @inheritdoc IVault\\n    function yieldFor(address _to)\\n        public\\n        view\\n        override(IVault)\\n        returns (\\n            uint256 claimableYield,\\n            uint256 shares,\\n            uint256 perfFee\\n        )\\n    {\\n        uint256 claimerPrincipal = claimer[_to].totalPrincipal;\\n        uint256 claimerShares = claimer[_to].totalShares;\\n\\n        uint256 currentClaimerPrincipal = _computeAmount(\\n            claimerShares,\\n            totalShares,\\n            totalUnderlyingMinusSponsored()\\n        );\\n\\n        if (currentClaimerPrincipal <= claimerPrincipal) {\\n            return (0, 0, 0);\\n        }\\n\\n        uint256 yieldWithPerfFee = currentClaimerPrincipal - claimerPrincipal;\\n\\n        shares = _computeShares(\\n            yieldWithPerfFee,\\n            totalShares,\\n            totalUnderlyingMinusSponsored()\\n        );\\n        uint256 sharesAmount = _computeAmount(\\n            shares,\\n            totalShares,\\n            totalUnderlyingMinusSponsored()\\n        );\\n\\n        perfFee = sharesAmount.pctOf(perfFeePct);\\n        claimableYield = sharesAmount - perfFee;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function deposit(DepositParams calldata _params)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256[] memory depositIds)\\n    {\\n        if (_params.amount == 0) revert VaultCannotDeposit0();\\n        if (_params.lockDuration < minLockPeriod || _params.lockDuration > MAX_DEPOSIT_LOCK_DURATION) revert VaultInvalidLockPeriod();\\n\\n        uint256 principalMinusStrategyFee = _applyInvestmentFeeEstimate(\\n            totalPrincipal\\n        );\\n        uint256 previousTotalUnderlying = totalUnderlyingMinusSponsored();\\n        if (principalMinusStrategyFee > previousTotalUnderlying) revert VaultCannotDepositWhenYieldNegative();\\n\\n        _transferAndCheckInputToken(\\n            msg.sender,\\n            _params.inputToken,\\n            _params.amount\\n        );\\n        uint256 newUnderlyingAmount = _swapIntoUnderlying(\\n            _params.inputToken,\\n            _params.amount\\n        );\\n\\n        uint64 lockedUntil = _params.lockDuration + _blockTimestamp();\\n\\n        depositIds = _createDeposit(\\n            previousTotalUnderlying,\\n            newUnderlyingAmount,\\n            lockedUntil,\\n            _params.claims,\\n            _params.name\\n        );\\n    }\\n\\n    /// @inheritdoc IVault\\n    function claimYield(address _to) external override(IVault) nonReentrant {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        (uint256 yield, uint256 shares, uint256 fee) = yieldFor(msg.sender);\\n\\n        if (yield == 0) return;\\n\\n        accumulatedPerfFee += fee;\\n\\n        underlying.safeTransfer(_to, yield);\\n\\n        claimer[msg.sender].totalShares -= shares;\\n        totalShares -= shares;\\n\\n        emit YieldClaimed(msg.sender, _to, yield, shares, fee);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function withdraw(address _to, uint256[] calldata _ids)\\n        external\\n        override(IVault)\\n        nonReentrant\\n    {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        _withdrawAll(_to, _ids, false);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function forceWithdraw(address _to, uint256[] calldata _ids)\\n        external\\n        nonReentrant\\n    {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        _withdrawAll(_to, _ids, true);\\n    }\\n\\n    function partialWithdraw(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external nonReentrant {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        _withdrawPartial(_to, _ids, _amounts);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function investState()\\n        public\\n        view\\n        override(IVault)\\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested)\\n    {\\n        if (address(strategy) == address(0)) {\\n            return (0, 0);\\n        }\\n\\n        maxInvestableAmount = totalUnderlying().pctOf(investPct);\\n        alreadyInvested = strategy.investedAssets();\\n    }\\n\\n    /// @inheritdoc IVault\\n    function updateInvested()\\n        external\\n        override(IVault)\\n        onlyRole(INVESTOR_ROLE)\\n    {\\n        if (address(strategy) == address(0)) revert VaultStrategyNotSet();\\n\\n        (uint256 maxInvestableAmount, uint256 alreadyInvested) = investState();\\n\\n        if (maxInvestableAmount == alreadyInvested) revert VaultNothingToDo();\\n\\n        // disinvest\\n        if (alreadyInvested > maxInvestableAmount) {\\n            uint256 disinvestAmount = alreadyInvested - maxInvestableAmount;\\n\\n            if (disinvestAmount < rebalanceMinimum) revert VaultNotEnoughToRebalance();\\n\\n            strategy.withdrawToVault(disinvestAmount);\\n\\n            emit Disinvested(disinvestAmount);\\n\\n            return;\\n        }\\n\\n        // invest\\n        uint256 investAmount = maxInvestableAmount - alreadyInvested;\\n\\n        if (investAmount < rebalanceMinimum) revert VaultNotEnoughToRebalance();\\n\\n        underlying.safeTransfer(address(strategy), investAmount);\\n\\n        strategy.invest();\\n\\n        emit Invested(investAmount);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function withdrawPerformanceFee()\\n        external\\n        override(IVault)\\n        onlyRole(INVESTOR_ROLE)\\n    {\\n        uint256 _perfFee = accumulatedPerfFee;\\n        if (_perfFee == 0) revert VaultNoPerformanceFee();\\n\\n        accumulatedPerfFee = 0;\\n\\n        emit FeeWithdrawn(_perfFee);\\n        underlying.safeTransfer(treasury, _perfFee);\\n    }\\n\\n    //\\n    // IVaultSponsoring\\n    //\\n\\n    /// @inheritdoc IVaultSponsoring\\n    function sponsor(\\n        address _inputToken,\\n        uint256 _amount,\\n        uint256 _lockDuration\\n    )\\n        external\\n        override(IVaultSponsoring)\\n        nonReentrant\\n        onlyRole(SPONSOR_ROLE)\\n        whenNotPaused\\n    {\\n        if (_amount == 0) revert VaultCannotSponsor0();\\n\\n        if (_lockDuration < MIN_SPONSOR_LOCK_DURATION || _lockDuration > MAX_SPONSOR_LOCK_DURATION) revert VaultInvalidLockPeriod();\\n\\n        uint256 lockedUntil = _lockDuration + block.timestamp;\\n        uint256 tokenId = depositors.mint(msg.sender);\\n\\n        _transferAndCheckInputToken(msg.sender, _inputToken, _amount);\\n        uint256 underlyingAmount = _swapIntoUnderlying(_inputToken, _amount);\\n\\n        deposits[tokenId] = Deposit(underlyingAmount, address(0), lockedUntil, 0);\\n        totalSponsored += underlyingAmount;\\n\\n        emit Sponsored(tokenId, underlyingAmount, msg.sender, lockedUntil);\\n    }\\n\\n    /// @inheritdoc IVaultSponsoring\\n    function unsponsor(address _to, uint256[] calldata _ids)\\n        external\\n        nonReentrant\\n    {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        _unsponsor(_to, _ids);\\n    }\\n\\n    //\\n    // CurveSwapper\\n    //\\n\\n    /// @inheritdoc CurveSwapper\\n    function getUnderlying()\\n        public\\n        view\\n        override(CurveSwapper)\\n        returns (address)\\n    {\\n        return address(underlying);\\n    }\\n\\n    /// Adds a new curve swap pool from an input token to {underlying}\\n    ///\\n    /// @param _param Swap pool params\\n    function addPool(SwapPoolParam memory _param)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _addPool(_param);\\n    }\\n\\n    /// Removes an existing swap pool, and the ability to deposit the given token as underlying\\n    ///\\n    /// @param _inputToken the token to remove\\n    function removePool(address _inputToken)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _removePool(_inputToken);\\n    }\\n\\n    //\\n    // Admin functions\\n    //\\n\\n    /// @inheritdoc IVaultSettings\\n    function setInvestPct(uint16 _investPct)\\n        external\\n        override(IVaultSettings)\\n        onlyRole(SETTINGS_ROLE)\\n    {\\n        if (!PercentMath.validPct(_investPct)) revert VaultInvalidInvestpct();\\n\\n        emit InvestPctUpdated(_investPct);\\n\\n        investPct = _investPct;\\n    }\\n\\n    /// @inheritdoc IVaultSettings\\n    function setTreasury(address _treasury)\\n        external\\n        override(IVaultSettings)\\n        onlyRole(SETTINGS_ROLE)\\n    {\\n        if (address(_treasury) == address(0x0)) revert VaultTreasuryCannotBe0Address();\\n        treasury = _treasury;\\n        emit TreasuryUpdated(_treasury);\\n    }\\n\\n    /// @inheritdoc IVaultSettings\\n    function setPerfFeePct(uint16 _perfFeePct)\\n        external\\n        override(IVaultSettings)\\n        onlyRole(SETTINGS_ROLE)\\n    {\\n        if (!PercentMath.validPct(_perfFeePct)) revert VaultInvalidPerformanceFee();\\n        perfFeePct = _perfFeePct;\\n        emit PerfFeePctUpdated(_perfFeePct);\\n    }\\n\\n    /// @inheritdoc IVaultSettings\\n    function setStrategy(address _strategy)\\n        external\\n        override(IVaultSettings)\\n        onlyRole(SETTINGS_ROLE)\\n    {\\n        if (_strategy == address(0)) revert VaultStrategyNotSet();\\n        if (IStrategy(_strategy).vault() != address(this)) revert VaultInvalidVault();\\n        if (address(strategy) != address(0) && strategy.hasAssets() == true) revert VaultStrategyHasInvestedFunds();\\n\\n        strategy = IStrategy(_strategy);\\n\\n        emit StrategyUpdated(_strategy);\\n    }\\n\\n    /// @inheritdoc IVaultSettings\\n    function setInvestmentFeeEstimatePct(uint16 pct)\\n        external\\n        override(IVaultSettings)\\n        onlyRole(SETTINGS_ROLE)\\n    {\\n        if (!pct.validPct()) revert VaultInvalidInvestmentFee();\\n\\n        investmentFeeEstimatePct = pct;\\n        emit InvestmentFeeEstimatePctUpdated(pct);\\n    }\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Computes the total amount of principal + yield currently controlled by the\\n     * vault and the strategy. The principal + yield is the total amount\\n     * of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee.\\n     *\\n     * @return Total amount of principal and yield help by the vault (not including sponsored amount and performance fee).\\n     */\\n    function totalUnderlyingMinusSponsored() public view returns (uint256) {\\n        uint256 _totalUnderlying = totalUnderlying();\\n        uint256 deductAmount = totalSponsored + accumulatedPerfFee;\\n        if (deductAmount > _totalUnderlying) {\\n            return 0;\\n        }\\n\\n        return _totalUnderlying - deductAmount;\\n    }\\n\\n    //\\n    // ERC165\\n    //\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, AccessControl)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IVault).interfaceId ||\\n            interfaceId == type(IVaultSponsoring).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // Internal API\\n    //\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * @notice the NFTs of the deposits will be burned.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     * @param _force Boolean to specify if the action should be perfomed when there's loss.\\n     */\\n    function _withdrawAll(\\n        address _to,\\n        uint256[] calldata _ids,\\n        bool _force\\n    ) internal {\\n        uint256 localTotalShares = totalShares;\\n        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();\\n        uint256 amount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint256 i; i < idsLen; ++i) {\\n            uint256 depositAmount = deposits[_ids[i]].amount;\\n\\n            amount += _withdrawSingle(\\n                _ids[i],\\n                localTotalShares,\\n                localTotalPrincipal,\\n                _to,\\n                _force,\\n                depositAmount\\n            );\\n        }\\n\\n        underlying.safeTransfer(_to, amount);\\n    }\\n\\n    function _withdrawPartial(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) internal {\\n        uint256 localTotalShares = totalShares;\\n        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();\\n        uint256 amount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint256 i; i < idsLen; ++i) {\\n            if (_amounts[i] > deposits[_ids[i]].amount) revert VaultAmountTooLarge();\\n\\n            amount += _withdrawSingle(\\n                _ids[i],\\n                localTotalShares,\\n                localTotalPrincipal,\\n                _to,\\n                false,\\n                _amounts[i]\\n            );\\n        }\\n\\n        underlying.safeTransfer(_to, amount);\\n    }\\n\\n    /**\\n     * Withdraws the sponsored amount for the deposits with the ids provided\\n     * in @param _ids and sends it to @param _to.\\n     *\\n     * @notice the NFTs of the deposits will be burned.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function _unsponsor(address _to, uint256[] calldata _ids) internal {\\n        uint256 sponsorAmount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint8 i; i < idsLen; ++i) {\\n            uint256 tokenId = _ids[i];\\n\\n            Deposit memory _deposit = deposits[tokenId];\\n            uint256 lockedUntil = _deposit.lockedUntil;\\n            address claimerId = _deposit.claimerId;\\n\\n            address owner = depositors.ownerOf(tokenId);\\n            uint256 amount = _deposit.amount;\\n\\n            if (owner != msg.sender) revert VaultNotAllowed();\\n            if (lockedUntil > block.timestamp) revert VaultAmountLocked();\\n            if (claimerId != address(0)) revert VaultNotSponsor();\\n\\n            sponsorAmount += amount;\\n\\n            depositors.burn(tokenId);\\n\\n            emit Unsponsored(tokenId);\\n        }\\n\\n        uint256 sponsorToTransfer = sponsorAmount;\\n\\n        if (sponsorToTransfer > totalUnderlying()) revert VaultNotEnoughFunds();\\n\\n        totalSponsored -= sponsorAmount;\\n\\n        underlying.safeTransfer(_to, sponsorToTransfer);\\n    }\\n\\n    /**\\n     * @dev `_createDeposit` declares too many locals\\n     * We move some of them to this struct to fix the problem\\n     */\\n    struct CreateDepositLocals {\\n        uint256 totalShares;\\n        uint256 totalUnderlying;\\n        uint256 groupId;\\n        uint16 accumulatedPct;\\n        uint256 accumulatedAmount;\\n        uint256 claimsLen;\\n    }\\n\\n    /**\\n     * Creates a deposit with the given amount of underlying and claim\\n     * structure. The deposit is locked until the timestamp specified in @param _lockedUntil.\\n     * @notice This function assumes underlying will be transfered elsewhere in\\n     * the transaction.\\n     *\\n     * @notice Underlying must be transfered *after* this function, in order to\\n     * correctly calculate shares.\\n     *\\n     * @notice claims must add up to 100%.\\n     *\\n     * @param _amount Amount of underlying to consider @param claims claim\\n     * @param _lockedUntil Timestamp at which the deposit unlocks\\n     * @param claims Claim params\\n     * params.\\n     */\\n    function _createDeposit(\\n        uint256 _previousTotalUnderlying,\\n        uint256 _amount,\\n        uint64 _lockedUntil,\\n        ClaimParams[] calldata claims,\\n        string calldata _name\\n    ) internal returns (uint256[] memory) {\\n        CreateDepositLocals memory locals = CreateDepositLocals({\\n            totalShares: totalShares,\\n            totalUnderlying: _previousTotalUnderlying,\\n            groupId: _depositGroupIds,\\n            accumulatedPct: 0,\\n            accumulatedAmount: 0,\\n            claimsLen: claims.length\\n        });\\n\\n        uint256[] memory result = new uint256[](locals.claimsLen);\\n\\n        for (uint256 i; i < locals.claimsLen; ++i) {\\n            ClaimParams memory data = claims[i];\\n            if (data.pct == 0) revert VaultClaimPercentageCannotBe0();\\n            // if it's the last claim, just grab all remaining amount, instead\\n            // of relying on percentages\\n            uint256 localAmount = i == locals.claimsLen - 1\\n                ? _amount - locals.accumulatedAmount\\n                : _amount.pctOf(data.pct);\\n\\n            result[i] = _createClaim(\\n                locals.groupId,\\n                localAmount,\\n                _lockedUntil,\\n                data,\\n                locals.totalShares,\\n                locals.totalUnderlying,\\n                _name\\n            );\\n            locals.accumulatedPct += data.pct;\\n            locals.accumulatedAmount += localAmount;\\n        }\\n\\n        if (!locals.accumulatedPct.is100Pct()) revert VaultClaimsDontAddUp();\\n\\n        _depositGroupIds++;\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev `_createClaim` declares too many locals\\n     * We move some of them to this struct to fix the problem\\n     */\\n    struct CreateClaimLocals {\\n        uint256 newShares;\\n        address claimerId;\\n        uint256 tokenId;\\n    }\\n\\n    function _createClaim(\\n        uint256 _depositGroupId,\\n        uint256 _amount,\\n        uint64 _lockedUntil,\\n        ClaimParams memory _claim,\\n        uint256 _localTotalShares,\\n        uint256 _localTotalPrincipal,\\n        string calldata _name\\n    ) internal returns (uint256) {\\n        CreateClaimLocals memory locals = CreateClaimLocals({\\n            newShares: _computeShares(\\n                _amount,\\n                _localTotalShares,\\n                _localTotalPrincipal\\n            ),\\n            claimerId: _claim.beneficiary,\\n            tokenId: depositors.mint(msg.sender)\\n        });\\n\\n        claimer[locals.claimerId].totalShares += locals.newShares;\\n        claimer[locals.claimerId].totalPrincipal += _amount;\\n\\n        totalShares += locals.newShares;\\n        totalPrincipal += _amount;\\n\\n        deposits[locals.tokenId] = Deposit(\\n            _amount,\\n            locals.claimerId,\\n            _lockedUntil,\\n            locals.newShares\\n        );\\n\\n        emit DepositMinted(\\n            locals.tokenId,\\n            _depositGroupId,\\n            _amount,\\n            locals.newShares,\\n            msg.sender,\\n            _claim.beneficiary,\\n            locals.claimerId,\\n            _lockedUntil,\\n            _claim.data,\\n            _name\\n        );\\n\\n        return locals.tokenId;\\n    }\\n\\n    /**\\n     * Burns a deposit NFT and reduces the principal and shares of the claimer.\\n     * If there were any yield to be claimed, the claimer will also keep shares to withdraw later on.\\n     *\\n     * @notice This function doesn't transfer any funds, it only updates the state.\\n     *\\n     * @notice Only the owner of the deposit may call this function.\\n     *\\n     * @param _tokenId The deposit ID to withdraw from.\\n     * @param _totalShares The total shares to consider for the withdraw.\\n     * @param _totalUnderlyingMinusSponsored The total underlying to consider for the withdraw.\\n     * @param _to Where the funds will be sent\\n     * @param _force If the withdraw should still withdraw if there are not enough funds in the vault.\\n     *\\n     * @return the amount to withdraw.\\n     */\\n    function _withdrawSingle(\\n        uint256 _tokenId,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlyingMinusSponsored,\\n        address _to,\\n        bool _force,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        if (depositors.ownerOf(_tokenId) != msg.sender) revert VaultNotOwnerOfDeposit();\\n\\n        // memoizing saves warm sloads\\n        Deposit memory _deposit = deposits[_tokenId];\\n        Claimer memory _claim = claimer[_deposit.claimerId];\\n\\n        if (_deposit.lockedUntil > block.timestamp) revert VaultDepositLocked();\\n        if (_deposit.claimerId == address(0)) revert VaultNotDeposit();\\n\\n        bool isFull = _deposit.amount == _amount;\\n\\n        // total amount of shares this deposit is currently worth\\n        // computed only to check if we're currently at a loss\\n        uint256 depositShares = _computeShares(\\n            _deposit.amount,\\n            _totalShares,\\n            _totalUnderlyingMinusSponsored\\n        );\\n\\n        // for full withdrawals, sharesToBurn is the same as depositShares.\\n        // otherwise we compute the partian number of shares to burn\\n        uint256 sharesToBurn = isFull\\n            ? depositShares\\n            : _computeShares(\\n                _amount,\\n                _totalShares,\\n                _totalUnderlyingMinusSponsored\\n            );\\n\\n        bool lostMoney = depositShares > _deposit.shares ||\\n            depositShares > _claim.totalShares;\\n\\n        // _force is only allowed in full withdrawals, not partials, so this will\\n        // implicitly be false essentially preventing \\\"partial withdrawals at a loss\\\"\\n        // which would mess up the whole math\\n        if (isFull && _force && lostMoney) {\\n            // When there's a loss it means that a deposit is now worth more\\n            // shares than before. In that scenario, we cannot allow the\\n            // depositor to withdraw all her money. Instead, the depositor gets\\n            // a number of shares that are equivalent to the percentage of this\\n            // deposit in the total deposits for this claimer.\\n            sharesToBurn =\\n                (_amount * _claim.totalShares) /\\n                _claim.totalPrincipal;\\n        } else if (lostMoney) {\\n            revert VaultCannotWithdrawMoreThanAvailable(); \\n        }\\n\\n        claimer[_deposit.claimerId].totalShares -= sharesToBurn;\\n        claimer[_deposit.claimerId].totalPrincipal -= _amount;\\n\\n        totalShares -= sharesToBurn;\\n        totalPrincipal -= _amount;\\n\\n        if (isFull) {\\n            depositors.burn(_tokenId);\\n            delete deposits[_tokenId];\\n        } else {\\n            deposits[_tokenId].shares -= sharesToBurn;\\n            deposits[_tokenId].amount -= _amount;\\n        }\\n\\n        uint256 amount = _computeAmount(\\n            sharesToBurn,\\n            _totalShares,\\n            _totalUnderlyingMinusSponsored\\n        );\\n\\n        emit DepositWithdrawn(_tokenId, sharesToBurn, amount, _to, isFull);\\n\\n        return amount;\\n    }\\n\\n    function _transferAndCheckInputToken(\\n        address _from,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\\n\\n        if (balanceAfter != balanceBefore + _amount) revert VaultAmountDoesNotMatchParams();\\n    }\\n\\n    function _blockTimestamp() internal view returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n\\n    /**\\n     * Computes amount of shares that will be received for a given deposit amount\\n     *\\n     * @param _amount Amount of deposit to consider.\\n     * @param _totalShares Amount of existing shares to consider.\\n     * @param _totalUnderlyingMinusSponsored Amount of existing underlying to consider.\\n     * @return Amount of shares the deposit will receive.\\n     */\\n    function _computeShares(\\n        uint256 _amount,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlyingMinusSponsored\\n    ) internal pure returns (uint256) {\\n        if (_amount == 0) return 0;\\n        if (_totalShares == 0) return _amount * SHARES_MULTIPLIER;\\n        if (_totalUnderlyingMinusSponsored == 0) revert VaultCannotComputeSharesWithoutPrincipal();\\n\\n        return (_amount * _totalShares) / _totalUnderlyingMinusSponsored;\\n    }\\n\\n    /**\\n     * Computes the amount of underlying from a given number of shares\\n     *\\n     * @param _shares Number of shares.\\n     * @param _totalShares Amount of existing shares to consider.\\n     * @param _totalUnderlyingMinusSponsored Amounf of existing underlying to consider.\\n     * @return Amount that corresponds to the number of shares.\\n     */\\n    function _computeAmount(\\n        uint256 _shares,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlyingMinusSponsored\\n    ) internal pure returns (uint256) {\\n        if (\\n            _shares == 0 ||\\n            _totalShares == 0 ||\\n            _totalUnderlyingMinusSponsored == 0\\n        ) {\\n            return 0;\\n        }\\n\\n        return ((_totalUnderlyingMinusSponsored * _shares) / _totalShares);\\n    }\\n\\n    /**\\n     * Applies an estimated fee to the given @param _amount.\\n     *\\n     * This function should be used to estimate how much underlying will be\\n     * left after the strategy invests. For instance, the fees taken by Anchor.\\n     *\\n     * @param _amount Amount to apply the fees to.\\n     *\\n     * @return Amount with the fees applied.\\n     */\\n    function _applyInvestmentFeeEstimate(uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _amount - _amount.pctOf(investmentFeeEstimatePct);\\n    }\\n\\n    function sharesOf(address claimerId) external view returns (uint256) {\\n        return claimer[claimerId].totalShares;\\n    }\\n\\n    function principalOf(address claimerId) external view returns (uint256) {\\n        return claimer[claimerId].totalPrincipal;\\n    }\\n\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xeeb9f627e0bef5136a12e71c4b4991fa20387a81c56644d442d792c6173fa126\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/CustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface CustomErrors {\\n    //\\n    // Vault Errors\\n    //\\n\\n    // Vault: invalid investPct\\n    error VaultInvalidInvestpct();\\n\\n    // Vault: invalid performance fee\\n    error VaultInvalidPerformanceFee();\\n\\n    // Vault: no performance fee\\n    error VaultNoPerformanceFee();\\n\\n    // Vault: invalid investment fee\\n    error VaultInvalidInvestmentFee();\\n\\n    // Vault: underlying cannot be 0x0\\n    error VaultUnderlyingCannotBe0Address();\\n\\n    // Vault: treasury cannot be 0x0\\n    error VaultTreasuryCannotBe0Address();\\n\\n    // Vault: owner cannot be 0x0\\n    error VaultOwnerCannotBe0Address();\\n\\n    // Vault: destination address is 0x\\n    error VaultDestinationCannotBe0Address();\\n\\n    // Vault: strategy is not set\\n    error VaultStrategyNotSet();\\n\\n    // Vault: invalid minLockPeriod\\n    error VaultInvalidMinLockPeriod();\\n\\n    // Vault: invalid lock period\\n    error VaultInvalidLockPeriod();\\n\\n    // Vault: cannot deposit 0\\n    error VaultCannotDeposit0();\\n\\n    // Vault: cannot sponsor 0\\n    error VaultCannotSponsor0();\\n\\n    // Vault: cannot deposit when yield is negative\\n    error VaultCannotDepositWhenYieldNegative();\\n\\n    // Vault: nothing to do\\n    error VaultNothingToDo();\\n\\n    // Vault: not enough to rebalance\\n    error VaultNotEnoughToRebalance();\\n\\n    // Vault: invalid vault\\n    error VaultInvalidVault();\\n\\n    // Vault: strategy has invested funds\\n    error VaultStrategyHasInvestedFunds();\\n\\n    // Vault: not enough funds\\n    error VaultNotEnoughFunds();\\n\\n    // Vault: amount too large\\n    error VaultAmountTooLarge();\\n\\n    // Vault: you are not allowed\\n    error VaultNotAllowed();\\n\\n    // Vault: amount is locked\\n    error VaultAmountLocked();\\n\\n    // Vault: deposit is locked\\n    error VaultDepositLocked();\\n\\n    // Vault: token id is not a sponsor\\n    error VaultNotSponsor();\\n\\n    // Vault: token id is not a deposit\\n    error VaultNotDeposit();\\n\\n    // Vault: claim percentage cannot be 0\\n    error VaultClaimPercentageCannotBe0();\\n\\n    // Vault: claims don't add up to 100%\\n    error VaultClaimsDontAddUp();\\n\\n    // Vault: you are not the owner of a deposit\\n    error VaultNotOwnerOfDeposit();\\n\\n    // Vault: cannot withdraw more than the available amount\\n    error VaultCannotWithdrawMoreThanAvailable();\\n\\n    // Vault: amount received does not match params\\n    error VaultAmountDoesNotMatchParams();\\n\\n    // Vault: cannot compute shares when there's no principal\\n    error VaultCannotComputeSharesWithoutPrincipal();\\n\\n    //\\n    // Strategy Errors\\n    //\\n\\n    // AnchorStrategy: owner is 0x\\n    error StrategyOwnerCannotBe0Address();\\n\\n    // AnchorStrategy: router is 0x\\n    error StrategyRouterCannotBe0Address();\\n\\n    // AnchorStrategy: ust is 0x\\n    error StrategyUnderlyingCannotBe0Address();\\n\\n    // AnchorStrategy: aUST is 0x\\n    error StrategyYieldTokenCannotBe0Address();\\n\\n    // AnchorStrategy: not an IVault\\n    error StrategyNotIVault();\\n\\n    // AnchorStrategy: caller is not manager\\n    error StrategyCallerNotManager();\\n\\n    // AnchorStrategy: amount is 0\\n    error StrategyAmountZero();\\n\\n    // AnchorStrategy: no ust exist\\n    error StrategyNoUST();\\n\\n    // AnchorStrategy: not running\\n    error StrategyNotRunning();\\n\\n    // AnchorStrategy: no aUST returned\\n    error StrategyNoAUSTReturned();\\n\\n    // AnchorStrategy: nothing redeemed\\n    error StrategyNothingRedeemed();\\n\\n    // AnchorStrategy: invalid aUST rate\\n    error StrategyInvalidAUSTRate();\\n}\\n\",\"keccak256\":\"0x92b0c0ed87d8c466b3d82b537ed9abc2f98ccf5fd2dca531e60ec9e390d0dee6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/curve/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface ICurve {\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa5cb0f4b8edec058e25ee9b914e15ab7f091757afc3c114a9fe983b2b4f69054\",\"license\":\"UNLICENSED\"},\"contracts/lib/PercentMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary PercentMath {\\n    // Divisor used for representing percentages\\n    uint256 public constant PCT_DIVISOR = 10000;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PCT_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPct(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PCT_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PCT_DIVISOR as the denominator\\n     */\\n    function pctOf(uint256 _amount, uint16 _fracNum)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount * _fracNum) / PCT_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Checks if a given number corresponds to 100%\\n     * @param _perc Percentage value to check, with PCT_DIVISOR\\n     */\\n    function is100Pct(uint256 _perc) internal pure returns (bool) {\\n        return _perc == PCT_DIVISOR;\\n    }\\n}\\n\",\"keccak256\":\"0x32815072f9bb38e6dfec91d348c3248a970f143bb98362df4f4d4fabe33baac6\",\"license\":\"UNLICENSED\"},\"contracts/strategy/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * Strategies can be plugged into vaults to invest and manage their underlying funds\\n *\\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault\\n *\\n * @notice It's up to the vault to decide how much to invest from the total pool\\n */\\ninterface IStrategy {\\n    //\\n    // Events\\n    //\\n\\n    event InitDepositStable(\\n        address indexed operator,\\n        uint256 indexed idx,\\n        uint256 underlyingAmount,\\n        uint256 ustAmount\\n    );\\n    event FinishDepositStable(\\n        address indexed operator,\\n        uint256 ustAmount,\\n        uint256 aUstAmount\\n    );\\n    event RearrangeDepositOperation(\\n        address indexed operatorFrom,\\n        address indexed operatorTo,\\n        uint256 indexed newIdx\\n    );\\n    event InitRedeemStable(\\n        address indexed operator,\\n        uint256 indexed idx,\\n        uint256 aUstAmount\\n    );\\n    event FinishRedeemStable(\\n        address indexed operator,\\n        uint256 aUstAmount,\\n        uint256 ustAmount,\\n        uint256 underlyingAmount\\n    );\\n    event RearrangeRedeemOperation(\\n        address indexed operatorFrom,\\n        address indexed operatorTo,\\n        uint256 indexed newIdx\\n    );\\n\\n    //\\n    // Structs\\n    //\\n\\n    struct Operation {\\n        address operator;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * The vault linked to this stragegy\\n     *\\n     * @return The vault's address\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * Withdraws all underlying back to vault.\\n     *\\n     * @notice If underlying is currently invested, this also starts the\\n     * cross-chain process to redeem it. After that is done, this function\\n     * should be called a second time to finish the withdrawal of that portion.\\n     */\\n    function withdrawAllToVault() external;\\n\\n    /**\\n     * Withdraws a specified amount back to the vault\\n     *\\n     * @notice Unlike `withdrawToVault`, this function only considers the\\n     * amount currently not invested, but only what is currently held by the\\n     * strategy\\n     *\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawToVault(uint256 amount) external;\\n\\n    /**\\n     * Amount, expressed in the underlying currency, currently in the strategy\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets() external view returns (uint256);\\n\\n    /**\\n     * Indicates if assets are invested into strategy or not.\\n     *\\n     * @notice this will be used when removing this strategy\\n     * @return true if assets invested, false if nothing invested.\\n     */\\n    function hasAssets() external view returns (bool);\\n\\n    /**\\n     * Initiates a deposit of all the currently held UST into EthAnchor\\n     *\\n     * @notice since EthAnchor uses an asynchronous model, this function\\n     * only starts the deposit process, but does not finish it.\\n     * Each EthAnchor deposit is handled by a different operator, so we store\\n     * an operator address to finish later.\\n     * We need to increase pendingDeposits to track correct underlying assets.\\n     */\\n    function invest() external;\\n}\\n\",\"keccak256\":\"0xfc52c49dc0284f22619e89b71f8af6af67b6dc3ed2869b5122f4762d75d30544\",\"license\":\"UNLICENSED\"},\"contracts/vault/CurveSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ICurve} from \\\"../interfaces/curve/ICurve.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// Helper abstract contract to manage curve swaps\\nabstract contract CurveSwapper {\\n    using SafeERC20 for IERC20;\\n\\n    /// Static 95% slippage (TODO should probably make this configurable)\\n    uint256 public constant SLIPPAGE = 99;\\n\\n    //\\n    // Structs\\n    //\\n\\n    struct Swapper {\\n        /// Curve pool instance\\n        ICurve pool;\\n        /// decimals in token\\n        uint8 tokenDecimals;\\n        /// decimals in underlying\\n        uint8 underlyingDecimals;\\n        /// index of the deposit token we want to exchange to/from underlying\\n        int128 tokenI;\\n        /// index of underlying used by the vault (presumably always UST)\\n        int128 underlyingI;\\n    }\\n\\n    struct SwapPoolParam {\\n        address token;\\n        address pool;\\n        int128 tokenI;\\n        int128 underlyingI;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    /// Emitted when a new swap pool is added\\n    event CurveSwapPoolAdded(\\n        address indexed token,\\n        address indexed pool,\\n        int128 tokenI,\\n        int128 underlyingI\\n    );\\n\\n    /// Emitted when a swap pool is removed\\n    event CurveSwapPoolRemoved(address indexed token);\\n\\n    /// Emitted after every swap\\n    event Swap(\\n        address indexed fromToken,\\n        address indexed toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    );\\n\\n    //\\n    // State\\n    //\\n\\n    /// token => curve pool (for trading token/underlying)\\n    mapping(address => Swapper) public swappers;\\n\\n    /// @return The address of the vault's main underlying token\\n    function getUnderlying() public view virtual returns (address);\\n\\n    /// Swaps a given amount of\\n    /// Only works if the pool has previously been inserted into the contract\\n    ///\\n    /// @param _token The token we want to swap into\\n    /// @param _amount The amount of underlying we want to swap\\n    /// TODO missing slippage checks\\n    function _swapIntoUnderlying(address _token, uint256 _amount)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        if (_token == getUnderlying()) {\\n            // same token, nothing to do\\n            return _amount;\\n        }\\n\\n        Swapper storage swapper = swappers[_token];\\n        require(\\n            address(swapper.pool) != address(0x0),\\n            \\\"non-existing swap pool\\\"\\n        );\\n\\n        uint256 minAmount = _calcMinDy(\\n            _amount,\\n            swapper.tokenDecimals,\\n            swapper.underlyingDecimals\\n        );\\n\\n        amount = swapper.pool.exchange_underlying(\\n            swapper.tokenI,\\n            swapper.underlyingI,\\n            _amount,\\n            minAmount\\n        );\\n\\n        emit Swap(_token, getUnderlying(), _amount, amount);\\n    }\\n\\n    /// Swaps a given amount of Underlying into a given token\\n    /// Only works if the pool has previously been inserted into the contract\\n    ///\\n    /// @param _token The token we want to swap into\\n    /// @param _amount The amount of underlying we want to swap\\n    /// TODO missing slippage checks\\n    function _swapFromUnderlying(address _token, uint256 _amount)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        if (_token == getUnderlying()) {\\n            // same token, nothing to do\\n            return _amount;\\n        }\\n\\n        Swapper storage swapper = swappers[_token];\\n\\n        uint256 minAmount = _calcMinDy(\\n            _amount,\\n            swapper.underlyingDecimals,\\n            swapper.tokenDecimals\\n        );\\n\\n        amount = swapper.pool.exchange_underlying(\\n            swapper.underlyingI,\\n            swapper.tokenI,\\n            _amount,\\n            minAmount\\n        );\\n\\n        emit Swap(getUnderlying(), _token, _amount, amount);\\n    }\\n\\n    function _calcMinDy(\\n        uint256 _amount,\\n        uint8 _fromDecimals,\\n        uint8 _toDecimals\\n    ) internal pure returns (uint256) {\\n        return\\n            (_amount * SLIPPAGE * 10**_toDecimals) / (10**_fromDecimals * 100);\\n    }\\n\\n    /// This is necessary because some tokens (USDT) force you to approve(0)\\n    /// before approving a new amount meaning if we always approved blindly,\\n    /// then we could get random failures on the second attempt\\n    function _approveIfNecessary(address _token, address _pool) internal {\\n        uint256 allowance = IERC20(_token).allowance(address(this), _pool);\\n\\n        if (allowance == 0) {\\n            IERC20(_token).safeApprove(_pool, type(uint256).max);\\n        }\\n    }\\n\\n    /// @param _swapPools configs for each swap pool\\n    function _addPools(SwapPoolParam[] memory _swapPools) internal {\\n        uint256 length = _swapPools.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            _addPool(_swapPools[i]);\\n        }\\n    }\\n\\n    function _addPool(SwapPoolParam memory _param) internal {\\n        require(\\n            address(swappers[_param.token].pool) == address(0),\\n            \\\"token already has a swap pool\\\"\\n        );\\n        require(\\n            ICurve(_param.pool).coins(uint256(uint128(_param.underlyingI))) ==\\n                getUnderlying(),\\n            \\\"_underlyingI does not match underlying token\\\"\\n        );\\n\\n        uint256 tokenDecimals = IERC20Metadata(_param.token).decimals();\\n        uint256 underlyingDecimals = IERC20Metadata(getUnderlying()).decimals();\\n\\n        // TODO check if _token and _underlyingIndex match the pool settings\\n        swappers[_param.token] = Swapper(\\n            ICurve(_param.pool),\\n            uint8(tokenDecimals),\\n            uint8(underlyingDecimals),\\n            _param.tokenI,\\n            _param.underlyingI\\n        );\\n\\n        _approveIfNecessary(getUnderlying(), address(_param.pool));\\n        _approveIfNecessary(_param.token, address(_param.pool));\\n\\n        emit CurveSwapPoolAdded(\\n            _param.token,\\n            _param.pool,\\n            _param.tokenI,\\n            _param.underlyingI\\n        );\\n    }\\n\\n    function _removePool(address _inputToken) internal {\\n        require(\\n            address(swappers[_inputToken].pool) != address(0),\\n            \\\"pool does not exist\\\"\\n        );\\n        delete swappers[_inputToken];\\n\\n        emit CurveSwapPoolRemoved(_inputToken);\\n    }\\n}\\n\",\"keccak256\":\"0x52a79747ec855b00d50d2d0f9abd95245c840322099111f830ce13b375e8ba07\",\"license\":\"UNLICENSED\"},\"contracts/vault/Depositors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport {IVault} from \\\"../vault/IVault.sol\\\";\\n\\ncontract Depositors is ERC721 {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIds;\\n    IVault public vault;\\n\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault), \\\"Depositors: not authorized\\\");\\n        _;\\n    }\\n\\n    constructor(IVault _vault) ERC721(\\\"\\\", \\\"\\\") {\\n        vault = _vault;\\n    }\\n\\n    function name() public view override(ERC721) returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"Sandclock\\\",\\n                    IERC20Metadata(address(vault.underlying())).name(),\\n                    \\\" - Depositors\\\"\\n                )\\n            );\\n    }\\n\\n    function symbol() public view override(ERC721) returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"QUARTZ-\\\",\\n                    IERC20Metadata(address(vault.underlying())).symbol(),\\n                    \\\"-DEP\\\"\\n                )\\n            );\\n    }\\n\\n    // should only be callable by the vault\\n    function mint(address _owner) external onlyVault returns (uint256) {\\n        _tokenIds.increment();\\n        uint256 localTokenId = _tokenIds.current();\\n\\n        _safeMint(_owner, localTokenId);\\n\\n        return localTokenId;\\n    }\\n\\n    // called when a deposit's principal is withdrawn\\n    function burn(uint256 _id) external onlyVault {\\n        _burn(_id);\\n    }\\n\\n    function exists(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xb2f0204487a263dfbd2bdd59f11d54aeec9078b07b0ee6c149390667198a48cc\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVault {\\n    //\\n    // Structs\\n    //\\n\\n    struct ClaimParams {\\n        uint16 pct;\\n        address beneficiary;\\n        bytes data;\\n    }\\n\\n    struct DepositParams {\\n        address inputToken;\\n        uint64 lockDuration;\\n        uint256 amount;\\n        ClaimParams[] claims;\\n        string name;\\n    }\\n\\n    struct Deposit {\\n        /// amount of the deposit\\n        uint256 amount;\\n        /// wallet of the claimer\\n        address claimerId;\\n        /// when can the deposit be withdrawn\\n        uint256 lockedUntil;\\n        /// the number of shares issued for this deposit\\n        uint256 shares;\\n    }\\n\\n    struct Claimer {\\n        uint256 totalPrincipal;\\n        uint256 totalShares;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    event DepositMinted(\\n        uint256 indexed id,\\n        uint256 groupId,\\n        uint256 amount,\\n        uint256 shares,\\n        address indexed depositor,\\n        address indexed claimer,\\n        address claimerId,\\n        uint64 lockedUntil,\\n        bytes data,\\n        string name\\n    );\\n\\n    event DepositWithdrawn(\\n        uint256 indexed id,\\n        uint256 shares,\\n        uint256 amount,\\n        address indexed to,\\n        bool burned\\n    );\\n\\n    event Invested(uint256 amount);\\n\\n    event Disinvested(uint256 amount);\\n\\n    event YieldClaimed(\\n        address claimerId,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 burnedShares,\\n        uint256 perfFee\\n    );\\n\\n    event FeeWithdrawn(uint256 amount);\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Update the invested amount;\\n     */\\n    function updateInvested() external;\\n\\n    /**\\n     * Calculate maximum investable amount and already invested amount\\n     *\\n     * @return maxInvestableAmount maximum investable amount\\n     * @return alreadyInvested already invested amount\\n     */\\n    function investState()\\n        external\\n        view\\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested);\\n\\n    /**\\n     * Percentage of the total underlying to invest in the strategy\\n     */\\n    function investPct() external view returns (uint16);\\n\\n    /**\\n     * Underlying ERC20 token accepted by the vault\\n     */\\n    function underlying() external view returns (IERC20Metadata);\\n\\n    /**\\n     * Minimum lock period for each deposit\\n     */\\n    function minLockPeriod() external view returns (uint64);\\n\\n    /**\\n     * Total amount of underlying currently controlled by the\\n     * vault and the its strategy.\\n     */\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /**\\n     * Total amount of shares\\n     */\\n    function totalShares() external view returns (uint256);\\n\\n    /**\\n     * Computes the amount of yield available for an an address.\\n     *\\n     * @param _to address to consider.\\n     *\\n     * @return claimable yield for @param _to, share of generated yield by @param _to,\\n     *      and performance fee from generated yield\\n     */\\n    function yieldFor(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * Accumulate performance fee and transfers rest yield generated for the caller to\\n     *\\n     * @param _to Address that will receive the yield.\\n     */\\n    function claimYield(address _to) external;\\n\\n    /**\\n     * Creates a new deposit\\n     *\\n     * @param _params Deposit params\\n     */\\n    function deposit(DepositParams calldata _params)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the expected amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function withdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * When the vault is underperforming it withdraws the funds with a loss.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function forceWithdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws any pending performance fee amount back to the treasury\\n     */\\n    function withdrawPerformanceFee() external;\\n}\\n\",\"keccak256\":\"0x7fc46e64e402b6be5cbff778d9e1cc7e48b2edc951440be46b092a2a844d2542\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVaultSettings.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface IVaultSettings {\\n    //\\n    // Events\\n    //\\n\\n    event InvestPctUpdated(uint256 percentage);\\n    event TreasuryUpdated(address indexed treasury);\\n    event PerfFeePctUpdated(uint16 pct);\\n    event StrategyUpdated(address indexed strategy);\\n    event InvestmentFeeEstimatePctUpdated(uint16 pct);\\n\\n    /**\\n     * Update invest percentage\\n     *\\n     * Emits {InvestPercentageUpdated} event\\n     *\\n     * @param _investPct the new invest percentage\\n     */\\n    function setInvestPct(uint16 _investPct) external;\\n\\n    /**\\n     * Changes the treasury used by the vault.\\n     *\\n     * @param _treasury the new strategy's address.\\n     */\\n    function setTreasury(address _treasury) external;\\n\\n    /**\\n     * Changes the performance fee used by the vault.\\n     *\\n     * @param _perfFeePct the new performance fee.\\n     */\\n    function setPerfFeePct(uint16 _perfFeePct) external;\\n\\n    /**\\n     * Changes the strategy used by the vault.\\n     *\\n     * @notice if there is invested funds in previous strategy, it is not allowed to set new strategy.\\n     * @param _strategy the new strategy's address.\\n     */\\n    function setStrategy(address _strategy) external;\\n\\n    /**\\n     * Changes the estimated investment fee used by the strategy.\\n     *\\n     * @param _pct the new investment fee estimated percentage.\\n     */\\n    function setInvestmentFeeEstimatePct(uint16 _pct) external;\\n}\\n\",\"keccak256\":\"0x452685d8b037b314f9e449cc8bc1d9cb02bc5ed7c638f9cc1ff168de3cabba2c\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVaultSponsoring.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface IVaultSponsoring {\\n    //\\n    // Events\\n    //\\n\\n    /// Emitted when a new sponsor deposit is created\\n    event Sponsored(\\n        uint256 indexed id,\\n        uint256 amount,\\n        address indexed depositor,\\n        uint256 lockedUntil\\n    );\\n\\n    /// Emitted when an existing sponsor withdraws\\n    event Unsponsored(uint256 indexed id);\\n\\n    /**\\n     * Total amount currently sponsored\\n     */\\n    function totalSponsored() external view returns (uint256);\\n\\n    /**\\n     * Creates a sponsored deposit with the amount provided in @param _amount.\\n     * Sponsored amounts will be invested like deposits, but unlike deposits\\n     * there are no claimers and the yield generated is donated to the vault.\\n     * The amount is locked until the timestamp specified in @param _lockedUntil.\\n     *\\n     * @param _inputToken The input token to deposit.\\n     * @param _amount Amount to sponsor.\\n     * @param _lockedUntil When the sponsor can unsponsor the amount.\\n     */\\n    function sponsor(\\n        address _inputToken,\\n        uint256 _amount,\\n        uint256 _lockedUntil\\n    ) external;\\n\\n    /**\\n     * Withdraws the sponsored amount for the deposits with the ids provided\\n     * in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the sponsored amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function unsponsor(address _to, uint256[] memory _ids) external;\\n}\\n\",\"keccak256\":\"0x682f2d4e90b8df88e8f7170c7d120ecdc0cd158e9e4c95ee93e365fc044728ae\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103785760003560e01c80638cad7fbe116101d3578063bd2e3ecd11610104578063e4020fdf116100a2578063f5eb42dc1161007c578063f5eb42dc146108af578063f6289887146108db578063f943c8a214610902578063fd6e92171461092257600080fd5b8063e4020fdf14610880578063eb0ebfbc14610893578063f0f442601461089c57600080fd5b8063c70920bc116100de578063c70920bc1461083d578063d547741f14610845578063d9db2b7714610858578063df6f9ba71461086d57600080fd5b8063bd2e3ecd146105b7578063c0ddb6921461080e578063c2d794441461081657600080fd5b8063a217fddf11610171578063aaa466881161014b578063aaa4668814610753578063ae2429df14610766578063b02c43d014610779578063bba97d33146107e057600080fd5b8063a217fddf14610717578063a2df37751461071f578063a8c62e761461074057600080fd5b80639816f473116101ad5780639816f473146106d1578063999927df146106e7578063a164c25d146106fa578063a1ac20eb1461070457600080fd5b80638cad7fbe146105ef57806391d148541461068557806395854b1a146106be57600080fd5b80634b1533b2116102ad5780636f307dc31161024b57806376490b561161022557806376490b56146105b75780637e4b8da0146105c15780638293744b146105d45780638456cb59146105e757600080fd5b80636f307dc31461053857806373ae54b51461055057806376082a5e1461059057600080fd5b8063563233f611610287578063563233f6146104c65780635c975abb146104d957806361d027b3146104e457806361e20a1c1461050f57600080fd5b80634b1533b2146104ad5780634e813ac4146104b65780634fc78d68146104be57600080fd5b806336568abe1161031a5780633b7d0946116102f45780633b7d0946146104775780633ba52fc61461048a5780633f383236146104925780633f4ba83a146104a557600080fd5b806336568abe1461045357806336b4134a146104665780633a98ef391461046e57600080fd5b806319d3ee3d1161035657806319d3ee3d146103fe578063248a9ca3146104075780632f2ff15d1461042b57806333a100ca1461044057600080fd5b806301ffc9a71461037d5780631325d5f1146103a557806313f6686d146103c2575b600080fd5b61039061038b366004614007565b610937565b60405190151581526020015b60405180910390f35b6103b4670de0b6b3a764000081565b60405190815260200161039c565b6103e96103d0366004614046565b600a602052600090815260409020805460019091015482565b6040805192835260208301919091520161039c565b6103b4600d5481565b6103b4610415366004614063565b6000908152600160208190526040909120015490565b61043e61043936600461407c565b6109af565b005b61043e61044e366004614046565b6109db565b61043e61046136600461407c565b610bfa565b6103b4606381565b6103b460055481565b61043e610485366004614046565b610c8b565b61043e610ca0565b61043e6104a0366004614133565b610d5f565b61043e610d74565b6103b4600b5481565b6103e9610d8b565b61043e610e48565b61043e6104d43660046141c6565b6110fc565b60035460ff16610390565b600c546104f7906001600160a01b031681565b6040516001600160a01b03909116815260200161039c565b6103b461051d366004614046565b6001600160a01b03166000908152600a602052604090205490565b6003546104f79061010090046001600160a01b031681565b6105777f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff909116815260200161039c565b6103b47fb165298935924f540e4181c03493a5d686c54a0aaeb3f6216de85b7ffbba773881565b61057762dd7c0081565b61043e6105cf36600461422d565b6111d9565b61043e6105e23660046142b0565b61126f565b61043e611303565b6106466105fd366004614046565b600060208190529081526040902080546001909101546001600160a01b0382169160ff600160a01b8204811692600160a81b9092041690600f81810b91600160801b9004900b85565b604080516001600160a01b03909616865260ff94851660208701529390921692840192909252600f91820b6060840152900b608082015260a00161039c565b61039061069336600461407c565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61043e6106cc366004614305565b611317565b60035461010090046001600160a01b03166104f7565b61043e6106f5366004614046565b6115b7565b6105776212750081565b61043e6107123660046141c6565b61172b565b6103b4600081565b600e5461072d9061ffff1681565b60405161ffff909116815260200161039c565b6006546104f7906001600160a01b031681565b6007546104f7906001600160a01b031681565b61043e6107743660046141c6565b61180a565b6107b8610787366004614063565b600960205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169184565b604080519485526001600160a01b03909316602085015291830152606082015260800161039c565b6107f36107ee366004614046565b6118b9565b6040805193845260208401929092529082015260600161039c565b6103b461197f565b6103b47f1597bc5e34ff090612f53164e4e642d2ab4fc78bffe19ed1b602a0d12559561a81565b6103b46119c2565b61043e61085336600461407c565b611b3c565b600c5461072d90600160a01b900461ffff1681565b61043e61087b3660046142b0565b611b63565b61043e61088e3660046142b0565b611bed565b6103b460045481565b61043e6108aa366004614046565b611c75565b6103b46108bd366004614046565b6001600160a01b03166000908152600a602052604090206001015490565b6103b47ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309581565b61091561091036600461433a565b611d38565b60405161039c9190614375565b60035461072d90600160a81b900461ffff1681565b60006001600160e01b031982167fa00d912c00000000000000000000000000000000000000000000000000000000148061099a57506001600160e01b031982167f9a89fb7900000000000000000000000000000000000000000000000000000000145b806109a957506109a98261211a565b92915050565b600082815260016020819052604090912001546109cc8133612181565b6109d68383612201565b505050565b7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf603095610a068133612181565b6001600160a01b038216610a2d57604051634f08b3f360e11b815260040160405180910390fd5b306001600160a01b0316826001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9991906143b9565b6001600160a01b031614610ad9576040517f0251bab500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546001600160a01b031615801590610b6b5750600660009054906101000a90046001600160a01b03166001600160a01b0316635be9b2d36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6591906143d6565b15156001145b15610ba2576040517fd28a9fdb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f4da9c22c924692646a21cf1f423781ae3285198dc22e8a6912835d3272b90b3c90600090a25050565b6001600160a01b0381163314610c7d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b610c878282612288565b5050565b6000610c978133612181565b610c878261230b565b7fb165298935924f540e4181c03493a5d686c54a0aaeb3f6216de85b7ffbba7738610ccb8133612181565b600d5480610d05576040517f0a33934000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600d556040518181527fb7eeacba6b133788365610e83d3f130d07b6ef6e78877961f25b3f61fcba07529060200160405180910390a1600c54600354610c87916001600160a01b0361010090920482169116836123df565b6000610d6b8133612181565b610c8782612428565b6000610d808133612181565b610d8861283c565b50565b60065460009081906001600160a01b0316610da95750600091829150565b600354610dc990600160a81b900461ffff16610dc36119c2565b906128d8565b9150600660009054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4291906143f8565b90509091565b7fb165298935924f540e4181c03493a5d686c54a0aaeb3f6216de85b7ffbba7738610e738133612181565b6006546001600160a01b0316610e9c57604051634f08b3f360e11b815260040160405180910390fd5b600080610ea7610d8b565b9150915080821415610ee5576040517ff096593000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81811115610ff2576000610ef98383614427565b90507f0000000000000000000000000000000000000000000000000000000000000000811015610f3c57604051630e33bdb760e11b815260040160405180910390fd5b6006546040517fce8c42e8000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063ce8c42e890602401600060405180830381600087803b158015610f9b57600080fd5b505af1158015610faf573d6000803e3d6000fd5b505050507ff7e72e2f53a982a67fc999c00edfd87a94bdf99e5031c74851276cfd65b0bd2981604051610fe491815260200190565b60405180910390a150505050565b6000610ffe8284614427565b90507f000000000000000000000000000000000000000000000000000000000000000081101561104157604051630e33bdb760e11b815260040160405180910390fd5b600654600354611063916001600160a01b0361010090920482169116836123df565b600660009054906101000a90046001600160a01b03166001600160a01b031663e8b5e51f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110b357600080fd5b505af11580156110c7573d6000803e3d6000fd5b505050507fac9f7997c30b6a3cc9c74953898b5de154359339c7ec0d6d70ceb98e55db1a4b81604051610fe491815260200190565b7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf6030956111278133612181565b61ffff82166127101015611167576040517fd25b1e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c80547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8516908102919091179091556040519081527f16de0efbdf16c568a60b65978ed774bba4e0c179de55ab8f639527e41fd0c861906020015b60405180910390a15050565b60028054141561122b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c74565b600280556001600160a01b0385166112565760405163f95106ab60e01b815260040160405180910390fd5b61126385858585856128f5565b50506001600255505050565b6002805414156112c15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c74565b600280556001600160a01b0383166112ec5760405163f95106ab60e01b815260040160405180910390fd5b6112f98383836000612a14565b5050600160025550565b600061130f8133612181565b610d88612ace565b6002805414156113695760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c74565b600280557f1597bc5e34ff090612f53164e4e642d2ab4fc78bffe19ed1b602a0d12559561a6113988133612181565b60035460ff16156113de5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c74565b82611415576040517ff712805800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62127500821080611428575062dd7c0082115b1561144657604051636235acd960e01b815260040160405180910390fd5b6000611452428461443e565b6007546040516335313c2160e11b81523360048201529192506000916001600160a01b0390911690636a627842906024016020604051808303816000875af11580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c691906143f8565b90506114d3338787612b49565b60006114df8787612c81565b6040805160808101825282815260006020808301828152838501898152606085018481528985526009909352948320935184555160018401805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905592516002830155915160039091015560048054929350839290919061156790849061443e565b90915550506040805182815260208101859052339184917f7ca3497675c6d3ec00b1edc13b8e0b06169ee96a663ab25a74af7da53378f09e910160405180910390a3505060016002555050505050565b6002805414156116095760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c74565b600280556001600160a01b0381166116345760405163f95106ab60e01b815260040160405180910390fd5b6000806000611642336118b9565b925092509250826000141561165957505050611723565b80600d600082825461166b919061443e565b909155505060035461168c9061010090046001600160a01b031685856123df565b336000908152600a6020526040812060010180548492906116ae908490614427565b9250508190555081600560008282546116c79190614427565b90915550506040805133815260208101859052908101839052606081018290526001600160a01b038516907ffa22d6d2516c29580a099aeb9e2139fab5b3c85f2480f1f6942e891c41227bb29060800160405180910390a25050505b506001600255565b7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf6030956117568133612181565b61ffff82166127101015611796576040517f870e44a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405161ffff831681527f40775ca73a6e168d23747bc0200694cf7c99ad2db624d04c095cb59899011a569060200160405180910390a1506003805461ffff909216600160a81b027fffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffff909216919091179055565b7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf6030956118358133612181565b61ffff82166127101015611875576040517ff510aa5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e805461ffff191661ffff84169081179091556040519081527f6d570506e60babca07baff6cf76452a48224e8d5a770f781df3f1ff2b62abc5b906020016111cd565b6001600160a01b0381166000908152600a60205260408120805460019091015460055483928392909183906118f79083906118f261197f565b612e3e565b9050828111611913576000806000955095509550505050611978565b600061191f8483614427565b90506119358160055461193061197f565b612e76565b95506000611948876005546118f261197f565b600c54909150611964908290600160a01b900461ffff166128d8565b95506119708682614427565b975050505050505b9193909250565b60008061198a6119c2565b90506000600d5460045461199e919061443e565b9050818111156119b15760009250505090565b6119bb8183614427565b9250505090565b6006546000906001600160a01b031615611acc57600660009054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4d91906143f8565b6003546040516370a0823160e01b81523060048201526101009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015611a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abd91906143f8565b611ac7919061443e565b905090565b6003546040516370a0823160e01b81523060048201526101009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015611b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac791906143f8565b60008281526001602081905260409091200154611b598133612181565b6109d68383612288565b600280541415611bb55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c74565b600280556001600160a01b038316611be05760405163f95106ab60e01b815260040160405180910390fd5b6112f98383836001612a14565b600280541415611c3f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c74565b600280556001600160a01b038316611c6a5760405163f95106ab60e01b815260040160405180910390fd5b6112f9838383612ee5565b7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf603095611ca08133612181565b6001600160a01b038216611ce0576040517f6b5e63d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190600090a25050565b6060600280541415611d8c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c74565b6002805560035460ff1615611dd65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c74565b6040820135611e11576040517fab59997c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016611e4c6040840160208501614456565b67ffffffffffffffff161080611e7d575062dd7c00611e716040840160208501614456565b67ffffffffffffffff16115b15611e9b57604051636235acd960e01b815260040160405180910390fd5b6000611ea8600b546131b4565b90506000611eb461197f565b905080821115611ef0576040517f08063cab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f0b33611f016020870187614046565b8660400135612b49565b6000611f27611f1d6020870187614046565b8660400135612c81565b9050600042611f3c6040880160208901614456565b611f469190614480565b9050611f6d838383611f5b60608b018b6144ac565b611f6860808d018d6144f6565b6131d3565b60016002559695505050505050565b612710101590565b801580611ffe5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffc91906143f8565b155b6120705760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610c74565b6040516001600160a01b0383166024820152604481018290526109d69084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526133f6565b606061211084846000856134db565b90505b9392505050565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806109a957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146109a9565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16610c87576121bf816001600160a01b0316601461361a565b6121ca83602061361a565b6040516020016121db929190614569565b60408051601f198184030181529082905262461bcd60e51b8252610c7491600401614616565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16610c875760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1615610c875760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03818116600090815260208190526040902054166123725760405162461bcd60e51b815260206004820152601360248201527f706f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610c74565b6001600160a01b03811660008181526020819052604080822080547fffffffffffffffffffff00000000000000000000000000000000000000000000168155600101829055517f94be23730c4398d20227f4e457cf92307b13e5956f2a958e2e368ad44e2f826b9190a250565b6040516001600160a01b0383166024820152604481018290526109d69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016120b5565b80516001600160a01b0390811660009081526020819052604090205416156124925760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e20616c7265616479206861732061207377617020706f6f6c0000006044820152606401610c74565b60035461010090046001600160a01b03166001600160a01b031681602001516001600160a01b031663c661065783606001516fffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016124f491815260200190565b602060405180830381865afa158015612511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253591906143b9565b6001600160a01b0316146125b15760405162461bcd60e51b815260206004820152602c60248201527f5f756e6465726c79696e674920646f6573206e6f74206d6174636820756e646560448201527f726c79696e6720746f6b656e00000000000000000000000000000000000000006064820152608401610c74565b600081600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126199190614629565b60ff16905060006126386003546001600160a01b036101009091041690565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126999190614629565b6040805160a0810182526020808701516001600160a01b03908116835260ff8781168385019081529581168486018181528a870151600f90810b60608089019182528d015190910b608088019081528c5186166000908152968790529790952095518654985191518416600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff92909416600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090991694169390931796909617919091161782555191516fffffffffffffffffffffffffffffffff908116600160801b0292169190911760019091015590506127b96127af6003546001600160a01b036101009091041690565b84602001516137fb565b6127cb836000015184602001516137fb565b82602001516001600160a01b031683600001516001600160a01b03167f1576b5fcfa863788d9ef6558cab7aa68d4b48c44eb7bacaf1a8ac6d6b9d26f948560400151866060015160405161282f929190600f92830b8152910b602082015260400190565b60405180910390a3505050565b60035460ff1661288e5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c74565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006127106128eb61ffff84168561464c565b612113919061466b565b600554600061290261197f565b9050600085815b818110156129ec57600960008a8a848181106129275761292761468d565b905060200201358152602001908152602001600020600001548787838181106129525761295261468d565b905060200201351115612991576040517fab37226a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6129d08989838181106129a6576129a661468d565b9050602002013586868d60008c8c888181106129c4576129c461468d565b9050602002013561388c565b6129da908461443e565b92506129e5816146a3565b9050612909565b50600354612a099061010090046001600160a01b03168a846123df565b505050505050505050565b6005546000612a2161197f565b9050600084815b81811015612aa7576000600960008a8a85818110612a4857612a4861468d565b905060200201358152602001908152602001600020600001549050612a89898984818110612a7857612a7861468d565b9050602002013587878d8b8661388c565b612a93908561443e565b93505080612aa0906146a3565b9050612a28565b50600354612ac49061010090046001600160a01b031689846123df565b5050505050505050565b60035460ff1615612b145760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c74565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586128bb3390565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb491906143f8565b9050612bcb6001600160a01b038416853085613ce2565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3691906143f8565b9050612c42838361443e565b8114612c7a576040517f2a25a38b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6003546000906001600160a01b03848116610100909204161415612ca65750806109a9565b6001600160a01b0380841660009081526020819052604090208054909116612d105760405162461bcd60e51b815260206004820152601660248201527f6e6f6e2d6578697374696e67207377617020706f6f6c000000000000000000006044820152606401610c74565b8054600090612d3490859060ff600160a01b8204811691600160a81b900416613d39565b825460018401546040517fa6417ed6000000000000000000000000000000000000000000000000000000008152600f82810b6004830152600160801b90920490910b602482015260448101879052606481018390529192506001600160a01b03169063a6417ed6906084016020604051808303816000875af1158015612dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de291906143f8565b60035460408051878152602081018490529295506001600160a01b03610100909204821692918816917ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235910160405180910390a3505092915050565b6000831580612e4b575082155b80612e54575081155b15612e6157506000612113565b82612e6c858461464c565b612110919061466b565b600083612e8557506000612113565b82612ea357612e9c670de0b6b3a76400008561464c565b9050612113565b81612eda576040517ff91b6e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81612e6c848661464c565b600081815b818160ff16101561313657600085858360ff16818110612f0c57612f0c61468d565b60209081029290920135600081815260098452604080822081516080810183528154815260018201546001600160a01b039081169782018890526002830154828501819052600390930154606083015260075493516331a9108f60e11b81526004810187905295985090969195509093911690636352211e90602401602060405180830381865afa158015612fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc991906143b9565b84519091506001600160a01b0382163314613010576040517f5040aaa300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4284111561304a576040517f4cf1715e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0383161561308b576040517f6f15ccf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613095818a61443e565b600754604051630852cd8d60e31b815260048101899052919a506001600160a01b0316906342966c6890602401600060405180830381600087803b1580156130dc57600080fd5b505af11580156130f0573d6000803e3d6000fd5b50506040518892507f05394e48d744e4a16d65f52f88cdaf0f60f5d18af259df878d44cb80826d221f9150600090a25050505050508061312f906146be565b9050612eea565b50816131406119c2565b811115613179576040517fbf08573200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826004600082825461318b9190614427565b90915550506003546131ac9061010090046001600160a01b031687836123df565b505050505050565b600e546000906131c990839061ffff166128d8565b6109a99083614427565b6040805160c08101825260055481526020810189905260085491810191909152600060608281018290526080830182905260a0830186905291908567ffffffffffffffff811115613226576132266140ac565b60405190808252806020026020018201604052801561324f578160200160208202803683370190505b50905060005b8260a001518110156133895760008888838181106132755761327561468d565b905060200281019061328791906146de565b613290906146fe565b805190915061ffff166132cf576040517f4f287e5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018560a001516132e29190614427565b83146132fa5781516132f5908d906128d8565b613309565b6080850151613309908d614427565b90506133278560400151828d8589600001518a602001518e8e613d71565b8484815181106133395761333961468d565b602090810291909101015281516060860180516133579083906147be565b61ffff1690525060808501805182919061337290839061443e565b90525061338291508290506146a3565b9050613255565b5061339d826060015161ffff166127101490565b6133d3576040517fd7b03e8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880549060006133e3836146a3565b90915550909a9950505050505050505050565b600061344b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121019092919063ffffffff16565b8051909150156109d6578080602001905181019061346991906143d6565b6109d65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c74565b6060824710156135535760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c74565b843b6135a15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c74565b600080866001600160a01b031685876040516135bd91906147db565b60006040518083038185875af1925050503d80600081146135fa576040519150601f19603f3d011682016040523d82523d6000602084013e6135ff565b606091505b509150915061360f828286613fce565b979650505050505050565b6060600061362983600261464c565b61363490600261443e565b67ffffffffffffffff81111561364c5761364c6140ac565b6040519080825280601f01601f191660200182016040528015613676576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106136ad576136ad61468d565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106136f8576136f861468d565b60200101906001600160f81b031916908160001a905350600061371c84600261464c565b61372790600161443e565b90505b60018111156137ac577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106137685761376861468d565b1a60f81b82828151811061377e5761377e61468d565b60200101906001600160f81b031916908160001a90535060049490941c936137a5816147ed565b905061372a565b5083156121135760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c74565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e90604401602060405180830381865afa15801561384b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386f91906143f8565b9050806109d6576109d66001600160a01b03841683600019611f84565b6007546040516331a9108f60e11b81526004810188905260009133916001600160a01b0390911690636352211e90602401602060405180830381865afa1580156138da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138fe91906143b9565b6001600160a01b03161461393e576040517fff40736100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008781526009602090815260408083208151608081018352815481526001808301546001600160a01b0316828601819052600284015483860190815260039094015460608401528652600a855294839020835180850190945280548452909401549282019290925290514210156139e2576040517f0f6268c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208201516001600160a01b0316613a26576040517fde8b700400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815180851490600090613a3a908b8b612e76565b9050600082613a5357613a4e878c8c612e76565b613a55565b815b905060008560600151831180613a6e5750846020015183115b9050838015613a7a5750885b8015613a835750805b15613aaa5784516020860151613a99908a61464c565b613aa3919061466b565b9150613ae2565b8015613ae2576040517fb79a3bc200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808701516001600160a01b03166000908152600a909152604081206001018054849290613b12908490614427565b90915550506020808701516001600160a01b03166000908152600a9091526040812080548a9290613b44908490614427565b925050819055508160056000828254613b5d9190614427565b9250508190555087600b6000828254613b769190614427565b90915550508315613c1f57600754604051630852cd8d60e31b8152600481018f90526001600160a01b03909116906342966c6890602401600060405180830381600087803b158015613bc757600080fd5b505af1158015613bdb573d6000803e3d6000fd5b50505060008e815260096020526040812081815560018101805473ffffffffffffffffffffffffffffffffffffffff19169055600281018290556003015550613c69565b60008d81526009602052604081206003018054849290613c40908490614427565b909155505060008d815260096020526040812080548a9290613c63908490614427565b90915550505b6000613c76838e8e612e3e565b90508a6001600160a01b03168e7f14e79002ce0df3ba4381425c583d4c9984c7e2910d3e7e088377db997773153e858489604051613cc99392919092835260208301919091521515604082015260600190565b60405180910390a39d9c50505050505050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052613d339085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016120b5565b50505050565b6000613d4683600a6148e8565b613d5190606461464c565b613d5c83600a6148e8565b613d6760638761464c565b612e6c919061464c565b6000806040518060600160405280613d8a8b8989612e76565b81526020898101516001600160a01b0390811691830191909152600754604080516335313c2160e11b8152336004820152930192911690636a627842906024016020604051808303816000875af1158015613de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e0d91906143f8565b905280516020808301516001600160a01b03166000908152600a9091526040812060010180549394509192613e4390849061443e565b90915550506020808201516001600160a01b03166000908152600a9091526040812080548b9290613e7590849061443e565b9091555050805160058054600090613e8e90849061443e565b9250508190555088600b6000828254613ea7919061443e565b9250508190555060405180608001604052808a815260200182602001516001600160a01b031681526020018967ffffffffffffffff168152602001826000015181525060096000836040015181526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015590505086602001516001600160a01b0316336001600160a01b031682604001517fb26a67c96199378f459c394f9a442f1a94d19837d1ac17c14e3d6366d98223088d8d866000015187602001518f8f604001518d8d604051613fb59897969594939291906148f7565b60405180910390a4604001519998505050505050505050565b60608315613fdd575081612113565b825115613fed5782518084602001fd5b8160405162461bcd60e51b8152600401610c749190614616565b60006020828403121561401957600080fd5b81356001600160e01b03198116811461211357600080fd5b6001600160a01b0381168114610d8857600080fd5b60006020828403121561405857600080fd5b813561211381614031565b60006020828403121561407557600080fd5b5035919050565b6000806040838503121561408f57600080fd5b8235915060208301356140a181614031565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156140e5576140e56140ac565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614114576141146140ac565b604052919050565b8035600f81900b811461412e57600080fd5b919050565b60006080828403121561414557600080fd5b6040516080810181811067ffffffffffffffff82111715614168576141686140ac565b604052823561417681614031565b8152602083013561418681614031565b60208201526141976040840161411c565b60408201526141a86060840161411c565b60608201529392505050565b803561ffff8116811461412e57600080fd5b6000602082840312156141d857600080fd5b612113826141b4565b60008083601f8401126141f357600080fd5b50813567ffffffffffffffff81111561420b57600080fd5b6020830191508360208260051b850101111561422657600080fd5b9250929050565b60008060008060006060868803121561424557600080fd5b853561425081614031565b9450602086013567ffffffffffffffff8082111561426d57600080fd5b61427989838a016141e1565b9096509450604088013591508082111561429257600080fd5b5061429f888289016141e1565b969995985093965092949392505050565b6000806000604084860312156142c557600080fd5b83356142d081614031565b9250602084013567ffffffffffffffff8111156142ec57600080fd5b6142f8868287016141e1565b9497909650939450505050565b60008060006060848603121561431a57600080fd5b833561432581614031565b95602085013595506040909401359392505050565b60006020828403121561434c57600080fd5b813567ffffffffffffffff81111561436357600080fd5b820160a0818503121561211357600080fd5b6020808252825182820181905260009190848201906040850190845b818110156143ad57835183529284019291840191600101614391565b50909695505050505050565b6000602082840312156143cb57600080fd5b815161211381614031565b6000602082840312156143e857600080fd5b8151801515811461211357600080fd5b60006020828403121561440a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561443957614439614411565b500390565b6000821982111561445157614451614411565b500190565b60006020828403121561446857600080fd5b813567ffffffffffffffff8116811461211357600080fd5b600067ffffffffffffffff8083168185168083038211156144a3576144a3614411565b01949350505050565b6000808335601e198436030181126144c357600080fd5b83018035915067ffffffffffffffff8211156144de57600080fd5b6020019150600581901b360382131561422657600080fd5b6000808335601e1984360301811261450d57600080fd5b83018035915067ffffffffffffffff82111561452857600080fd5b60200191503681900382131561422657600080fd5b60005b83811015614558578181015183820152602001614540565b83811115613d335750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516145a181601785016020880161453d565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516145de81602884016020880161453d565b01602801949350505050565b6000815180845261460281602086016020860161453d565b601f01601f19169290920160200192915050565b60208152600061211360208301846145ea565b60006020828403121561463b57600080fd5b815160ff8116811461211357600080fd5b600081600019048311821515161561466657614666614411565b500290565b60008261468857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006000198214156146b7576146b7614411565b5060010190565b600060ff821660ff8114156146d5576146d5614411565b60010192915050565b60008235605e198336030181126146f457600080fd5b9190910192915050565b60006060823603121561471057600080fd5b6147186140c2565b614721836141b4565b815260208084013561473281614031565b82820152604084013567ffffffffffffffff8082111561475157600080fd5b9085019036601f83011261476457600080fd5b813581811115614776576147766140ac565b614788601f8201601f191685016140eb565b9150808252368482850101111561479e57600080fd5b808484018584013760009082019093019290925250604082015292915050565b600061ffff8083168185168083038211156144a3576144a3614411565b600082516146f481846020870161453d565b6000816147fc576147fc614411565b506000190190565b600181815b8085111561483f57816000190482111561482557614825614411565b8085161561483257918102915b93841c9390800290614809565b509250929050565b600082614856575060016109a9565b81614863575060006109a9565b816001811461487957600281146148835761489f565b60019150506109a9565b60ff84111561489457614894614411565b50506001821b6109a9565b5060208310610133831016604e8410600b84101617156148c2575081810a6109a9565b6148cc8383614804565b80600019048211156148e0576148e0614411565b029392505050565b600061211360ff841683614847565b8881528760208201528660408201526001600160a01b038616606082015267ffffffffffffffff8516608082015260e060a0820152600061493b60e08301866145ea565b82810360c0840152838152838560208301376000602085830101526020601f19601f860116820101915050999850505050505050505056fea2646970667358221220565abb818bd082dc782f4a99f0b4545eb5c31ea8812be58ab560470426c5555064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool((address,address,int128,int128))": {
        "params": {
          "_param": "Swap pool params"
        }
      },
      "claimYield(address)": {
        "params": {
          "_to": "Address that will receive the yield."
        }
      },
      "constructor": {
        "params": {
          "_investPct": "Percentage of the total underlying to invest in the strategy",
          "_investmentFeeEstimatePct": "Estimated fee charged when investing through the strategy",
          "_minLockPeriod": "Minimum lock period to deposit",
          "_owner": "Vault admin address",
          "_perfFeePct": "Performance fee percentage",
          "_swapPools": "Swap pools used to automatically convert tokens to underlying",
          "_treasury": "Treasury address to collect performance fee",
          "_underlying": "Underlying ERC20 token to use."
        }
      },
      "deposit((address,uint64,uint256,(uint16,address,bytes)[],string))": {
        "params": {
          "_params": "Deposit params"
        }
      },
      "forceWithdraw(address,uint256[])": {
        "params": {
          "_ids": "Array with the ids of the deposits.",
          "_to": "Address that will receive the funds."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getUnderlying()": {
        "returns": {
          "_0": "The address of the vault's main underlying token"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "investState()": {
        "returns": {
          "alreadyInvested": "already invested amount",
          "maxInvestableAmount": "maximum investable amount"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removePool(address)": {
        "params": {
          "_inputToken": "the token to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setInvestPct(uint16)": {
        "params": {
          "_investPct": "the new invest percentage"
        }
      },
      "setInvestmentFeeEstimatePct(uint16)": {
        "params": {
          "_pct": "the new investment fee estimated percentage."
        }
      },
      "setPerfFeePct(uint16)": {
        "params": {
          "_perfFeePct": "the new performance fee."
        }
      },
      "setStrategy(address)": {
        "params": {
          "_strategy": "the new strategy's address."
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "the new strategy's address."
        }
      },
      "sponsor(address,uint256,uint256)": {
        "params": {
          "_amount": "Amount to sponsor.",
          "_inputToken": "The input token to deposit.",
          "_lockedUntil": "When the sponsor can unsponsor the amount."
        }
      },
      "totalUnderlyingMinusSponsored()": {
        "returns": {
          "_0": "Total amount of principal and yield help by the vault (not including sponsored amount and performance fee)."
        }
      },
      "unsponsor(address,uint256[])": {
        "params": {
          "_ids": "Array with the ids of the deposits.",
          "_to": "Address that will receive the funds."
        }
      },
      "withdraw(address,uint256[])": {
        "params": {
          "_ids": "Array with the ids of the deposits.",
          "_to": "Address that will receive the funds."
        }
      },
      "yieldFor(address)": {
        "params": {
          "_to": "address to consider."
        },
        "returns": {
          "claimableYield": "claimable yield for @param _to, share of generated yield by @param _to,      and performance fee from generated yield"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CurveSwapPoolAdded(address,address,int128,int128)": {
        "notice": "Emitted when a new swap pool is added"
      },
      "CurveSwapPoolRemoved(address)": {
        "notice": "Emitted when a swap pool is removed"
      },
      "Sponsored(uint256,uint256,address,uint256)": {
        "notice": "Emitted when a new sponsor deposit is created"
      },
      "Swap(address,address,uint256,uint256)": {
        "notice": "Emitted after every swap"
      },
      "Unsponsored(uint256)": {
        "notice": "Emitted when an existing sponsor withdraws"
      }
    },
    "kind": "user",
    "methods": {
      "INVESTOR_ROLE()": {
        "notice": "Role allowed to invest/desinvest from strategy"
      },
      "MAX_DEPOSIT_LOCK_DURATION()": {
        "notice": "Maximum lock for each deposit"
      },
      "MAX_SPONSOR_LOCK_DURATION()": {
        "notice": "Maximum lock for each sponsor"
      },
      "MIN_SPONSOR_LOCK_DURATION()": {
        "notice": "Minimum lock for each sponsor"
      },
      "SETTINGS_ROLE()": {
        "notice": "Role allowed to change settings such as performance fee and investment fee"
      },
      "SHARES_MULTIPLIER()": {
        "notice": "Helper constant for computing shares without losing precision"
      },
      "SLIPPAGE()": {
        "notice": "Static 95% slippage (TODO should probably make this configurable)"
      },
      "SPONSOR_ROLE()": {
        "notice": "Role for sponsors allowed to call sponsor/unsponsor"
      },
      "accumulatedPerfFee()": {
        "notice": "Current accumulated performance fee;"
      },
      "addPool((address,address,int128,int128))": {
        "notice": "Adds a new curve swap pool from an input token to {underlying}"
      },
      "claimYield(address)": {
        "notice": "Accumulate performance fee and transfers rest yield generated for the caller to"
      },
      "claimer(address)": {
        "notice": "claimer address => claimer data"
      },
      "deposit((address,uint64,uint256,(uint16,address,bytes)[],string))": {
        "notice": "Creates a new deposit"
      },
      "depositors()": {
        "notice": "Depositors, represented as an NFT per deposit"
      },
      "deposits(uint256)": {
        "notice": "deposit NFT ID => deposit data"
      },
      "investPct()": {
        "notice": "Percentage of the total underlying to invest in the strategy"
      },
      "investState()": {
        "notice": "Calculate maximum investable amount and already invested amount"
      },
      "investmentFeeEstimatePct()": {
        "notice": "Investment fee pct"
      },
      "minLockPeriod()": {
        "notice": "Minimum lock period for each deposit"
      },
      "perfFeePct()": {
        "notice": "Performance fee percentage"
      },
      "removePool(address)": {
        "notice": "Removes an existing swap pool, and the ability to deposit the given token as underlying"
      },
      "setInvestPct(uint16)": {
        "notice": "Update invest percentage Emits {InvestPercentageUpdated} event"
      },
      "setInvestmentFeeEstimatePct(uint16)": {
        "notice": "Changes the estimated investment fee used by the strategy."
      },
      "setPerfFeePct(uint16)": {
        "notice": "Changes the performance fee used by the vault."
      },
      "setStrategy(address)": {
        "notice": "Changes the strategy used by the vault.if there is invested funds in previous strategy, it is not allowed to set new strategy."
      },
      "setTreasury(address)": {
        "notice": "Changes the treasury used by the vault."
      },
      "strategy()": {
        "notice": "The investment strategy"
      },
      "swappers(address)": {
        "notice": "token => curve pool (for trading token/underlying)"
      },
      "totalPrincipal()": {
        "notice": "The total of principal deposited"
      },
      "totalShares()": {
        "notice": "Total amount of shares"
      },
      "totalSponsored()": {
        "notice": "Total amount currently sponsored"
      },
      "totalUnderlying()": {
        "notice": "Total amount of underlying currently controlled by the vault and the its strategy."
      },
      "totalUnderlyingMinusSponsored()": {
        "notice": "Computes the total amount of principal + yield currently controlled by the vault and the strategy. The principal + yield is the total amount of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee."
      },
      "treasury()": {
        "notice": "Treasury address to collect performance fee"
      },
      "underlying()": {
        "notice": "Underlying ERC20 token accepted by the vault"
      },
      "unsponsor(address,uint256[])": {
        "notice": "Withdraws the sponsored amount for the deposits with the ids provided"
      },
      "updateInvested()": {
        "notice": "Update the invested amount;"
      },
      "withdrawPerformanceFee()": {
        "notice": "Withdraws any pending performance fee amount back to the treasury"
      },
      "yieldFor(address)": {
        "notice": "Computes the amount of yield available for an an address."
      }
    },
    "notice": "A vault where other accounts can deposit an underlying token currency and set distribution params for their principal and yieldThe underlying token can be automatically swapped from any configured ERC20 token via {CurveSwapper}",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9388,
        "contract": "contracts/Vault.sol:Vault",
        "label": "swappers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Swapper)9346_storage)"
      },
      {
        "astId": 70,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 635,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 550,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 3727,
        "contract": "contracts/Vault.sol:Vault",
        "label": "underlying",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IERC20Metadata)1313"
      },
      {
        "astId": 3732,
        "contract": "contracts/Vault.sol:Vault",
        "label": "investPct",
        "offset": 21,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 3742,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalSponsored",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3747,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalShares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3751,
        "contract": "contracts/Vault.sol:Vault",
        "label": "strategy",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IStrategy)8277"
      },
      {
        "astId": 3755,
        "contract": "contracts/Vault.sol:Vault",
        "label": "depositors",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(Depositors)9930"
      },
      {
        "astId": 3758,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_depositGroupIds",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3764,
        "contract": "contracts/Vault.sol:Vault",
        "label": "deposits",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Deposit)9967_storage)"
      },
      {
        "astId": 3770,
        "contract": "contracts/Vault.sol:Vault",
        "label": "claimer",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Claimer)9972_storage)"
      },
      {
        "astId": 3773,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalPrincipal",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3776,
        "contract": "contracts/Vault.sol:Vault",
        "label": "treasury",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3779,
        "contract": "contracts/Vault.sol:Vault",
        "label": "perfFeePct",
        "offset": 20,
        "slot": "12",
        "type": "t_uint16"
      },
      {
        "astId": 3782,
        "contract": "contracts/Vault.sol:Vault",
        "label": "accumulatedPerfFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3785,
        "contract": "contracts/Vault.sol:Vault",
        "label": "investmentFeeEstimatePct",
        "offset": 0,
        "slot": "14",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Depositors)9930": {
        "encoding": "inplace",
        "label": "contract Depositors",
        "numberOfBytes": "20"
      },
      "t_contract(ICurve)7113": {
        "encoding": "inplace",
        "label": "contract ICurve",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)1313": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)8277": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Claimer)9972_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IVault.Claimer)",
        "numberOfBytes": "32",
        "value": "t_struct(Claimer)9972_storage"
      },
      "t_mapping(t_address,t_struct(Swapper)9346_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CurveSwapper.Swapper)",
        "numberOfBytes": "32",
        "value": "t_struct(Swapper)9346_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_mapping(t_uint256,t_struct(Deposit)9967_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVault.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)9967_storage"
      },
      "t_struct(Claimer)9972_storage": {
        "encoding": "inplace",
        "label": "struct IVault.Claimer",
        "members": [
          {
            "astId": 9969,
            "contract": "contracts/Vault.sol:Vault",
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9971,
            "contract": "contracts/Vault.sol:Vault",
            "label": "totalShares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Deposit)9967_storage": {
        "encoding": "inplace",
        "label": "struct IVault.Deposit",
        "members": [
          {
            "astId": 9957,
            "contract": "contracts/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9960,
            "contract": "contracts/Vault.sol:Vault",
            "label": "claimerId",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9963,
            "contract": "contracts/Vault.sol:Vault",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9966,
            "contract": "contracts/Vault.sol:Vault",
            "label": "shares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/Vault.sol:Vault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/Vault.sol:Vault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Swapper)9346_storage": {
        "encoding": "inplace",
        "label": "struct CurveSwapper.Swapper",
        "members": [
          {
            "astId": 9333,
            "contract": "contracts/Vault.sol:Vault",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ICurve)7113"
          },
          {
            "astId": 9336,
            "contract": "contracts/Vault.sol:Vault",
            "label": "tokenDecimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 9339,
            "contract": "contracts/Vault.sol:Vault",
            "label": "underlyingDecimals",
            "offset": 21,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 9342,
            "contract": "contracts/Vault.sol:Vault",
            "label": "tokenI",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          },
          {
            "astId": 9345,
            "contract": "contracts/Vault.sol:Vault",
            "label": "underlyingI",
            "offset": 16,
            "slot": "1",
            "type": "t_int128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}