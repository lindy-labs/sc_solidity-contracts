{
  "address": "0x6e1d164c682698857EB22fB9a184B245329F7581",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_minLockPeriod",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_investPerc",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_perfFeePct",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "DepositBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "lockedUntil",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DepositMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "InvestPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Invested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "pct",
          "type": "uint16"
        }
      ],
      "name": "PerfFeePctUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "Sponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Unsponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnedShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "perfFee",
          "type": "uint256"
        }
      ],
      "name": "YieldClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INVESTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DEPOSIT_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SPONSOR_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_SPONSOR_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHARES_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accumulatedPerfFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimers",
      "outputs": [
        {
          "internalType": "contract Claimers",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "pct",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IVault.ClaimParams[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "uint64",
              "name": "lockDuration",
              "type": "uint64"
            }
          ],
          "internalType": "struct IVault.DepositParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "depositIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "contract Depositors",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "forceWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investPerc",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLockPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perfFeePct",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        }
      ],
      "name": "principalOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_investPerc",
          "type": "uint16"
        }
      ],
      "name": "setInvestPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_perfFeePct",
          "type": "uint16"
        }
      ],
      "name": "setPerfFeePct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimerId",
          "type": "uint256"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "sponsor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSponsored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingMinusSponsored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "unsponsor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "updateInvested",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "yieldFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimableYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perfFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d9999d2f849100377fb85c92a6392b94491caf751dfc600066d189760fddffb",
  "receipt": {
    "to": null,
    "from": "0x5A73c07163ACAE03e59c15697f79284b3bda2F2A",
    "contractAddress": "0x6e1d164c682698857EB22fB9a184B245329F7581",
    "transactionIndex": 3,
    "gasUsed": "6600850",
    "logsBloom": "0x
    "blockHash": "0xbb61ca8313ec72899304d1e09afb79a342e1752ecfa60dfb6d4fca41a06b38b6",
    "transactionHash": "0x5d9999d2f849100377fb85c92a6392b94491caf751dfc600066d189760fddffb",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 12151397,
        "transactionHash": "0x5d9999d2f849100377fb85c92a6392b94491caf751dfc600066d189760fddffb",
        "address": "0x6e1d164c682698857EB22fB9a184B245329F7581",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005a73c07163acae03e59c15697f79284b3bda2f2a",
          "0x0000000000000000000000005a73c07163acae03e59c15697f79284b3bda2f2a"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xbb61ca8313ec72899304d1e09afb79a342e1752ecfa60dfb6d4fca41a06b38b6"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 12151397,
        "transactionHash": "0x5d9999d2f849100377fb85c92a6392b94491caf751dfc600066d189760fddffb",
        "address": "0x6e1d164c682698857EB22fB9a184B245329F7581",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb165298935924f540e4181c03493a5d686c54a0aaeb3f6216de85b7ffbba7738",
          "0x0000000000000000000000005a73c07163acae03e59c15697f79284b3bda2f2a",
          "0x0000000000000000000000005a73c07163acae03e59c15697f79284b3bda2f2a"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xbb61ca8313ec72899304d1e09afb79a342e1752ecfa60dfb6d4fca41a06b38b6"
      }
    ],
    "blockNumber": 12151397,
    "cumulativeGasUsed": "6695924",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6cA13a4ab78dd7D657226b155873A04DB929A3A4",
    1,
    9000,
    "0x5A73c07163ACAE03e59c15697f79284b3bda2F2A",
    "0x5A73c07163ACAE03e59c15697f79284b3bda2F2A",
    100
  ],
  "numDeployments": 1,
  "solcInputHash": "3161ec0bcaba4de35ba8de33a6b7b801",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_minLockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_investPerc\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_perfFeePct\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DepositBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DepositMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"InvestPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"}],\"name\":\"PerfFeePctUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"Sponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unsponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perfFee\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVESTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SPONSOR_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SPONSOR_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARES_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedPerfFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimers\",\"outputs\":[{\"internalType\":\"contract Claimers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.ClaimParams[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"lockDuration\",\"type\":\"uint64\"}],\"internalType\":\"struct IVault.DepositParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"contract Depositors\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"forceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investPerc\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perfFeePct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"}],\"name\":\"principalOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_investPerc\",\"type\":\"uint16\"}],\"name\":\"setInvestPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_perfFeePct\",\"type\":\"uint16\"}],\"name\":\"setPerfFeePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerId\",\"type\":\"uint256\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"sponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSponsored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingMinusSponsored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"unsponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"updateInvested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"yieldFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Yield generation strategies not yet implemented\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_investPerc\":\"Percentage of the total underlying to invest in the strategy\",\"_minLockPeriod\":\"Minimum lock period to deposit\",\"_owner\":\"Vault admin address\",\"_perfFeePct\":\"Performance fee percentage\",\"_treasury\":\"Treasury address to collect performance fee\",\"_underlying\":\"Underlying ERC20 token to use.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"totalUnderlyingMinusSponsored()\":{\"returns\":{\"_0\":\"Total amount of principal and yield help by the vault (not including sponsored amount and performance fee).\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Sponsored(uint256,uint256,address,uint256)\":{\"notice\":\"Emitted when a new sponsor deposit is created\"},\"Unsponsored(uint256)\":{\"notice\":\"Emitted when an existing sponsor withdraws\"}},\"kind\":\"user\",\"methods\":{\"claimYield(address)\":{\"notice\":\"See {IVault}\"},\"claimers()\":{\"notice\":\"Yield allocation\"},\"deposit((uint256,(uint16,address,bytes)[],uint64))\":{\"notice\":\"See {IVault}\"},\"depositors()\":{\"notice\":\"Depositors, represented as an NFT per deposit\"},\"forceWithdraw(address,uint256[])\":{\"notice\":\"See {IVault}\"},\"investPerc()\":{\"notice\":\"See {IVault}\"},\"investableAmount()\":{\"notice\":\"See {IVault}\"},\"minLockPeriod()\":{\"notice\":\"See {IVault}\"},\"setInvestPerc(uint16)\":{\"notice\":\"See {IVault}\"},\"setPerfFeePct(uint16)\":{\"notice\":\"See {IVault}\"},\"setStrategy(address)\":{\"notice\":\"See {IVault}\"},\"setTreasury(address)\":{\"notice\":\"See {IVault}\"},\"sponsor(uint256,uint256)\":{\"notice\":\"See {IVaultSponsoring}\"},\"strategy()\":{\"notice\":\"See {IVault}\"},\"totalShares()\":{\"notice\":\"Total amount of shares\"},\"totalSponsored()\":{\"notice\":\"See {IVaultSponsoring}\"},\"totalUnderlying()\":{\"notice\":\"See {IVault}\"},\"totalUnderlyingMinusSponsored()\":{\"notice\":\"Computes the total amount of principal + yield currently controlled by the vault and the strategy. The principal + yield is the total amount of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee.\"},\"underlying()\":{\"notice\":\"See {IVault}\"},\"unsponsor(address,uint256[])\":{\"notice\":\"See {IVaultSponsoring}\"},\"updateInvested(bytes)\":{\"notice\":\"See {IVault}\"},\"withdraw(address,uint256[])\":{\"notice\":\"See {IVault}\"},\"yieldFor(address)\":{\"notice\":\"See {IVault}\"}},\"notice\":\"A vault where other accounts can deposit an underlying token currency and set distribution params for their principal and yield\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {IVault} from \\\"./vault/IVault.sol\\\";\\nimport {IVaultSponsoring} from \\\"./vault/IVaultSponsoring.sol\\\";\\nimport {PercentMath} from \\\"./lib/PercentMath.sol\\\";\\nimport {Depositors} from \\\"./vault/Depositors.sol\\\";\\nimport {Claimers} from \\\"./vault/Claimers.sol\\\";\\nimport {IStrategy} from \\\"./strategy/IStrategy.sol\\\";\\n\\n/**\\n * A vault where other accounts can deposit an underlying token\\n * currency and set distribution params for their principal and yield\\n *\\n * @dev Yield generation strategies not yet implemented\\n */\\n\\ncontract Vault is\\n    IVault,\\n    IVaultSponsoring,\\n    Context,\\n    ERC165,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    using Counters for Counters.Counter;\\n    using SafeERC20 for IERC20;\\n    using PercentMath for uint256;\\n    using PercentMath for uint16;\\n\\n    //\\n    // Constants\\n    //\\n\\n    bytes32 public constant INVESTOR_ROLE = keccak256(\\\"INVESTOR_ROLE\\\");\\n    uint64 public constant MIN_SPONSOR_LOCK_DURATION = 2 weeks;\\n    uint64 public constant MAX_SPONSOR_LOCK_DURATION = 24 weeks;\\n    uint64 public constant MAX_DEPOSIT_LOCK_DURATION = 24 weeks;\\n    uint256 public constant SHARES_MULTIPLIER = 10**18;\\n\\n    //\\n    // State\\n    //\\n\\n    /// See {IVault}\\n    IERC20 public override(IVault) underlying;\\n\\n    /// See {IVault}\\n    IStrategy public strategy;\\n\\n    /// See {IVault}\\n    uint16 public override(IVault) investPerc;\\n\\n    /// See {IVault}\\n    uint64 public immutable override(IVault) minLockPeriod;\\n\\n    /// See {IVaultSponsoring}\\n    uint256 public override(IVaultSponsoring) totalSponsored;\\n\\n    /// Depositors, represented as an NFT per deposit\\n    Depositors public depositors;\\n\\n    /// Yield allocation\\n    Claimers public claimers;\\n\\n    /// Unique IDs to correlate donations that belong to the same foundation\\n    Counters.Counter private _depositGroupIds;\\n\\n    struct Deposit {\\n        /// amount of the deposit\\n        uint256 amount;\\n        /// wallet of the claimer\\n        uint256 claimerId;\\n        /// when can the deposit be withdrawn\\n        uint256 lockedUntil;\\n        /// the number of shares issued for this deposit\\n        uint256 shares;\\n    }\\n\\n    mapping(uint256 => Deposit) public deposits;\\n    Counters.Counter private _depositIds;\\n\\n    struct Claimer {\\n        uint256 totalPrincipal;\\n        uint256 totalShares;\\n    }\\n\\n    mapping(uint256 => Claimer) public claimer;\\n    Counters.Counter private _claimerIds;\\n\\n    // The total of shares\\n    uint256 public totalShares;\\n\\n    // The total of principal deposited\\n    uint256 public totalPrincipal;\\n\\n    // Treasury address to collect performance fee\\n    address public treasury;\\n\\n    // Performance fee percentage\\n    uint16 public perfFeePct;\\n\\n    // Current accumulated performance fee;\\n    uint256 public accumulatedPerfFee;\\n\\n    /**\\n     * @param _underlying Underlying ERC20 token to use.\\n     * @param _minLockPeriod Minimum lock period to deposit\\n     * @param _investPerc Percentage of the total underlying to invest in the strategy\\n     * @param _treasury Treasury address to collect performance fee\\n     * @param _owner Vault admin address\\n     * @param _perfFeePct Performance fee percentage\\n     */\\n    constructor(\\n        IERC20 _underlying,\\n        uint64 _minLockPeriod,\\n        uint16 _investPerc,\\n        address _treasury,\\n        address _owner,\\n        uint16 _perfFeePct\\n    ) {\\n        require(\\n            PercentMath.validPerc(_investPerc),\\n            \\\"Vault: invalid investPerc\\\"\\n        );\\n        require(\\n            PercentMath.validPerc(_perfFeePct),\\n            \\\"Vault: invalid performance fee\\\"\\n        );\\n        require(\\n            address(_underlying) != address(0x0),\\n            \\\"Vault: underlying cannot be 0x0\\\"\\n        );\\n        require(_treasury != address(0x0), \\\"Vault: treasury cannot be 0x0\\\");\\n        require(_owner != address(0x0), \\\"Vault: owner cannot be 0x0\\\");\\n        require(\\n            _minLockPeriod != 0 && _minLockPeriod <= MAX_DEPOSIT_LOCK_DURATION,\\n            \\\"Vault: invalid minLockPeriod\\\"\\n        );\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(INVESTOR_ROLE, _owner);\\n\\n        investPerc = _investPerc;\\n        underlying = _underlying;\\n        treasury = _treasury;\\n        minLockPeriod = _minLockPeriod;\\n        perfFeePct = _perfFeePct;\\n\\n        depositors = new Depositors(this);\\n        claimers = new Claimers(this);\\n    }\\n\\n    //\\n    // IVault\\n    //\\n\\n    /// See {IVault}\\n    function setTreasury(address _treasury)\\n        external\\n        override(IVault)\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            address(_treasury) != address(0x0),\\n            \\\"Vault: treasury cannot be 0x0\\\"\\n        );\\n        treasury = _treasury;\\n        emit TreasuryUpdated(_treasury);\\n    }\\n\\n    /// See {IVault}\\n    function setPerfFeePct(uint16 _perfFeePct)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            PercentMath.validPerc(_perfFeePct),\\n            \\\"Vault: invalid performance fee\\\"\\n        );\\n        perfFeePct = _perfFeePct;\\n        emit PerfFeePctUpdated(_perfFeePct);\\n    }\\n\\n    /// See {IVault}\\n    function setStrategy(address _strategy)\\n        external\\n        override(IVault)\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_strategy != address(0), \\\"Vault: strategy 0x\\\");\\n        require(\\n            IStrategy(_strategy).vault() == address(this),\\n            \\\"Vault: invalid vault\\\"\\n        );\\n        require(\\n            address(strategy) == address(0) || strategy.hasAssets() == false,\\n            \\\"Vault: strategy has invested funds\\\"\\n        );\\n\\n        strategy = IStrategy(_strategy);\\n\\n        emit StrategyUpdated(_strategy);\\n    }\\n\\n    /// See {IVault}\\n    function totalUnderlying() public view override(IVault) returns (uint256) {\\n        if (address(strategy) != address(0)) {\\n            return\\n                underlying.balanceOf(address(this)) + strategy.investedAssets();\\n        }\\n\\n        return underlying.balanceOf(address(this));\\n    }\\n\\n    /// See {IVault}\\n    function yieldFor(address _to)\\n        public\\n        view\\n        override(IVault)\\n        returns (\\n            uint256 claimableYield,\\n            uint256 shares,\\n            uint256 perfFee\\n        )\\n    {\\n        uint256 tokenId = claimers.tokenOf(_to);\\n        uint256 claimerPrincipal = claimer[tokenId].totalPrincipal;\\n        uint256 claimerShares = claimer[tokenId].totalShares;\\n\\n        uint256 currentClaimerPrincipal = _computeAmount(\\n            claimerShares,\\n            totalShares,\\n            totalUnderlyingMinusSponsored()\\n        );\\n\\n        if (currentClaimerPrincipal <= claimerPrincipal) {\\n            return (0, 0, 0);\\n        }\\n\\n        uint256 yieldWithPerfFee = currentClaimerPrincipal - claimerPrincipal;\\n\\n        shares = _computeShares(\\n            yieldWithPerfFee,\\n            totalShares,\\n            totalUnderlyingMinusSponsored()\\n        );\\n        uint256 sharesAmount = _computeAmount(\\n            shares,\\n            totalShares,\\n            totalUnderlyingMinusSponsored()\\n        );\\n\\n        perfFee = sharesAmount.percOf(perfFeePct);\\n        claimableYield = sharesAmount - perfFee;\\n    }\\n\\n    /// See {IVault}\\n    function deposit(DepositParams calldata _params)\\n        external\\n        nonReentrant\\n        returns (uint256[] memory depositIds)\\n    {\\n        require(_params.amount != 0, \\\"Vault: cannot deposit 0\\\");\\n        require(\\n            _params.lockDuration >= minLockPeriod &&\\n                _params.lockDuration <= MAX_DEPOSIT_LOCK_DURATION,\\n            \\\"Vault: invalid lock period\\\"\\n        );\\n        uint256 principalMinusStrategyFee = _applyInvestmentFee(totalPrincipal);\\n        require(\\n            principalMinusStrategyFee <= totalUnderlyingMinusSponsored(),\\n            \\\"Vault: cannot deposit when yield is negative\\\"\\n        );\\n\\n        uint64 lockedUntil = _params.lockDuration + _blockTimestamp();\\n\\n        depositIds = _createDeposit(\\n            _params.amount,\\n            lockedUntil,\\n            _params.claims\\n        );\\n        _transferAndCheckUnderlying(_msgSender(), _params.amount);\\n    }\\n\\n    /// See {IVault}\\n    function claimYield(address _to) external override(IVault) nonReentrant {\\n        require(_to != address(0), \\\"Vault: destination address is 0x\\\");\\n\\n        (uint256 yield, uint256 shares, uint256 fee) = yieldFor(_msgSender());\\n\\n        if (yield == 0) return;\\n\\n        uint256 claimerId = claimers.tokenOf(_msgSender());\\n\\n        accumulatedPerfFee += fee;\\n\\n        underlying.safeTransfer(_to, yield);\\n\\n        claimer[claimerId].totalShares -= shares;\\n        totalShares -= shares;\\n\\n        emit YieldClaimed(claimerId, _to, yield, shares, fee);\\n    }\\n\\n    /// See {IVault}\\n    function withdraw(address _to, uint256[] calldata _ids)\\n        external\\n        override(IVault)\\n        nonReentrant\\n    {\\n        require(_to != address(0), \\\"Vault: destination address is 0x\\\");\\n\\n        _withdraw(_to, _ids, false);\\n    }\\n\\n    /// See {IVault}\\n    function forceWithdraw(address _to, uint256[] calldata _ids)\\n        external\\n        nonReentrant\\n    {\\n        require(_to != address(0), \\\"Vault: destination address is 0x\\\");\\n\\n        _withdraw(_to, _ids, true);\\n    }\\n\\n    /// See {IVault}\\n    function setInvestPerc(uint16 _investPerc)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            PercentMath.validPerc(_investPerc),\\n            \\\"Vault: invalid investPerc\\\"\\n        );\\n\\n        emit InvestPercentageUpdated(_investPerc);\\n\\n        investPerc = _investPerc;\\n    }\\n\\n    /// See {IVault}\\n    function investableAmount() public view returns (uint256) {\\n        uint256 maxInvestableAssets = totalUnderlying().percOf(investPerc);\\n\\n        uint256 alreadyInvested = strategy.investedAssets();\\n\\n        if (alreadyInvested >= maxInvestableAssets) {\\n            return 0;\\n        }\\n\\n        return maxInvestableAssets - alreadyInvested;\\n    }\\n\\n    /// See {IVault}\\n    function updateInvested(bytes calldata data)\\n        external\\n        onlyRole(INVESTOR_ROLE)\\n    {\\n        require(address(strategy) != address(0), \\\"Vault: strategy is not set\\\");\\n\\n        uint256 _investable = investableAmount();\\n\\n        require(_investable != 0, \\\"Vault: nothing to invest\\\");\\n\\n        underlying.safeTransfer(address(strategy), _investable);\\n\\n        emit Invested(_investable);\\n\\n        strategy.invest(data);\\n    }\\n\\n    //\\n    // IVaultSponsoring\\n\\n    /// See {IVaultSponsoring}\\n    function sponsor(uint256 _amount, uint256 _lockDuration)\\n        external\\n        override(IVaultSponsoring)\\n        nonReentrant\\n    {\\n        require(_amount != 0, \\\"Vault: cannot sponsor 0\\\");\\n\\n        require(\\n            _lockDuration >= MIN_SPONSOR_LOCK_DURATION &&\\n                _lockDuration <= MAX_SPONSOR_LOCK_DURATION,\\n            \\\"Vault: invalid lock period\\\"\\n        );\\n\\n        uint256 lockedUntil = _lockDuration + block.timestamp;\\n        uint256 tokenId = depositors.mint(_msgSender());\\n\\n        deposits[tokenId] = Deposit(_amount, 0, lockedUntil, 0);\\n\\n        emit Sponsored(tokenId, _amount, _msgSender(), lockedUntil);\\n\\n        totalSponsored += _amount;\\n        _transferAndCheckUnderlying(_msgSender(), _amount);\\n    }\\n\\n    /// See {IVaultSponsoring}\\n    function unsponsor(address _to, uint256[] memory _ids)\\n        external\\n        nonReentrant\\n    {\\n        require(_to != address(0), \\\"Vault: destination address is 0x\\\");\\n\\n        _unsponsor(_to, _ids);\\n    }\\n\\n    function withdrawPerformanceFee() external onlyRole(INVESTOR_ROLE) {\\n        uint256 _perfFee = accumulatedPerfFee;\\n        require(_perfFee != 0, \\\"Vault: no performance fee\\\");\\n\\n        accumulatedPerfFee = 0;\\n\\n        emit FeeWithdrawn(_perfFee);\\n        underlying.safeTransfer(treasury, _perfFee);\\n    }\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Computes the total amount of principal + yield currently controlled by the\\n     * vault and the strategy. The principal + yield is the total amount\\n     * of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee.\\n     *\\n     * @return Total amount of principal and yield help by the vault (not including sponsored amount and performance fee).\\n     */\\n    function totalUnderlyingMinusSponsored() public view returns (uint256) {\\n        uint256 _totalUnderlying = totalUnderlying();\\n        uint256 deductAmount = totalSponsored + accumulatedPerfFee;\\n        if (deductAmount > _totalUnderlying) {\\n            return 0;\\n        }\\n\\n        return _totalUnderlying - deductAmount;\\n    }\\n\\n    //\\n    // ERC165\\n    //\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, AccessControl)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IVault).interfaceId ||\\n            interfaceId == type(IVaultSponsoring).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // Internal API\\n    //\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * @notice the NFTs of the deposits will be burned.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     * @param _force Boolean to specify if the action should be perfomed when there's loss.\\n     */\\n    function _withdraw(\\n        address _to,\\n        uint256[] calldata _ids,\\n        bool _force\\n    ) internal {\\n        uint256 localTotalShares = totalShares;\\n        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();\\n        uint256 amount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint256 i; i < idsLen; ++i) {\\n            amount += _withdrawDeposit(\\n                _ids[i],\\n                localTotalShares,\\n                localTotalPrincipal,\\n                _to,\\n                _force\\n            );\\n        }\\n\\n        underlying.safeTransfer(_to, amount);\\n    }\\n\\n    /**\\n     * Withdraws the sponsored amount for the deposits with the ids provided\\n     * in @param _ids and sends it to @param _to.\\n     *\\n     * @notice the NFTs of the deposits will be burned.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function _unsponsor(address _to, uint256[] memory _ids) internal {\\n        uint256 sponsorAmount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint8 i; i < idsLen; ++i) {\\n            uint256 tokenId = _ids[i];\\n\\n            uint256 lockedUntil = deposits[tokenId].lockedUntil;\\n            uint256 claimerId = deposits[tokenId].claimerId;\\n            address owner = depositors.ownerOf(tokenId);\\n            uint256 amount = deposits[tokenId].amount;\\n\\n            require(owner == _msgSender(), \\\"Vault: you are not allowed\\\");\\n            require(lockedUntil <= block.timestamp, \\\"Vault: amount is locked\\\");\\n            require(claimerId == 0, \\\"Vault: token id is not a sponsor\\\");\\n\\n            sponsorAmount += amount;\\n\\n            depositors.burn(tokenId);\\n\\n            emit Unsponsored(tokenId);\\n        }\\n\\n        uint256 sponsorToTransfer = sponsorAmount;\\n\\n        require(\\n            sponsorToTransfer <= totalUnderlying(),\\n            \\\"Vault: not enough funds\\\"\\n        );\\n\\n        totalSponsored -= sponsorAmount;\\n\\n        underlying.safeTransfer(_to, sponsorToTransfer);\\n    }\\n\\n    /**\\n     * @dev `_createDeposit` declares too many locals\\n     * We move some of them to this struct to fix the problem\\n     */\\n    struct CreateDepositLocals {\\n        uint256 totalShares;\\n        uint256 totalUnderlying;\\n        uint256 groupId;\\n        uint16 accumulatedPct;\\n        uint256 accumulatedAmount;\\n        uint256 claimsLen;\\n    }\\n\\n    /**\\n     * Creates a deposit with the given amount of underlying and claim\\n     * structure. The deposit is locked until the timestamp specified in @param _lockedUntil.\\n     * @notice This function assumes underlying will be transfered elsewhere in\\n     * the transaction.\\n     *\\n     * @notice Underlying must be transfered *after* this function, in order to\\n     * correctly calculate shares.\\n     *\\n     * @notice claims must add up to 100%.\\n     *\\n     * @param _amount Amount of underlying to consider @param claims claim\\n     * @param _lockedUntil Timestamp at which the deposit unlocks\\n     * @param claims Claim params\\n     * params.\\n     */\\n    function _createDeposit(\\n        uint256 _amount,\\n        uint64 _lockedUntil,\\n        ClaimParams[] calldata claims\\n    ) internal returns (uint256[] memory) {\\n        CreateDepositLocals memory locals = CreateDepositLocals({\\n            totalShares: totalShares,\\n            totalUnderlying: totalUnderlyingMinusSponsored(),\\n            groupId: _depositGroupIds.current(),\\n            accumulatedPct: 0,\\n            accumulatedAmount: 0,\\n            claimsLen: claims.length\\n        });\\n\\n        uint256[] memory result = new uint256[](locals.claimsLen);\\n\\n        for (uint256 i; i < locals.claimsLen; ++i) {\\n            ClaimParams memory data = claims[i];\\n            require(data.pct != 0, \\\"Vault: claim percentage cannot be 0\\\");\\n            // if it's the last claim, just grab all remaining amount, instead\\n            // of relying on percentrages\\n            uint256 localAmount = i == locals.claimsLen - 1\\n                ? _amount - locals.accumulatedAmount\\n                : _amount.percOf(data.pct);\\n\\n            result[i] = _createClaim(\\n                locals.groupId,\\n                localAmount,\\n                _lockedUntil,\\n                data,\\n                locals.totalShares,\\n                locals.totalUnderlying\\n            );\\n            locals.accumulatedPct += data.pct;\\n            locals.accumulatedAmount += localAmount;\\n        }\\n\\n        require(\\n            locals.accumulatedPct.is100Perc(),\\n            \\\"Vault: claims don't add up to 100%\\\"\\n        );\\n\\n        _depositGroupIds.increment();\\n\\n        return result;\\n    }\\n\\n    function _createClaim(\\n        uint256 _depositGroupId,\\n        uint256 _amount,\\n        uint64 _lockedUntil,\\n        ClaimParams memory _claim,\\n        uint256 _localTotalShares,\\n        uint256 _localTotalPrincipal\\n    ) internal returns (uint256) {\\n        uint256 newShares = _computeShares(\\n            _amount,\\n            _localTotalShares,\\n            _localTotalPrincipal\\n        );\\n\\n        uint256 claimerId = claimers.mint(_claim.beneficiary);\\n\\n        claimer[claimerId].totalShares += newShares;\\n        claimer[claimerId].totalPrincipal += _amount;\\n\\n        totalShares += newShares;\\n        totalPrincipal += _amount;\\n\\n        uint256 tokenId = depositors.mint(_msgSender());\\n\\n        deposits[tokenId] = Deposit(\\n            _amount,\\n            claimerId,\\n            _lockedUntil,\\n            newShares\\n        );\\n\\n        emit DepositMinted(\\n            tokenId,\\n            _depositGroupId,\\n            _amount,\\n            newShares,\\n            _msgSender(),\\n            _claim.beneficiary,\\n            claimerId,\\n            _lockedUntil,\\n            _claim.data\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * Burns a deposit NFT and reduces the principal and shares of the claimer.\\n     * If there were any yield to be claimed, the claimer will also keep shares to withdraw later on.\\n     *\\n     * @notice This function doesn't transfer any funds, it only updates the state.\\n     *\\n     * @notice Only the owner of the deposit may call this function.\\n     *\\n     * @param _tokenId The deposit ID to withdraw from.\\n     * @param _totalShares The total shares to consider for the withdraw.\\n     * @param _totalUnderlyingMinusSponsored The total underlying to consider for the withdraw.\\n     * @param _to Where the funds will be sent\\n     * @param _force If the withdraw should still withdraw if there are not enough funds in the vault.\\n     *\\n     * @return the amount to withdraw.\\n     */\\n    function _withdrawDeposit(\\n        uint256 _tokenId,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlyingMinusSponsored,\\n        address _to,\\n        bool _force\\n    ) internal returns (uint256) {\\n        require(\\n            depositors.ownerOf(_tokenId) == _msgSender(),\\n            \\\"Vault: you are not the owner of a deposit\\\"\\n        );\\n\\n        require(\\n            deposits[_tokenId].lockedUntil <= block.timestamp,\\n            \\\"Vault: deposit is locked\\\"\\n        );\\n\\n        require(\\n            deposits[_tokenId].claimerId != 0,\\n            \\\"Vault: token id is not a deposit\\\"\\n        );\\n\\n        uint256 claimerId = deposits[_tokenId].claimerId;\\n        uint256 depositInitialShares = deposits[_tokenId].shares;\\n        uint256 depositAmount = deposits[_tokenId].amount;\\n\\n        uint256 claimerShares = claimer[claimerId].totalShares;\\n        uint256 claimerPrincipal = claimer[claimerId].totalPrincipal;\\n\\n        uint256 depositShares = _computeShares(\\n            depositAmount,\\n            _totalShares,\\n            _totalUnderlyingMinusSponsored\\n        );\\n\\n        bool lostMoney = depositShares > depositInitialShares ||\\n            depositShares > claimerShares;\\n\\n        if (_force && lostMoney) {\\n            // When there's a loss it means that a deposit is now worth more\\n            // shares than before. In that scenario, we cannot allow the\\n            // depositor to withdraw all her money. Instead, the depositor gets\\n            // a number of shares that are equivalent to the percentage of this\\n            // deposit in the total deposits for this claimer.\\n            depositShares = (depositAmount * claimerShares) / claimerPrincipal;\\n        } else {\\n            require(\\n                lostMoney == false,\\n                \\\"Vault: cannot withdraw more than the available amount\\\"\\n            );\\n        }\\n\\n        claimer[claimerId].totalShares -= depositShares;\\n        claimer[claimerId].totalPrincipal -= depositAmount;\\n\\n        totalShares -= depositShares;\\n        totalPrincipal -= depositAmount;\\n\\n        depositors.burn(_tokenId);\\n\\n        emit DepositBurned(_tokenId, depositShares, _to);\\n\\n        return\\n            _computeAmount(\\n                depositShares,\\n                _totalShares,\\n                _totalUnderlyingMinusSponsored\\n            );\\n    }\\n\\n    function _transferAndCheckUnderlying(address _from, uint256 _amount)\\n        internal\\n    {\\n        uint256 balanceBefore = underlying.balanceOf(address(this));\\n        underlying.safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = underlying.balanceOf(address(this));\\n\\n        require(\\n            balanceAfter == balanceBefore + _amount,\\n            \\\"Vault: amount received does not match params\\\"\\n        );\\n    }\\n\\n    function _blockTimestamp() internal view returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n\\n    /**\\n     * Computes amount of shares that will be received for a given deposit amount\\n     *\\n     * @param _amount Amount of deposit to consider.\\n     * @param _totalShares Amount of existing shares to consider.\\n     * @param _totalUnderlyingMinusSponsored Amount of existing underlying to consider.\\n     * @return Amount of shares the deposit will receive.\\n     */\\n    function _computeShares(\\n        uint256 _amount,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlyingMinusSponsored\\n    ) internal pure returns (uint256) {\\n        if (_amount == 0) return 0;\\n        if (_totalShares == 0) return _amount * SHARES_MULTIPLIER;\\n\\n        require(\\n            _totalUnderlyingMinusSponsored != 0,\\n            \\\"Vault: cannot compute shares when there's no principal\\\"\\n        );\\n\\n        return (_amount * _totalShares) / _totalUnderlyingMinusSponsored;\\n    }\\n\\n    /**\\n     * Computes the amount of underlying from a given number of shares\\n     *\\n     * @param _shares Number of shares.\\n     * @param _totalShares Amount of existing shares to consider.\\n     * @param _totalUnderlyingMinusSponsored Amounf of existing underlying to consider.\\n     * @return Amount that corresponds to the number of shares.\\n     */\\n    function _computeAmount(\\n        uint256 _shares,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlyingMinusSponsored\\n    ) internal pure returns (uint256) {\\n        if (\\n            _shares == 0 ||\\n            _totalShares == 0 ||\\n            _totalUnderlyingMinusSponsored == 0\\n        ) {\\n            return 0;\\n        }\\n\\n        return ((_totalUnderlyingMinusSponsored * _shares) / _totalShares);\\n    }\\n\\n    /**\\n     * Applies an estimated fee to the given @param _amount.\\n     *\\n     * This function should be used to estimate how much underlying will be\\n     * left after the strategy invests. For instance, the fees taken by Anchor\\n     * and Curve.\\n     *\\n     * @notice Returns @param _amount when a strategy is not set.\\n     *\\n     * @param _amount Amount to apply the fees to.\\n     *\\n     * @return Amount with the fees applied.\\n     */\\n    function _applyInvestmentFee(uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (address(strategy) == address(0)) return _amount;\\n\\n        return strategy.applyInvestmentFee(_amount);\\n    }\\n\\n    function sharesOf(uint256 claimerId) external view returns (uint256) {\\n        return claimer[claimerId].totalShares;\\n    }\\n\\n    function principalOf(uint256 claimerId) external view returns (uint256) {\\n        return claimer[claimerId].totalPrincipal;\\n    }\\n}\\n\",\"keccak256\":\"0xbd95d8eccd5384a7723fc5ed0813c75bdaa51c98a34f60fcedb4abc0812ad763\",\"license\":\"UNLICENSED\"},\"contracts/lib/PercentMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary PercentMath {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10000;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint16 _fracNum)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Checks if a given number corresponds to 100%\\n     * @param _perc Percentage value to check, with PERC_DIVISOR\\n     */\\n    function is100Perc(uint256 _perc) internal pure returns (bool) {\\n        return _perc == PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n}\\n\",\"keccak256\":\"0x2315a26ed979af2f74004e2fb9ff35113f1c8b05f255117ab1a615f8eb302e90\",\"license\":\"UNLICENSED\"},\"contracts/strategy/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * Strategies can be plugged into vaults to invest and manage their underlying funds\\n *\\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault\\n *\\n * @notice It's up to the vault to decide how much to invest from the total pool\\n */\\ninterface IStrategy {\\n    /**\\n     * The underlying ERC20 token stored by the vault\\n     *\\n     * @return The ERC20 token address\\n     */\\n    function underlying() external view returns (IERC20);\\n\\n    /**\\n     * The vault linked to this stragegy\\n     *\\n     * @return The vault's address\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * Withdraws all underlying back to vault.\\n     *\\n     * @notice If underlying is currently invested, this also starts the\\n     * cross-chain process to redeem it. After that is done, this function\\n     * should be called a second time to finish the withdrawal of that portion.\\n     */\\n    function withdrawAllToVault() external;\\n\\n    /**\\n     * Withdraws a specified amount back to the vault\\n     *\\n     * @notice Unlike `withdrawToVault`, this function only considers the\\n     * amount currently not invested, but only what is currently held by the\\n     * strategy\\n     *\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawToVault(uint256 amount) external;\\n\\n    /**\\n     * Amount, expressed in the underlying currency, currently in the strategy\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets() external view returns (uint256);\\n\\n    /**\\n     * Indicates if assets are invested into strategy or not.\\n     *\\n     * @notice this will be used when removing this strategy\\n     * @return true if assets invested, false if nothing invested.\\n     */\\n    function hasAssets() external view returns (bool);\\n\\n    /**\\n     * Applies an estimated fee to the given @param _amount.\\n     *\\n     * This function should be used to estimate how much underlying will be\\n     * left after the strategy invests. For instance, the fees taken by Anchor\\n     * and Curve.\\n     *\\n     * @param _amount Amount to apply the fees to.\\n     *\\n     * @return Amount with the fees applied.\\n     */\\n    function applyInvestmentFee(uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * Initiates the process of investing the underlying currency\\n     *\\n     * @param data external data to invest underlying\\n     */\\n    function invest(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x55d86fb316e30e30a932edddc0ded171723b280742f417bc7577566dfaf281b3\",\"license\":\"UNLICENSED\"},\"contracts/vault/Claimers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport {IClaimers} from \\\"./IClaimers.sol\\\";\\nimport {IVault} from \\\"../vault/IVault.sol\\\";\\n\\ncontract Claimers is ERC721, IClaimers {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIds;\\n    IVault public vault;\\n\\n    mapping(address => uint256) public addressToTokenID;\\n\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault), \\\"Claimers: not authorized\\\");\\n        _;\\n    }\\n\\n    constructor(IVault _vault) ERC721(\\\"\\\", \\\"\\\") {\\n        vault = _vault;\\n    }\\n\\n    function name() public view override(ERC721) returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"Sandclock\\\",\\n                    IERC20Metadata(address(vault.underlying())).name(),\\n                    \\\" - Depositors\\\"\\n                )\\n            );\\n    }\\n\\n    function symbol() public view override(ERC721) returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"QUARTZ-\\\",\\n                    IERC20Metadata(address(vault.underlying())).symbol(),\\n                    \\\"-DEP\\\"\\n                )\\n            );\\n    }\\n\\n    function mint(address _to) external onlyVault returns (uint256) {\\n        uint256 localTokenId = addressToTokenID[_to];\\n\\n        if (localTokenId == 0) {\\n            _tokenIds.increment();\\n            localTokenId = _tokenIds.current();\\n\\n            _safeMint(_to, localTokenId);\\n        }\\n\\n        return localTokenId;\\n    }\\n\\n    function tokenOf(address _owner) external view returns (uint256) {\\n        return addressToTokenID[_owner];\\n    }\\n\\n    /**\\n     * Ensures the addressToTokenID mapping is up to date.\\n     *\\n     * @notice This function prevents transfers to addresses that already own an NFT.\\n     *\\n     * @param _from origin address.\\n     * @param _to destination address.\\n     * @param _tokenId id of the token.\\n     */\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual override {\\n        require(_to != address(0), \\\"Claimers: cannot burn this NFT\\\");\\n\\n        if (_from == address(0)) {\\n            // MINT\\n            addressToTokenID[_to] = _tokenId;\\n\\n            return;\\n        }\\n\\n        // TRANSFER\\n        require(\\n            addressToTokenID[_to] == 0,\\n            \\\"Claimers: destination already has an NFT\\\"\\n        );\\n\\n        addressToTokenID[_from] = 0;\\n        addressToTokenID[_to] = _tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd387e93b2edea5937823401037bd4c165d5463a21d62c0167e4cbf6826cf04\",\"license\":\"UNLICENSED\"},\"contracts/vault/Depositors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport {IVault} from \\\"../vault/IVault.sol\\\";\\n\\ncontract Depositors is ERC721 {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIds;\\n    IVault public vault;\\n\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault), \\\"Depositors: not authorized\\\");\\n        _;\\n    }\\n\\n    constructor(IVault _vault) ERC721(\\\"\\\", \\\"\\\") {\\n        vault = _vault;\\n    }\\n\\n    function name() public view override(ERC721) returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"Sandclock\\\",\\n                    IERC20Metadata(address(vault.underlying())).name(),\\n                    \\\" - Depositors\\\"\\n                )\\n            );\\n    }\\n\\n    function symbol() public view override(ERC721) returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"QUARTZ-\\\",\\n                    IERC20Metadata(address(vault.underlying())).symbol(),\\n                    \\\"-DEP\\\"\\n                )\\n            );\\n    }\\n\\n    // should only be callable by the vault\\n    function mint(address _owner) external onlyVault returns (uint256) {\\n        _tokenIds.increment();\\n        uint256 localTokenId = _tokenIds.current();\\n\\n        _safeMint(_owner, localTokenId);\\n\\n        return localTokenId;\\n    }\\n\\n    // called when a deposit's principal is withdrawn\\n    function burn(uint256 _id) external onlyVault {\\n        _burn(_id);\\n    }\\n\\n    function exists(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xb2f0204487a263dfbd2bdd59f11d54aeec9078b07b0ee6c149390667198a48cc\",\"license\":\"UNLICENSED\"},\"contracts/vault/IClaimers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n\\ninterface IClaimers is IERC721 {}\\n\",\"keccak256\":\"0xd97a87eafbbb119e1502474e5b80fcce276e7f76976d738f0f44db07fb812a12\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVault {\\n    //\\n    // Structs\\n    //\\n    struct ClaimParams {\\n        uint16 pct;\\n        address beneficiary;\\n        bytes data;\\n    }\\n\\n    struct DepositParams {\\n        uint256 amount;\\n        ClaimParams[] claims;\\n        uint64 lockDuration;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    event DepositMinted(\\n        uint256 indexed id,\\n        uint256 groupId,\\n        uint256 amount,\\n        uint256 shares,\\n        address indexed depositor,\\n        address indexed claimer,\\n        uint256 claimerId,\\n        uint64 lockedUntil,\\n        bytes data\\n    );\\n\\n    event DepositBurned(uint256 indexed id, uint256 shares, address indexed to);\\n\\n    event InvestPercentageUpdated(uint256 percentage);\\n\\n    event Invested(uint256 amount);\\n\\n    event StrategyUpdated(address indexed strategy);\\n\\n    event TreasuryUpdated(address indexed treasury);\\n\\n    event PerfFeePctUpdated(uint16 pct);\\n\\n    event YieldClaimed(\\n        uint256 claimerId,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 burnedShares,\\n        uint256 perfFee\\n    );\\n\\n    event FeeWithdrawn(uint256 amount);\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Update the invested amount;\\n     *\\n     * @param data exteranl data to invest underlying\\n     */\\n    function updateInvested(bytes calldata data) external;\\n\\n    /**\\n     * Calculates underlying investable amount.\\n     *\\n     * @return the investable amount\\n     */\\n    function investableAmount() external view returns (uint256);\\n\\n    /**\\n     * Update invest percentage\\n     *\\n     * Emits {InvestPercentageUpdated} event\\n     *\\n     * @param _investPct the new invest percentage\\n     */\\n    function setInvestPerc(uint16 _investPct) external;\\n\\n    /**\\n     * Percentage of the total underlying to invest in the strategy\\n     */\\n    function investPerc() external view returns (uint16);\\n\\n    /**\\n     * Underlying ERC20 token accepted by the vault\\n     */\\n    function underlying() external view returns (IERC20);\\n\\n    /**\\n     * Minimum lock period for each deposit\\n     */\\n    function minLockPeriod() external view returns (uint64);\\n\\n    /**\\n     * Total amount of underlying currently controlled by the\\n     * vault and the its strategy.\\n     */\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /**\\n     * Total amount of shares\\n     */\\n    function totalShares() external view returns (uint256);\\n\\n    /**\\n     * Computes the amount of yield available for an an address.\\n     *\\n     * @param _to address to consider.\\n     *\\n     * @return claimable yield for @param _to, share of generated yield by @param _to,\\n     *      and performance fee from generated yield\\n     */\\n    function yieldFor(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * Accumulate performance fee and transfers rest yield generated for the caller to\\n     *\\n     * @param _to Address that will receive the yield.\\n     */\\n    function claimYield(address _to) external;\\n\\n    /**\\n     * Creates a new deposit\\n     *\\n     * @param _params Deposit params\\n     */\\n    function deposit(DepositParams calldata _params)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the expected amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function withdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * When the vault is underperforming it withdraws the funds with a loss.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function forceWithdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Changes the strategy used by the vault.\\n     *\\n     * @notice if there is invested funds in previous strategy, it is not allowed to set new strategy.\\n     * @param _strategy the new strategy's address.\\n     */\\n    function setStrategy(address _strategy) external;\\n\\n    /**\\n     * Changes the treasury used by the vault.\\n     *\\n     * @param _treasury the new strategy's address.\\n     */\\n    function setTreasury(address _treasury) external;\\n\\n    /**\\n     * Changes the performance fee\\n     *\\n     * @param _perfFeePct The new performance fee %\\n     */\\n    function setPerfFeePct(uint16 _perfFeePct) external;\\n}\\n\",\"keccak256\":\"0x15ddfb1339005f449682d6694906dc20f808217aefcf78e58b65f40a3fb1f107\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVaultSponsoring.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface IVaultSponsoring {\\n    /// Emitted when a new sponsor deposit is created\\n    event Sponsored(\\n        uint256 indexed id,\\n        uint256 amount,\\n        address indexed depositor,\\n        uint256 lockedUntil\\n    );\\n\\n    /// Emitted when an existing sponsor withdraws\\n    event Unsponsored(uint256 indexed id);\\n\\n    /**\\n     * Total amount currently sponsored\\n     */\\n    function totalSponsored() external view returns (uint256);\\n\\n    /**\\n     * Creates a sponsored deposit with the amount provided in @param _amount.\\n     * Sponsored amounts will be invested like deposits, but unlike deposits\\n     * there are no claimers and the yield generated is donated to the vault.\\n     * The amount is locked until the timestamp specified in @param _lockedUntil.\\n     *\\n     * @param _amount Amount to sponsor.\\n     * @param _lockedUntil When the sponsor can unsponsor the amount.\\n     */\\n    function sponsor(uint256 _amount, uint256 _lockedUntil) external;\\n\\n    /**\\n     * Withdraws the sponsored amount for the deposits with the ids provided\\n     * in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the sponsored amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function unsponsor(address _to, uint256[] memory _ids) external;\\n}\\n\",\"keccak256\":\"0x42219727827de041f9c152c91f3c31e7d63f57d4b9f124dbe5553728e9f55afa\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f45760003560e01c8063908de6c211610191578063bba97d33116100e3578063d9db2b7711610097578063e84b25a211610071578063e84b25a2146106ff578063eb0ebfbc14610712578063f0f442601461071b57600080fd5b8063d9db2b77146106c4578063df6f9ba7146106d9578063e4020fdf146106ec57600080fd5b8063c0ddb692116100c8578063c0ddb692146106a1578063c70920bc146106a9578063d547741f146106b157600080fd5b8063bba97d3314610673578063bd2e3ecd146104b257600080fd5b8063a217fddf11610145578063ad44b94a1161011f578063ad44b94a146105f6578063b02c43d014610616578063b0c29efe1461066b57600080fd5b8063a217fddf146105c8578063a8c62e76146105d0578063aaa46688146105e357600080fd5b8063947fdb8b11610176578063947fdb8b14610598578063999927df146105ab578063a164c25d146105be57600080fd5b8063908de6c21461054157806391d148541461056157600080fd5b80634b1533b21161024a57806376082a5e116101fe5780638293744b116101d85780638293744b146104f8578063878ecfec1461050b5780638b6ed67d1461052e57600080fd5b806376082a5e1461048b57806376490b56146104b25780637c2032e7146104bc57600080fd5b806361d027b31161022f57806361d027b31461040d5780636f307dc31461043857806373ae54b51461044b57600080fd5b80634b1533b2146103f1578063563233f6146103fa57600080fd5b80632f2ff15d116102ac5780633a98ef39116102865780633a98ef39146103b85780633ba52fc6146103c15780633c90a170146103c957600080fd5b80632f2ff15d1461037f57806333a100ca1461039257806336568abe146103a557600080fd5b806319d3ee3d116102dd57806319d3ee3d1461033e578063248a9ca31461034757806324f2db0c1461036a57600080fd5b806301ffc9a7146102f95780631325d5f114610321575b600080fd5b61030c610307366004613284565b61072e565b60405190151581526020015b60405180910390f35b610330670de0b6b3a764000081565b604051908152602001610318565b610330600f5481565b6103306103553660046132ae565b60009081526020819052604090206001015490565b61037d6103783660046132c7565b6107a6565b005b61037d61038d366004613351565b61095a565b61037d6103a0366004613381565b610985565b61037d6103b3366004613351565b610bff565b610330600c5481565b61037d610c8b565b6003546103de90600160a01b900461ffff1681565b60405161ffff9091168152602001610318565b610330600d5481565b61037d6104083660046133b5565b610d5b565b600e54610420906001600160a01b031681565b6040516001600160a01b039091168152602001610318565b600254610420906001600160a01b031681565b6104727f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff9091168152602001610318565b6103307fb165298935924f540e4181c03493a5d686c54a0aaeb3f6216de85b7ffbba773881565b61047262dd7c0081565b6104e36104ca3660046132ae565b600a602052600090815260409020805460019091015482565b60408051928352602083019190915201610318565b61037d6105063660046133d0565b610e14565b6103306105193660046132ae565b6000908152600a602052604090206001015490565b600654610420906001600160a01b031681565b61033061054f3660046132ae565b6000908152600a602052604090205490565b61030c61056f366004613351565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61037d6105a6366004613458565b610ed8565b61037d6105b9366004613381565b611121565b6104726212750081565b610330600081565b600354610420906001600160a01b031681565b600554610420906001600160a01b031681565b61060961060436600461347a565b61133e565b60405161031891906134b5565b61064b6106243660046132ae565b60086020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610318565b61033061157c565b610686610681366004613381565b61163f565b60408051938452602084019290925290820152606001610318565b61033061178b565b6103306117bd565b61037d6106bf366004613351565b61192f565b600e546103de90600160a01b900461ffff1681565b61037d6106e73660046133d0565b611955565b61037d6106fa366004613569565b611a10565b61037d61070d3660046133b5565b611ad0565b61033060045481565b61037d610729366004613381565b611b8c565b60006001600160e01b031982167fe60b5ac500000000000000000000000000000000000000000000000000000000148061079157506001600160e01b031982167f9b736be800000000000000000000000000000000000000000000000000000000145b806107a057506107a082611c4e565b92915050565b7fb165298935924f540e4181c03493a5d686c54a0aaeb3f6216de85b7ffbba77386107d18133611cb5565b6003546001600160a01b031661082e5760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a207374726174656779206973206e6f742073657400000000000060448201526064015b60405180910390fd5b600061083861157c565b9050806108875760405162461bcd60e51b815260206004820152601860248201527f5661756c743a206e6f7468696e6720746f20696e7665737400000000000000006044820152606401610825565b6003546002546108a4916001600160a01b03918216911683611d33565b6040518181527fac9f7997c30b6a3cc9c74953898b5de154359339c7ec0d6d70ceb98e55db1a4b9060200160405180910390a16003546040517f8842db470000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690638842db47906109229087908790600401613624565b600060405180830381600087803b15801561093c57600080fd5b505af1158015610950573d6000803e3d6000fd5b5050505050505050565b6000828152602081905260409020600101546109768133611cb5565b6109808383611dc4565b505050565b60006109918133611cb5565b6001600160a01b0382166109e75760405162461bcd60e51b815260206004820152601260248201527f5661756c743a20737472617465677920307800000000000000000000000000006044820152606401610825565b306001600160a01b0316826001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a539190613653565b6001600160a01b031614610aa95760405162461bcd60e51b815260206004820152601460248201527f5661756c743a20696e76616c6964207661756c740000000000000000000000006044820152606401610825565b6003546001600160a01b03161580610b355750600360009054906101000a90046001600160a01b03166001600160a01b0316635be9b2d36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b339190613670565b155b610ba75760405162461bcd60e51b815260206004820152602260248201527f5661756c743a2073747261746567792068617320696e7665737465642066756e60448201527f64730000000000000000000000000000000000000000000000000000000000006064820152608401610825565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f4da9c22c924692646a21cf1f423781ae3285198dc22e8a6912835d3272b90b3c90600090a25050565b6001600160a01b0381163314610c7d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610825565b610c878282611e62565b5050565b7fb165298935924f540e4181c03493a5d686c54a0aaeb3f6216de85b7ffbba7738610cb68133611cb5565b600f5480610d065760405162461bcd60e51b815260206004820152601960248201527f5661756c743a206e6f20706572666f726d616e636520666565000000000000006044820152606401610825565b6000600f556040518181527fb7eeacba6b133788365610e83d3f130d07b6ef6e78877961f25b3f61fcba07529060200160405180910390a1600e54600254610c87916001600160a01b03918216911683611d33565b6000610d678133611cb5565b61ffff82166127101015610dbd5760405162461bcd60e51b815260206004820152601e60248201527f5661756c743a20696e76616c696420706572666f726d616e63652066656500006044820152606401610825565b600e805461ffff60a01b1916600160a01b61ffff8516908102919091179091556040519081527f16de0efbdf16c568a60b65978ed774bba4e0c179de55ab8f639527e41fd0c8619060200160405180910390a15050565b60026001541415610e675760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610825565b60026001556001600160a01b038316610ec25760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e20616464726573732069732030786044820152606401610825565b610ecf8383836000611ee1565b50506001805550565b60026001541415610f2b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610825565b600260015581610f7d5760405162461bcd60e51b815260206004820152601760248201527f5661756c743a2063616e6e6f742073706f6e736f7220300000000000000000006044820152606401610825565b621275008110801590610f93575062dd7c008111155b610fdf5760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a20696e76616c6964206c6f636b20706572696f640000000000006044820152606401610825565b6000610feb42836136a8565b6005549091506000906001600160a01b0316636a627842336040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af1158015611049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106d91906136c0565b6040805160808101825286815260006020808301828152838501888152606085018481528785526008845293869020945185559051600185015551600284015590516003909201919091558151878152908101859052919250339183917f7ca3497675c6d3ec00b1edc13b8e0b06169ee96a663ab25a74af7da53378f09e910160405180910390a3836004600082825461110791906136a8565b9091555061111790503385611f56565b5050600180555050565b600260015414156111745760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610825565b60026001556001600160a01b0381166111cf5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e20616464726573732069732030786044820152606401610825565b600080806111dc3361163f565b92509250925082600014156111f357505050611337565b6006546000906001600160a01b03166342ec38e2336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561124c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127091906136c0565b905081600f600082825461128491906136a8565b90915550506002546112a0906001600160a01b03168686611d33565b6000818152600a6020526040812060010180548592906112c19084906136d9565b9250508190555082600c60008282546112da91906136d9565b90915550506040805182815260208101869052908101849052606081018390526001600160a01b038616907faa10242dc423338eccdf5e90ebc4038c1472ee3ecb198beb02fc0375aa0200859060800160405180910390a2505050505b5060018055565b6060600260015414156113935760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610825565b600260015581356113e65760405162461bcd60e51b815260206004820152601760248201527f5661756c743a2063616e6e6f74206465706f73697420300000000000000000006044820152606401610825565b67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001661142160608401604085016136f0565b67ffffffffffffffff1610158015611455575062dd7c0061144860608401604085016136f0565b67ffffffffffffffff1611155b6114a15760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a20696e76616c6964206c6f636b20706572696f640000000000006044820152606401610825565b60006114ae600d546120d1565b90506114b861178b565b81111561152d5760405162461bcd60e51b815260206004820152602c60248201527f5661756c743a2063616e6e6f74206465706f736974207768656e207969656c6460448201527f206973206e6567617469766500000000000000000000000000000000000000006064820152608401610825565b60004261154060608601604087016136f0565b61154a919061371a565b905061156484358261155f6020880188613746565b61216e565b9250611571338535611f56565b505060018055919050565b6000806115a1600360149054906101000a900461ffff1661159b6117bd565b90612415565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161c91906136c0565b905081811061162e5760009250505090565b61163881836136d9565b9250505090565b6006546040517f42ec38e20000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009283928392839216906342ec38e290602401602060405180830381865afa1580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd91906136c0565b6000818152600a602052604081208054600190910154600c5493945090929091906117019083906116fc61178b565b612439565b905082811161171e57600080600096509650965050505050611784565b600061172a84836136d9565b905061174081600c5461173b61178b565b612479565b9650600061175388600c546116fc61178b565b600e5490915061176f908290600160a01b900461ffff16612415565b965061177b87826136d9565b98505050505050505b9193909250565b6000806117966117bd565b90506000600f546004546117aa91906136a8565b90508181111561162e5760009250505090565b6003546000906001600160a01b0316156118c357600360009054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa158015611824573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184891906136c0565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b491906136c0565b6118be91906136a8565b905090565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561190b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118be91906136c0565b60008281526020819052604090206001015461194b8133611cb5565b6109808383611e62565b600260015414156119a85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610825565b60026001556001600160a01b038316611a035760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e20616464726573732069732030786044820152606401610825565b610ecf8383836001611ee1565b60026001541415611a635760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610825565b60026001556001600160a01b038216611abe5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2064657374696e6174696f6e20616464726573732069732030786044820152606401610825565b611ac88282612524565b505060018055565b6000611adc8133611cb5565b61ffff82166127101015611b325760405162461bcd60e51b815260206004820152601960248201527f5661756c743a20696e76616c696420696e7665737450657263000000000000006044820152606401610825565b60405161ffff831681527fdd970e7931ce785c1e52bab847c1a662f017c55c66edb76ddebbf61b5aa307859060200160405180910390a1506003805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b6000611b988133611cb5565b6001600160a01b038216611bee5760405162461bcd60e51b815260206004820152601d60248201527f5661756c743a2074726561737572792063616e6e6f74206265203078300000006044820152606401610825565b600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190600090a25050565b612710101590565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806107a057507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146107a0565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610c8757611cf1816001600160a01b03166014612826565b611cfc836020612826565b604051602001611d0d9291906137c3565b60408051601f198184030181529082905262461bcd60e51b825261082591600401613870565b6040516001600160a01b0383166024820152604481018290526109809084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612a07565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610c87576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611e1e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610c87576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600c546000611eee61178b565b9050600084815b81811015611f3e57611f22888883818110611f1257611f12613883565b9050602002013586868c8a612aec565b611f2c90846136a8565b9250611f3781613899565b9050611ef5565b50600254610950906001600160a01b03168984611d33565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc391906136c0565b600254909150611fde906001600160a01b0316843085612ec7565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204b91906136c0565b905061205783836136a8565b81146120cb5760405162461bcd60e51b815260206004820152602c60248201527f5661756c743a20616d6f756e7420726563656976656420646f6573206e6f742060448201527f6d6174636820706172616d7300000000000000000000000000000000000000006064820152608401610825565b50505050565b6003546000906001600160a01b03166120e8575090565b6003546040517f93c3a68f000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03909116906393c3a68f90602401602060405180830381865afa15801561214a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a091906136c0565b606060006040518060c00160405280600c54815260200161218d61178b565b815260200161219b60075490565b8152602001600061ffff1681526020016000815260200185859050815250905060008160a0015167ffffffffffffffff8111156121da576121da6134f9565b604051908082528060200260200182016040528015612203578160200160208202803683370190505b50905060005b8260a0015181101561237757600086868381811061222957612229613883565b905060200281019061223b91906138b4565b612244906138d4565b805190915061ffff166122bf5760405162461bcd60e51b815260206004820152602360248201527f5661756c743a20636c61696d2070657263656e746167652063616e6e6f74206260448201527f65203000000000000000000000000000000000000000000000000000000000006064820152608401610825565b600060018560a001516122d291906136d9565b83146122ea5781516122e5908b90612415565b6122f9565b60808501516122f9908b6136d9565b90506123158560400151828b8589600001518a60200151612f18565b84848151811061232757612327613883565b60209081029190910101528151606086018051612345908390613994565b61ffff169052506080850180518291906123609083906136a8565b9052506123709150829050613899565b9050612209565b5061238b826060015161ffff166127101490565b6123fd5760405162461bcd60e51b815260206004820152602260248201527f5661756c743a20636c61696d7320646f6e27742061646420757020746f20313060448201527f30250000000000000000000000000000000000000000000000000000000000006064820152608401610825565b61240b600780546001019055565b9695505050505050565b600061271061242861ffff8416856139b1565b61243291906139d0565b9392505050565b6000831580612446575082155b8061244f575081155b1561245c57506000612432565b8261246785846139b1565b61247191906139d0565b949350505050565b60008361248857506000612432565b826124a65761249f670de0b6b3a7640000856139b1565b9050612432565b816125195760405162461bcd60e51b815260206004820152603660248201527f5661756c743a2063616e6e6f7420636f6d70757465207368617265732077686560448201527f6e2074686572652773206e6f207072696e636970616c000000000000000000006064820152608401610825565b8161246784866139b1565b8051600090815b818160ff161015612798576000848260ff168151811061254d5761254d613883565b602090810291909101810151600081815260089092526040808320600281015460019091015460055492516331a9108f60e11b8152600481018590529395509093909290916001600160a01b031690636352211e90602401602060405180830381865afa1580156125c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e69190613653565b6000858152600860205260409020549091506001600160a01b03821633146126505760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a20796f7520617265206e6f7420616c6c6f7765640000000000006044820152606401610825565b428411156126a05760405162461bcd60e51b815260206004820152601760248201527f5661756c743a20616d6f756e74206973206c6f636b65640000000000000000006044820152606401610825565b82156126ee5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a20746f6b656e206964206973206e6f7420612073706f6e736f726044820152606401610825565b6126f881896136a8565b600554604051630852cd8d60e31b8152600481018890529199506001600160a01b0316906342966c6890602401600060405180830381600087803b15801561273f57600080fd5b505af1158015612753573d6000803e3d6000fd5b50506040518792507f05394e48d744e4a16d65f52f88cdaf0f60f5d18af259df878d44cb80826d221f9150600090a2505050505080612791906139f2565b905061252b565b50816127a26117bd565b8111156127f15760405162461bcd60e51b815260206004820152601760248201527f5661756c743a206e6f7420656e6f7567682066756e64730000000000000000006044820152606401610825565b826004600082825461280391906136d9565b909155505060025461281f906001600160a01b03168683611d33565b5050505050565b606060006128358360026139b1565b6128409060026136a8565b67ffffffffffffffff811115612858576128586134f9565b6040519080825280601f01601f191660200182016040528015612882576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128b9576128b9613883565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061290457612904613883565b60200101906001600160f81b031916908160001a90535060006129288460026139b1565b6129339060016136a8565b90505b60018111156129b8577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061297457612974613883565b1a60f81b82828151811061298a5761298a613883565b60200101906001600160f81b031916908160001a90535060049490941c936129b181613a12565b9050612936565b5083156124325760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610825565b6000612a5c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131799092919063ffffffff16565b8051909150156109805780806020019051810190612a7a9190613670565b6109805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610825565b6000336005546040516331a9108f60e11b8152600481018990526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015612b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b609190613653565b6001600160a01b031614612bdc5760405162461bcd60e51b815260206004820152602960248201527f5661756c743a20796f7520617265206e6f7420746865206f776e6572206f662060448201527f61206465706f73697400000000000000000000000000000000000000000000006064820152608401610825565b600086815260086020526040902060020154421015612c3d5760405162461bcd60e51b815260206004820152601860248201527f5661756c743a206465706f736974206973206c6f636b656400000000000000006044820152606401610825565b600086815260086020526040902060010154612c9b5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a20746f6b656e206964206973206e6f742061206465706f7369746044820152606401610825565b600086815260086020908152604080832060018082015460038301549254818752600a90955292852090810154905492949193929091612cdc848c8c612479565b9050600085821180612ced57508382115b9050888015612cf95750805b15612d1a5782612d0985876139b1565b612d1391906139d0565b9150612d8e565b8015612d8e5760405162461bcd60e51b815260206004820152603560248201527f5661756c743a2063616e6e6f74207769746864726177206d6f7265207468616e60448201527f2074686520617661696c61626c6520616d6f756e7400000000000000000000006064820152608401610825565b6000878152600a602052604081206001018054849290612daf9084906136d9565b90915550506000878152600a602052604081208054879290612dd29084906136d9565b9250508190555081600c6000828254612deb91906136d9565b9250508190555084600d6000828254612e0491906136d9565b9091555050600554604051630852cd8d60e31b8152600481018f90526001600160a01b03909116906342966c6890602401600060405180830381600087803b158015612e4f57600080fd5b505af1158015612e63573d6000803e3d6000fd5b50505050896001600160a01b03168d7f95fa98cd1a0b1d7d20d4f5d9f62889e8cfd8d172a99939d2a2f46bb668eb2f4f84604051612ea391815260200190565b60405180910390a3612eb6828d8d612439565b9d9c50505050505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526120cb9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611d78565b600080612f26878585612479565b60065460208701516040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152929350600092911690636a627842906024016020604051808303816000875af1158015612f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb991906136c0565b905081600a60008381526020019081526020016000206001016000828254612fe191906136a8565b90915550506000818152600a6020526040812080548a92906130049084906136a8565b9250508190555081600c600082825461301d91906136a8565b9250508190555087600d600082825461303691906136a8565b90915550506005546000906001600160a01b0316636a627842336040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af1158015613096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ba91906136c0565b604080516080810182528b8152602080820186815267ffffffffffffffff8d168385019081526060840189815260008781526008855295909520935184559051600184015551600283015591516003909101558801519091506001600160a01b0316336001600160a01b0316827f5757cd9745e7d8c627eac9e12febd04586626dc407e9bd89a4bb7332c1b3bbc08d8d88888f8f6040015160405161316496959493929190613a29565b60405180910390a49998505050505050505050565b6060612471848460008585843b6131d25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610825565b600080866001600160a01b031685876040516131ee9190613a70565b60006040518083038185875af1925050503d806000811461322b576040519150601f19603f3d011682016040523d82523d6000602084013e613230565b606091505b509150915061324082828661324b565b979650505050505050565b6060831561325a575081612432565b82511561326a5782518084602001fd5b8160405162461bcd60e51b81526004016108259190613870565b60006020828403121561329657600080fd5b81356001600160e01b03198116811461243257600080fd5b6000602082840312156132c057600080fd5b5035919050565b600080602083850312156132da57600080fd5b823567ffffffffffffffff808211156132f257600080fd5b818501915085601f83011261330657600080fd5b81358181111561331557600080fd5b86602082850101111561332757600080fd5b60209290920196919550909350505050565b6001600160a01b038116811461334e57600080fd5b50565b6000806040838503121561336457600080fd5b82359150602083013561337681613339565b809150509250929050565b60006020828403121561339357600080fd5b813561243281613339565b803561ffff811681146133b057600080fd5b919050565b6000602082840312156133c757600080fd5b6124328261339e565b6000806000604084860312156133e557600080fd5b83356133f081613339565b9250602084013567ffffffffffffffff8082111561340d57600080fd5b818601915086601f83011261342157600080fd5b81358181111561343057600080fd5b8760208260051b850101111561344557600080fd5b6020830194508093505050509250925092565b6000806040838503121561346b57600080fd5b50508035926020909101359150565b60006020828403121561348c57600080fd5b813567ffffffffffffffff8111156134a357600080fd5b82016060818503121561243257600080fd5b6020808252825182820181905260009190848201906040850190845b818110156134ed578351835292840192918401916001016134d1565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715613532576135326134f9565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613561576135616134f9565b604052919050565b6000806040838503121561357c57600080fd5b823561358781613339565b915060208381013567ffffffffffffffff808211156135a557600080fd5b818601915086601f8301126135b957600080fd5b8135818111156135cb576135cb6134f9565b8060051b91506135dc848301613538565b81815291830184019184810190898411156135f657600080fd5b938501935b83851015613614578435825293850193908501906135fb565b8096505050505050509250929050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561366557600080fd5b815161243281613339565b60006020828403121561368257600080fd5b8151801515811461243257600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156136bb576136bb613692565b500190565b6000602082840312156136d257600080fd5b5051919050565b6000828210156136eb576136eb613692565b500390565b60006020828403121561370257600080fd5b813567ffffffffffffffff8116811461243257600080fd5b600067ffffffffffffffff80831681851680830382111561373d5761373d613692565b01949350505050565b6000808335601e1984360301811261375d57600080fd5b83018035915067ffffffffffffffff82111561377857600080fd5b6020019150600581901b360382131561379057600080fd5b9250929050565b60005b838110156137b257818101518382015260200161379a565b838111156120cb5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516137fb816017850160208801613797565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613838816028840160208801613797565b01602801949350505050565b6000815180845261385c816020860160208601613797565b601f01601f19169290920160200192915050565b6020815260006124326020830184613844565b634e487b7160e01b600052603260045260246000fd5b60006000198214156138ad576138ad613692565b5060010190565b60008235605e198336030181126138ca57600080fd5b9190910192915050565b6000606082360312156138e657600080fd5b6138ee61350f565b6138f78361339e565b815260208084013561390881613339565b82820152604084013567ffffffffffffffff8082111561392757600080fd5b9085019036601f83011261393a57600080fd5b81358181111561394c5761394c6134f9565b61395e601f8201601f19168501613538565b9150808252368482850101111561397457600080fd5b808484018584013760009082019093019290925250604082015292915050565b600061ffff80831681851680830382111561373d5761373d613692565b60008160001904831182151516156139cb576139cb613692565b500290565b6000826139ed57634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff811415613a0957613a09613692565b60010192915050565b600081613a2157613a21613692565b506000190190565b86815285602082015284604082015283606082015267ffffffffffffffff8316608082015260c060a08201526000613a6460c0830184613844565b98975050505050505050565b600082516138ca81846020870161379756fea2646970667358221220c9557a068d1b893594a1fb979731bed9735491b5ae89c4ba71c7796db85d6d0f64736f6c634300080a0033",
  "devdoc": {
    "details": "Yield generation strategies not yet implemented",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_investPerc": "Percentage of the total underlying to invest in the strategy",
          "_minLockPeriod": "Minimum lock period to deposit",
          "_owner": "Vault admin address",
          "_perfFeePct": "Performance fee percentage",
          "_treasury": "Treasury address to collect performance fee",
          "_underlying": "Underlying ERC20 token to use."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "totalUnderlyingMinusSponsored()": {
        "returns": {
          "_0": "Total amount of principal and yield help by the vault (not including sponsored amount and performance fee)."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Sponsored(uint256,uint256,address,uint256)": {
        "notice": "Emitted when a new sponsor deposit is created"
      },
      "Unsponsored(uint256)": {
        "notice": "Emitted when an existing sponsor withdraws"
      }
    },
    "kind": "user",
    "methods": {
      "claimYield(address)": {
        "notice": "See {IVault}"
      },
      "claimers()": {
        "notice": "Yield allocation"
      },
      "deposit((uint256,(uint16,address,bytes)[],uint64))": {
        "notice": "See {IVault}"
      },
      "depositors()": {
        "notice": "Depositors, represented as an NFT per deposit"
      },
      "forceWithdraw(address,uint256[])": {
        "notice": "See {IVault}"
      },
      "investPerc()": {
        "notice": "See {IVault}"
      },
      "investableAmount()": {
        "notice": "See {IVault}"
      },
      "minLockPeriod()": {
        "notice": "See {IVault}"
      },
      "setInvestPerc(uint16)": {
        "notice": "See {IVault}"
      },
      "setPerfFeePct(uint16)": {
        "notice": "See {IVault}"
      },
      "setStrategy(address)": {
        "notice": "See {IVault}"
      },
      "setTreasury(address)": {
        "notice": "See {IVault}"
      },
      "sponsor(uint256,uint256)": {
        "notice": "See {IVaultSponsoring}"
      },
      "strategy()": {
        "notice": "See {IVault}"
      },
      "totalShares()": {
        "notice": "Total amount of shares"
      },
      "totalSponsored()": {
        "notice": "See {IVaultSponsoring}"
      },
      "totalUnderlying()": {
        "notice": "See {IVault}"
      },
      "totalUnderlyingMinusSponsored()": {
        "notice": "Computes the total amount of principal + yield currently controlled by the vault and the strategy. The principal + yield is the total amount of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee."
      },
      "underlying()": {
        "notice": "See {IVault}"
      },
      "unsponsor(address,uint256[])": {
        "notice": "See {IVaultSponsoring}"
      },
      "updateInvested(bytes)": {
        "notice": "See {IVault}"
      },
      "withdraw(address,uint256[])": {
        "notice": "See {IVault}"
      },
      "yieldFor(address)": {
        "notice": "See {IVault}"
      }
    },
    "notice": "A vault where other accounts can deposit an underlying token currency and set distribution params for their principal and yield",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 438,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3044,
        "contract": "contracts/Vault.sol:Vault",
        "label": "underlying",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1091"
      },
      {
        "astId": 3048,
        "contract": "contracts/Vault.sol:Vault",
        "label": "strategy",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IStrategy)5980"
      },
      {
        "astId": 3053,
        "contract": "contracts/Vault.sol:Vault",
        "label": "investPerc",
        "offset": 20,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 3063,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalSponsored",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3067,
        "contract": "contracts/Vault.sol:Vault",
        "label": "depositors",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(Depositors)8541"
      },
      {
        "astId": 3071,
        "contract": "contracts/Vault.sol:Vault",
        "label": "claimers",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(Claimers)8382"
      },
      {
        "astId": 3075,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_depositGroupIds",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)2657_storage"
      },
      {
        "astId": 3093,
        "contract": "contracts/Vault.sol:Vault",
        "label": "deposits",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Deposit)3088_storage)"
      },
      {
        "astId": 3096,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_depositIds",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)2657_storage"
      },
      {
        "astId": 3106,
        "contract": "contracts/Vault.sol:Vault",
        "label": "claimer",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Claimer)3101_storage)"
      },
      {
        "astId": 3109,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_claimerIds",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)2657_storage"
      },
      {
        "astId": 3111,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalShares",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3113,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalPrincipal",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3115,
        "contract": "contracts/Vault.sol:Vault",
        "label": "treasury",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 3117,
        "contract": "contracts/Vault.sol:Vault",
        "label": "perfFeePct",
        "offset": 20,
        "slot": "14",
        "type": "t_uint16"
      },
      {
        "astId": 3119,
        "contract": "contracts/Vault.sol:Vault",
        "label": "accumulatedPerfFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Claimers)8382": {
        "encoding": "inplace",
        "label": "contract Claimers",
        "numberOfBytes": "20"
      },
      "t_contract(Depositors)8541": {
        "encoding": "inplace",
        "label": "contract Depositors",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1091": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)5980": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_mapping(t_uint256,t_struct(Claimer)3101_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.Claimer)",
        "numberOfBytes": "32",
        "value": "t_struct(Claimer)3101_storage"
      },
      "t_mapping(t_uint256,t_struct(Deposit)3088_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)3088_storage"
      },
      "t_struct(Claimer)3101_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Claimer",
        "members": [
          {
            "astId": 3098,
            "contract": "contracts/Vault.sol:Vault",
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3100,
            "contract": "contracts/Vault.sol:Vault",
            "label": "totalShares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2657_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2656,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Deposit)3088_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Deposit",
        "members": [
          {
            "astId": 3078,
            "contract": "contracts/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3081,
            "contract": "contracts/Vault.sol:Vault",
            "label": "claimerId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3084,
            "contract": "contracts/Vault.sol:Vault",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3087,
            "contract": "contracts/Vault.sol:Vault",
            "label": "shares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/Vault.sol:Vault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/Vault.sol:Vault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}