{
  "address": "0x0Ac1d08a5F8C535d002b236E0CA9f94822407B04",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethAnchorRouter",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_aUstToUstFeed",
          "type": "address"
        },
        {
          "internalType": "contract IExchangeRateFeeder",
          "name": "_exchangeRateFeeder",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_ustToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_aUstToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_perfFeePct",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ustAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "aUstAmount",
          "type": "uint256"
        }
      ],
      "name": "FinishDepositStable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "aUstAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ustAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "FinishRedeemStable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ustAmount",
          "type": "uint256"
        }
      ],
      "name": "InitDepositStable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "aUstAmount",
          "type": "uint256"
        }
      ],
      "name": "InitRedeemStable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PerfFeeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pct",
          "type": "uint256"
        }
      ],
      "name": "PerfFeePctUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aUstToUstFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aUstToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "applyInvestmentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convertedUst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPerformanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositOperationLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "doHardWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethAnchorRouter",
      "outputs": [
        {
          "internalType": "contract IEthAnchorRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateFeeder",
      "outputs": [
        {
          "internalType": "contract IExchangeRateFeeder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "finishDepositStable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "finishRedeemStable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "initRedeemStable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRedeems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perfFeePct",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemOperationLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "redeemOperations",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_perfFeePct",
          "type": "uint16"
        }
      ],
      "name": "setPerfFeePct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ustToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c58900ee16453b9c1529d3cd219dc0eee0d7bbc5e363ac2b1e2f42b488ebc28",
  "receipt": {
    "to": null,
    "from": "0x5641D433c027f9B40a3664752375245b274d1D7d",
    "contractAddress": "0x0Ac1d08a5F8C535d002b236E0CA9f94822407B04",
    "transactionIndex": 5,
    "gasUsed": "2274776",
    "logsBloom": "0x
    "blockHash": "0x496ebcc03ffa4c7f33b894aaa4f2edb5a58ee0c1325f51d4cee48dcbd8f64210",
    "transactionHash": "0x9c58900ee16453b9c1529d3cd219dc0eee0d7bbc5e363ac2b1e2f42b488ebc28",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 11965674,
        "transactionHash": "0x9c58900ee16453b9c1529d3cd219dc0eee0d7bbc5e363ac2b1e2f42b488ebc28",
        "address": "0x0Ac1d08a5F8C535d002b236E0CA9f94822407B04",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005641d433c027f9b40a3664752375245b274d1d7d",
          "0x0000000000000000000000005641d433c027f9b40a3664752375245b274d1d7d"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x496ebcc03ffa4c7f33b894aaa4f2edb5a58ee0c1325f51d4cee48dcbd8f64210"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 11965674,
        "transactionHash": "0x9c58900ee16453b9c1529d3cd219dc0eee0d7bbc5e363ac2b1e2f42b488ebc28",
        "address": "0x0Ac1d08a5F8C535d002b236E0CA9f94822407B04",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x000000000000000000000000135055b3f44c8511d1c2c078c93ba7ff53c8c72e",
          "0x0000000000000000000000005641d433c027f9b40a3664752375245b274d1d7d"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x496ebcc03ffa4c7f33b894aaa4f2edb5a58ee0c1325f51d4cee48dcbd8f64210"
      }
    ],
    "blockNumber": 11965674,
    "cumulativeGasUsed": "4548898",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x135055B3f44c8511D1c2c078c93BA7ff53c8c72E",
    "0x5641D433c027f9B40a3664752375245b274d1D7d",
    "0x7537aC093cE1315BCE08bBF0bf6f9b86B7475008",
    "0x74f9F75747550fbCa6510610450fe91B5Ed765fe",
    "0x79E0d9bD65196Ead00EE75aB78733B8489E8C1fA",
    "0x6cA13a4ab78dd7D657226b155873A04DB929A3A4",
    "0x006479f75D6622AE6a21BE17C7F555B94c672342",
    300,
    "0x5641D433c027f9B40a3664752375245b274d1D7d"
  ],
  "numDeployments": 1,
  "solcInputHash": "97371a37ae785b1e0799e5c0ab6c83f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethAnchorRouter\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_aUstToUstFeed\",\"type\":\"address\"},{\"internalType\":\"contract IExchangeRateFeeder\",\"name\":\"_exchangeRateFeeder\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_ustToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_aUstToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_perfFeePct\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ustAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aUstAmount\",\"type\":\"uint256\"}],\"name\":\"FinishDepositStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aUstAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ustAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"FinishRedeemStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ustAmount\",\"type\":\"uint256\"}],\"name\":\"InitDepositStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aUstAmount\",\"type\":\"uint256\"}],\"name\":\"InitRedeemStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PerfFeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"PerfFeePctUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aUstToUstFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aUstToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"applyInvestmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertedUst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositOperationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAnchorRouter\",\"outputs\":[{\"internalType\":\"contract IEthAnchorRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateFeeder\",\"outputs\":[{\"internalType\":\"contract IExchangeRateFeeder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"finishDepositStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"finishRedeemStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initRedeemStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRedeems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perfFeePct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemOperationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeemOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_perfFeePct\",\"type\":\"uint16\"}],\"name\":\"setPerfFeePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ustToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"currentPerformanceFee()\":{\"returns\":{\"_0\":\"current performance fee\"}},\"depositOperationLength()\":{\"returns\":{\"_0\":\"Length of pending deposit operations\"}},\"finishDepositStable(uint256)\":{\"params\":{\"idx\":\"Id of the pending deposit operation\"}},\"finishRedeemStable(uint256)\":{\"params\":{\"idx\":\"Id of the pending redeem operation\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initRedeemStable(uint256)\":{\"params\":{\"amount\":\"Amount of aUST to redeem\"}},\"investedAssets()\":{\"returns\":{\"_0\":\"The total amount of underlying\"}},\"redeemOperationLength()\":{\"returns\":{\"_0\":\"Length of pending redeem operations\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setPerfFeePct(uint16)\":{\"params\":{\"_perfFeePct\":\"The new performance fee %\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"applyInvestmentFee(uint256)\":{\"notice\":\"See {IStrategy}\"},\"constructor\":{\"notice\":\"_aUstToUstFeed is a fake chainlink feed, it is used to just inhert constructor of USTStrategy\"},\"currentPerformanceFee()\":{\"notice\":\"Calculate current performance fee amountPerformance fee is in UST\"},\"doHardWork()\":{\"notice\":\"Initiates a deposit of all the currently held UST into EthAnchorsince EthAnchor uses an asynchronous model, this function only starts the deposit process, but does not finish it.\"},\"finishDepositStable(uint256)\":{\"notice\":\"Calls EthAnchor with a pending deposit ID, and attempts to finish it.Must be called some time after `_initDepositStable()`. Will only work if the EthAnchor bridge has finished processing the deposit.\"},\"finishRedeemStable(uint256)\":{\"notice\":\"Calls EthAnchor with a pending redeem ID, and attempts to finish it.Must be called some time after `initRedeemStable()`. Will only work if the EthAnchor bridge has finished processing the deposit.\"},\"initRedeemStable(uint256)\":{\"notice\":\"Initiates a withdrawal of UST from EthAnchorsince EthAnchor uses an asynchronous model, this function only starts the redeem process, but does not finish it.\"},\"investedAssets()\":{\"notice\":\"Amount, expressed in the underlying currency, currently in the strategyboth held and invested amounts are included here, using the latest known exchange rates to the underlying currency. This will return value without performance fee.\"},\"setPerfFeePct(uint16)\":{\"notice\":\"Updates the performance feeCan only be called by governance\"},\"underlying()\":{\"notice\":\"The underlying ERC20 token stored by the vault\"},\"vault()\":{\"notice\":\"The vault linked to this stragegy\"},\"withdrawAllToVault()\":{\"notice\":\"Request withdrawal from EthAnchorsince EthAnchor uses an asynchronous model, we can only request withdrawal for whole aUST\"},\"withdrawToVault(uint256)\":{\"notice\":\"Withdraws a specified amount back to the vaultsince EthAnchor uses an asynchronous model, and there is no underlying amount in the strategy, this function do nothing at all, However override interface of IStrategy.\"}},\"notice\":\"USTAnchorStrategy for testnet. Since aUST/UST chainlink does not exist on testnet, we use EthAnchorExchangeRateFeeder to get aUST/UST exchange rate.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/strategy/TestUSTAnchorStrategy.sol\":\"TestUSTAnchorStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/lib/PercentMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary PercentMath {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10000;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Checks if a given number corresponds to 100%\\n     * @param _perc Percentage value to check, with PERC_DIVISOR\\n     */\\n    function is100Perc(uint256 _perc) internal pure returns (bool) {\\n        return _perc == PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n}\\n\",\"keccak256\":\"0xda33a306b6a19ad05b9fa8d40f3cd80dc15dec398af90969a65d141b4c547bec\",\"license\":\"UNLICENSED\"},\"contracts/strategy/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"../lib/PercentMath.sol\\\";\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"./anchor/IEthAnchorRouter.sol\\\";\\n\\n/**\\n * Base eth anchor strategy that handles UST tokens and invests them via the EthAnchor\\n * protocol (https://docs.anchorprotocol.com/ethanchor/ethanchor)\\n */\\nabstract contract BaseStrategy is IStrategy, AccessControl {\\n    using SafeERC20 for IERC20;\\n    using PercentMath for uint256;\\n\\n    event PerfFeeClaimed(uint256 amount);\\n    event PerfFeePctUpdated(uint256 pct);\\n    event InitDepositStable(\\n        address indexed operator,\\n        uint256 indexed idx,\\n        uint256 underlyingAmount,\\n        uint256 ustAmount\\n    );\\n    event FinishDepositStable(\\n        address indexed operator,\\n        uint256 ustAmount,\\n        uint256 aUstAmount\\n    );\\n    event InitRedeemStable(address indexed operator, uint256 aUstAmount);\\n    event FinishRedeemStable(\\n        address indexed operator,\\n        uint256 aUstAmount,\\n        uint256 ustAmount,\\n        uint256 underlyingAmount\\n    );\\n\\n    struct Operation {\\n        address operator;\\n        uint256 amount;\\n    }\\n\\n    bytes32 public constant MANAGER_ROLE =\\n        0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08; // keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    // Underlying token address\\n    IERC20 public override(IStrategy) underlying;\\n\\n    // Vault address\\n    address public override(IStrategy) vault;\\n\\n    // Treasury address\\n    address public treasury;\\n\\n    // UST token address\\n    IERC20 public ustToken;\\n\\n    // aUST token address (wrapped Anchor UST, received to accrue interest for an Anchor deposit)\\n    IERC20 public aUstToken;\\n\\n    // performance fee taken by the treasury on profits\\n    uint16 public perfFeePct;\\n\\n    // Router contract to interact with EthAnchor\\n    IEthAnchorRouter public ethAnchorRouter;\\n\\n    // Chainlink aUST / UST price feed\\n    AggregatorV3Interface public aUstToUstFeed;\\n\\n    // amount currently pending in deposits to EthAnchor\\n    uint256 public pendingDeposits;\\n\\n    // amount currently pending redeemption from EthAnchor\\n    uint256 public pendingRedeems;\\n\\n    // deposit operations history\\n    Operation[] public depositOperations;\\n\\n    // redeem operations history\\n    Operation[] public redeemOperations;\\n\\n    // amount of UST converted (used to calculate yield)\\n    uint256 public convertedUst;\\n\\n    // Decimals of aUST / UST feed\\n    uint256 internal _aUstToUstFeedDecimals;\\n\\n    modifier onlyManager() {\\n        require(\\n            hasRole(MANAGER_ROLE, msg.sender),\\n            \\\"BaseStrategy: caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"BaseStrategy: caller is not admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * Constructor of Base Strategy - Initialize required addresses and params\\n     *\\n     * @notice Vault will be automatically set to Manager Role to handle underlyings\\n     *\\n     * @param _vault Vault address\\n     * @param _treasury Treasury address\\n     * @param _ethAnchorRouter EthAnchorRouter address\\n     * @param _aUstToUstFeed aUST / UST chainlink feed address\\n     * @param _ustToken UST token address\\n     * @param _aUstToken aUST token address\\n     * @param _perfFeePct Performance fee percentage\\n     * @param _owner Owner address\\n     */\\n    constructor(\\n        address _vault,\\n        address _treasury,\\n        address _ethAnchorRouter,\\n        AggregatorV3Interface _aUstToUstFeed,\\n        IERC20 _ustToken,\\n        IERC20 _aUstToken,\\n        uint16 _perfFeePct,\\n        address _owner\\n    ) {\\n        require(_owner != address(0), \\\"BaseStrategy: owner is 0x\\\");\\n        require(_ethAnchorRouter != address(0), \\\"BaseStrategy: router is 0x\\\");\\n        require(_treasury != address(0), \\\"BaseStrategy: treasury is 0x\\\");\\n        require(\\n            PercentMath.validPerc(_perfFeePct),\\n            \\\"BaseStrategy: invalid performance fee\\\"\\n        );\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MANAGER_ROLE, _vault);\\n\\n        treasury = _treasury;\\n        vault = _vault;\\n        underlying = IVault(_vault).underlying();\\n        ethAnchorRouter = IEthAnchorRouter(_ethAnchorRouter);\\n        aUstToUstFeed = _aUstToUstFeed;\\n        ustToken = _ustToken;\\n        aUstToken = _aUstToken;\\n        perfFeePct = _perfFeePct;\\n\\n        _aUstToUstFeedDecimals = 10**_aUstToUstFeed.decimals();\\n    }\\n\\n    /**\\n     * Invest underlying assets to EthAnchor contract.\\n     */\\n    function doHardWork() external virtual;\\n\\n    /**\\n     * Initiates available UST to EthAnchor\\n     *\\n     * @notice since EthAnchor uses an asynchronous model, this function\\n     * only starts the deposit process, but does not finish it.\\n     * Each EthAnchor deposits are handled by different operator, so we store\\n     * operator address to finish later.\\n     * We need to increase pendingDeposits to track correct underlying assets.\\n     */\\n    function _initDepositStable() internal returns (address, uint256) {\\n        uint256 ustBalance = _getUstBalance();\\n        require(ustBalance > 0, \\\"BaseStrategy: no ust exist\\\");\\n        pendingDeposits += ustBalance;\\n\\n        ustToken.safeIncreaseAllowance(address(ethAnchorRouter), ustBalance);\\n        address operator = ethAnchorRouter.initDepositStable(ustBalance);\\n        depositOperations.push(\\n            Operation({operator: operator, amount: ustBalance})\\n        );\\n\\n        return (operator, ustBalance);\\n    }\\n\\n    /**\\n     * Calls EthAnchor with a pending deposit ID, and attempts to finish it.\\n     *\\n     * @notice Must be called some time after `_initDepositStable()`. Will only work if\\n     * the EthAnchor bridge has finished processing the deposit.\\n     *\\n     * @param idx Id of the pending deposit operation\\n     */\\n    function finishDepositStable(uint256 idx) external onlyManager {\\n        require(depositOperations.length > idx, \\\"BaseStrategy: not running\\\");\\n        Operation storage operation = depositOperations[idx];\\n        address operator = operation.operator;\\n\\n        uint256 aUstBalanceBefore = _getAUstBalance();\\n\\n        ethAnchorRouter.finishDepositStable(operator);\\n        uint256 newAUst = _getAUstBalance() - aUstBalanceBefore;\\n        require(newAUst > 0, \\\"BaseStrategy: no aUST returned\\\");\\n\\n        uint256 ustAmount = operation.amount;\\n        pendingDeposits -= ustAmount;\\n        convertedUst += ustAmount;\\n\\n        emit FinishDepositStable(operator, ustAmount, newAUst);\\n\\n        if (idx < depositOperations.length - 1) {\\n            Operation memory lastOperation = depositOperations[\\n                depositOperations.length - 1\\n            ];\\n            operation.operator = lastOperation.operator;\\n            operation.amount = lastOperation.amount;\\n        }\\n\\n        depositOperations.pop();\\n    }\\n\\n    /**\\n     * Initiates a withdrawal of UST from EthAnchor\\n     *\\n     * @notice since EthAnchor uses an asynchronous model, this function\\n     * only starts the redeem process, but does not finish it.\\n     *\\n     * @param amount Amount of aUST to redeem\\n     */\\n    function initRedeemStable(uint256 amount) public onlyManager {\\n        uint256 aUstBalance = _getAUstBalance();\\n        require(amount > 0, \\\"BaseStrategy: amount 0\\\");\\n        pendingRedeems += amount;\\n\\n        aUstToken.safeIncreaseAllowance(address(ethAnchorRouter), amount);\\n        address operator = ethAnchorRouter.initRedeemStable(amount);\\n\\n        redeemOperations.push(Operation({operator: operator, amount: amount}));\\n\\n        emit InitRedeemStable(operator, amount);\\n    }\\n\\n    /**\\n     * Request withdrawal from EthAnchor\\n     *\\n     * @notice since EthAnchor uses an asynchronous model, we can only request withdrawal for whole aUST\\n     */\\n    function withdrawAllToVault() external override(IStrategy) onlyManager {\\n        uint256 aUstBalance = _getAUstBalance();\\n        if (aUstBalance != 0) {\\n            initRedeemStable(aUstBalance);\\n        }\\n    }\\n\\n    /**\\n     * Withdraws a specified amount back to the vault\\n     *\\n     * @notice since EthAnchor uses an asynchronous model, and there is no underlying amount\\n     * in the strategy, this function do nothing at all, However override interface of IStrategy.\\n     */\\n    function withdrawToVault(uint256 amount)\\n        external\\n        override(IStrategy)\\n        onlyManager\\n    {}\\n\\n    /**\\n     * Updates the performance fee\\n     *\\n     * @notice Can only be called by governance\\n     *\\n     * @param _perfFeePct The new performance fee %\\n     */\\n    function setPerfFeePct(uint16 _perfFeePct) external onlyAdmin {\\n        require(\\n            PercentMath.validPerc(_perfFeePct),\\n            \\\"BaseStrategy: invalid performance fee\\\"\\n        );\\n        perfFeePct = _perfFeePct;\\n        emit PerfFeePctUpdated(_perfFeePct);\\n    }\\n\\n    /// See {IStrategy}\\n    function applyInvestmentFee(uint256 _amount)\\n        external\\n        view\\n        virtual\\n        override(IStrategy)\\n        returns (uint256)\\n    {\\n        return _amount.percOf(9800);\\n    }\\n\\n    /**\\n     * Amount, expressed in the underlying currency, currently in the strategy\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency.\\n     * This will return value without performance fee.\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets()\\n        external\\n        view\\n        virtual\\n        override(IStrategy)\\n        returns (uint256);\\n\\n    /**\\n     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.\\n     *\\n     * @notice Must be called some time after `initRedeemStable()`. Will only work if\\n     * the EthAnchor bridge has finished processing the deposit.\\n     * Will take performance fee if some yield generated.\\n     *\\n     * @param idx Id of the pending redeem operation\\n     *\\n     * @return Redeemed UST amount without performance fee.\\n     */\\n    function _finishRedeemStable(uint256 idx)\\n        internal\\n        returns (\\n            address,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(redeemOperations.length > idx, \\\"BaseStrategy: not running\\\");\\n        Operation storage operation = redeemOperations[idx];\\n        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\\n\\n        uint256 operationAmount = operation.amount;\\n        address operator = operation.operator;\\n        uint256 originalUst = (convertedUst * operationAmount) / aUstBalance;\\n\\n        ethAnchorRouter.finishRedeemStable(operator);\\n\\n        uint256 redeemedAmount = _getUstBalance();\\n        require(redeemedAmount > 0, \\\"BaseStrategy: nothing redeemed\\\");\\n\\n        uint256 perfFee = redeemedAmount > originalUst\\n            ? (redeemedAmount - originalUst).percOf(perfFeePct)\\n            : 0;\\n        if (perfFee != 0) {\\n            ustToken.safeTransfer(treasury, perfFee);\\n            emit PerfFeeClaimed(perfFee);\\n        }\\n        convertedUst -= originalUst;\\n        pendingRedeems -= operationAmount;\\n\\n        if (idx < redeemOperations.length - 1) {\\n            Operation memory lastOperation = redeemOperations[\\n                redeemOperations.length - 1\\n            ];\\n            operation.operator = lastOperation.operator;\\n            operation.amount = lastOperation.amount;\\n        }\\n        redeemOperations.pop();\\n\\n        return (operator, operationAmount, redeemedAmount - perfFee);\\n    }\\n\\n    /**\\n     * @return underlying balance of strategy\\n     */\\n    function _getUnderlyingBalance() internal view returns (uint256) {\\n        return underlying.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @return UST balance of strategy\\n     */\\n    function _getUstBalance() internal view returns (uint256) {\\n        return ustToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @return aUST balance of strategy\\n     */\\n    function _getAUstBalance() internal view returns (uint256) {\\n        return aUstToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @return Length of pending deposit operations\\n     */\\n    function depositOperationLength() external view returns (uint256) {\\n        return depositOperations.length;\\n    }\\n\\n    /**\\n     * @return Length of pending redeem operations\\n     */\\n    function redeemOperationLength() external view returns (uint256) {\\n        return redeemOperations.length;\\n    }\\n\\n    /**\\n     * Calculate performance fee for known aUST balance and aUST / UST exchange rate.\\n     *\\n     * @return Length of pending redeem operations\\n     */\\n    function _performanceUstFeeWithInfo(uint256 aUstBalance, uint256 price)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        // aUST and UST decimals are same, so we only care about aUST / UST feed decimals\\n        uint256 estimatedUstAmount = (price * aUstBalance) /\\n            _aUstToUstFeedDecimals;\\n        if (estimatedUstAmount > convertedUst) {\\n            return (estimatedUstAmount - convertedUst).percOf(perfFeePct);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * Calculate current performance fee amount\\n     *\\n     * @notice Performance fee is in UST\\n     *\\n     * @return current performance fee\\n     */\\n    function currentPerformanceFee() external view returns (uint256) {\\n        if (convertedUst == 0) {\\n            return 0;\\n        }\\n\\n        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\\n\\n        return _performanceUstFeeWithInfo(aUstBalance, _aUstExchangeRate());\\n    }\\n\\n    /**\\n     * @return UST value of current aUST balance (+ pending redeems) without performance fee\\n     */\\n    function _estimateAUstBalanceInUstMinusFee()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\\n\\n        if (aUstBalance == 0) {\\n            return 0;\\n        }\\n\\n        uint256 aUstPrice = _aUstExchangeRate();\\n\\n        return\\n            ((aUstPrice * aUstBalance) / _aUstToUstFeedDecimals) -\\n            _performanceUstFeeWithInfo(aUstBalance, aUstPrice);\\n    }\\n\\n    /**\\n     * @return aUST / UST exchange rate from chainlink\\n     */\\n    function _aUstExchangeRate() internal view virtual returns (uint256) {\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            ,\\n            uint256 updateTime,\\n            uint80 answeredInRound\\n        ) = aUstToUstFeed.latestRoundData();\\n\\n        require(\\n            price > 0 && updateTime != 0 && answeredInRound >= roundID,\\n            \\\"invalid price\\\"\\n        );\\n\\n        return uint256(price);\\n    }\\n}\\n\",\"keccak256\":\"0xfa7c06dd48546be1f29edd6e6079b359fbc6771f8c353148a4c46f7d93f76a16\",\"license\":\"UNLICENSED\"},\"contracts/strategy/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * Strategies can be plugged into vaults to invest and manage their underlying funds\\n *\\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault\\n *\\n * @notice It's up to the vault to decide how much to invest from the total pool\\n */\\ninterface IStrategy {\\n    /**\\n     * The underlying ERC20 token stored by the vault\\n     *\\n     * @return The ERC20 token address\\n     */\\n    function underlying() external view returns (IERC20);\\n\\n    /**\\n     * The vault linked to this stragegy\\n     *\\n     * @return The vault's address\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * Withdraws all underlying back to vault.\\n     *\\n     * @notice If underlying is currently invested, this also starts the\\n     * cross-chain process to redeem it. After that is done, this function\\n     * should be called a second time to finish the withdrawal of that portion.\\n     */\\n    function withdrawAllToVault() external;\\n\\n    /**\\n     * Withdraws a specified amount back to the vault\\n     *\\n     * @notice Unlike `withdrawToVault`, this function only considers the\\n     * amount currently not invested, but only what is currently held by the\\n     * strategy\\n     *\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawToVault(uint256 amount) external;\\n\\n    /**\\n     * Amount, expressed in the underlying currency, currently in the strategy\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets() external view returns (uint256);\\n\\n    /**\\n     * Applies an estimated fee to the given @param _amount.\\n     *\\n     * This function should be used to estimate how much underlying will be\\n     * left after the strategy invests. For instance, the fees taken by Anchor\\n     * and Curve.\\n     *\\n     * @param _amount Amount to apply the fees to.\\n     *\\n     * @return Amount with the fees applied.\\n     */\\n    function applyInvestmentFee(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * Initiates the process of investing the underlying currency\\n     */\\n    function doHardWork() external;\\n\\n    /**\\n     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.\\n     *\\n     * @notice Must be called some time after `initRedeemStable()`. Will only work if\\n     * the EthAnchor bridge has finished processing the deposit.\\n     *\\n     * @param idx Id of the pending redeem operation\\n     */\\n    function finishRedeemStable(uint256 idx) external;\\n}\\n\",\"keccak256\":\"0x5a5690c742273a2f3fcf71172040f548a1bd61ad1bb1202b79d8e23230d3beef\",\"license\":\"UNLICENSED\"},\"contracts/strategy/USTStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\nimport \\\"../lib/PercentMath.sol\\\";\\n\\n/**\\n * A Eth Anchor strategy that uses UST as the underlying currency\\n */\\ncontract USTStrategy is BaseStrategy {\\n    using SafeERC20 for IERC20;\\n    using PercentMath for uint256;\\n\\n    /**\\n     * Constructor of UST Strategy\\n     *\\n     * @notice The underlying token must be UST token.\\n     */\\n    constructor(\\n        address _vault,\\n        address _treasury,\\n        address _ethAnchorRouter,\\n        AggregatorV3Interface _aUstFeed,\\n        IERC20 _ustToken,\\n        IERC20 _aUstToken,\\n        uint16 _perfFeePct,\\n        address _owner\\n    )\\n        BaseStrategy(\\n            _vault,\\n            _treasury,\\n            _ethAnchorRouter,\\n            _aUstFeed,\\n            _ustToken,\\n            _aUstToken,\\n            _perfFeePct,\\n            _owner\\n        )\\n    {\\n        require(underlying == _ustToken, \\\"USTStrategy: invalid underlying\\\");\\n    }\\n\\n    /**\\n     * Initiates a deposit of all the currently held UST into EthAnchor\\n     *\\n     * @notice since EthAnchor uses an asynchronous model, this function\\n     * only starts the deposit process, but does not finish it.\\n     */\\n    function doHardWork() external override onlyManager {\\n        (address operator, uint256 ustAmount) = _initDepositStable();\\n\\n        emit InitDepositStable(\\n            operator,\\n            depositOperations.length - 1,\\n            ustAmount,\\n            ustAmount\\n        );\\n    }\\n\\n    /**\\n     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.\\n     *\\n     * @notice Must be called some time after `initRedeemStable()`. Will only work if\\n     * the EthAnchor bridge has finished processing the deposit.\\n     *\\n     * @param idx Id of the pending redeem operation\\n     */\\n    function finishRedeemStable(uint256 idx) external onlyManager {\\n        (\\n            address operator,\\n            uint256 aUstAmount,\\n            uint256 ustAmount\\n        ) = _finishRedeemStable(idx);\\n        emit FinishRedeemStable(operator, aUstAmount, ustAmount, ustAmount);\\n\\n        underlying.safeTransfer(vault, _getUnderlyingBalance());\\n    }\\n\\n    /**\\n     * Amount, expressed in the underlying currency, currently in the strategy\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency.\\n     * This will return value without performance fee.\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets() external view override returns (uint256) {\\n        return pendingDeposits + _estimateAUstBalanceInUstMinusFee();\\n    }\\n}\\n\",\"keccak256\":\"0x047a20f49608ff7b328aa88f1ea0722dc443c306363951f3ba86e5e948a3c005\",\"license\":\"UNLICENSED\"},\"contracts/strategy/anchor/IEthAnchorRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface IEthAnchorRouter {\\n    function initDepositStable(uint256 _amount) external returns (address);\\n\\n    function finishDepositStable(address _operation) external;\\n\\n    function initRedeemStable(uint256 _amount) external returns (address);\\n\\n    function finishRedeemStable(address _operation) external;\\n}\\n\",\"keccak256\":\"0x54cf78f285592748fc80f36a19111f6d99091c09c7bd818b92cabd386c23ada2\",\"license\":\"UNLICENSED\"},\"contracts/strategy/anchor/IExchangeRateFeeder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface IExchangeRateFeeder {\\n    function exchangeRateOf(address _token, bool _simulate)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xef3be5aa9b1886a3c73bdec0b926491a8968478c3a706bba12c87a365fc700d2\",\"license\":\"UNLICENSED\"},\"contracts/test/strategy/TestUSTAnchorStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport \\\"../../strategy/USTStrategy.sol\\\";\\nimport \\\"../../strategy/anchor/IExchangeRateFeeder.sol\\\";\\n\\n/**\\n * USTAnchorStrategy for testnet.\\n * Since aUST/UST chainlink does not exist on testnet, we use EthAnchorExchangeRateFeeder\\n * to get aUST/UST exchange rate.\\n */\\ncontract TestUSTAnchorStrategy is USTStrategy {\\n    IExchangeRateFeeder public exchangeRateFeeder;\\n\\n    /**\\n     * @notice _aUstToUstFeed is a fake chainlink feed, it is used to just\\n     * inhert constructor of USTStrategy\\n     */\\n    constructor(\\n        address _vault,\\n        address _treasury,\\n        address _ethAnchorRouter,\\n        AggregatorV3Interface _aUstToUstFeed,\\n        IExchangeRateFeeder _exchangeRateFeeder,\\n        IERC20 _ustToken,\\n        IERC20 _aUstToken,\\n        uint16 _perfFeePct,\\n        address _owner\\n    )\\n        USTStrategy(\\n            _vault,\\n            _treasury,\\n            _ethAnchorRouter,\\n            _aUstToUstFeed,\\n            _ustToken,\\n            _aUstToken,\\n            _perfFeePct,\\n            _owner\\n        )\\n    {\\n        exchangeRateFeeder = _exchangeRateFeeder;\\n        _aUstToUstFeedDecimals = 1e18;\\n    }\\n\\n    // get aUST/UST exchange rate from eth anchor ExchangeRateFeeder contract\\n    function _aUstExchangeRate() internal view override returns (uint256) {\\n        return exchangeRateFeeder.exchangeRateOf(address(ustToken), true);\\n    }\\n}\\n\",\"keccak256\":\"0x9719660b3468e3d40bcf0ba62a0b03d0050a115528f1d42c650ccdfa34ed4829\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVault {\\n    //\\n    // Structs\\n    //\\n    struct ClaimParams {\\n        uint16 pct;\\n        address beneficiary;\\n        bytes data;\\n    }\\n\\n    struct DepositParams {\\n        uint256 amount;\\n        ClaimParams[] claims;\\n        uint256 lockedUntil;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    event DepositMinted(\\n        uint256 indexed id,\\n        uint256 groupId,\\n        uint256 amount,\\n        uint256 shares,\\n        address indexed depositor,\\n        address indexed claimer,\\n        uint256 claimerId,\\n        uint256 lockedUntil\\n    );\\n\\n    event DepositBurned(uint256 indexed id, uint256 shares, address indexed to);\\n\\n    event InvestPercentageUpdated(uint256 percentage);\\n\\n    event Invested(uint256 amount);\\n\\n    event StrategyUpdated(address indexed strategy);\\n\\n    event YieldClaimed(\\n        uint256 claimerId,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 burnedShares\\n    );\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Update the invested amount;\\n     */\\n    function updateInvested() external;\\n\\n    /**\\n     * Calculates underlying investable amount.\\n     *\\n     * @return the investable amount\\n     */\\n    function investableAmount() external view returns (uint256);\\n\\n    /**\\n     * Update invest percentage\\n     *\\n     * Emits {InvestPercentageUpdated} event\\n     *\\n     * @param _investPct the new invest percentage\\n     */\\n    function setInvestPerc(uint16 _investPct) external;\\n\\n    /**\\n     * Percentage of the total underlying to invest in the strategy\\n     */\\n    function investPerc() external view returns (uint256);\\n\\n    /**\\n     * Underlying ERC20 token accepted by the vault\\n     */\\n    function underlying() external view returns (IERC20);\\n\\n    /**\\n     * Minimum lock period for each deposit\\n     */\\n    function minLockPeriod() external view returns (uint256);\\n\\n    /**\\n     * Total amount of underlying currently controlled by the\\n     * vault and the its strategy.\\n     */\\n    function totalUnderlyingWithSponsor() external view returns (uint256);\\n\\n    /**\\n     * Computes the amount of yield available for an an address.\\n     *\\n     * @param _to address to consider.\\n     *\\n     * @return amount of yield for @param _to.\\n     */\\n    function yieldFor(address _to) external view returns (uint256);\\n\\n    /**\\n     * Transfers all the yield generated for the caller to\\n     *\\n     * @param _to Address that will receive the yield.\\n     */\\n    function claimYield(address _to) external;\\n\\n    /**\\n     * Creates a new deposit\\n     *\\n     * @param _params Deposit params\\n     */\\n    function deposit(DepositParams calldata _params) external;\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the expected amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function withdraw(address _to, uint256[] memory _ids) external;\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * When the vault is underperforming it withdraws the funds with a loss.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function forceWithdraw(address _to, uint256[] memory _ids) external;\\n\\n    /**\\n     * Changes the strategy used by the vault.\\n     *\\n     * @param _strategy the new strategy's address.\\n     */\\n    function setStrategy(address _strategy) external;\\n}\\n\",\"keccak256\":\"0x917f7269f182884fcf0bf64cbc8c34deae3126aec5abfe095ebb6a261c18aa8a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a5d38038062002a5d8339810160408190526200003491620004fc565b888888888787878787878787878787876001600160a01b038116620000a05760405162461bcd60e51b815260206004820152601960248201527f4261736553747261746567793a206f776e65722069732030780000000000000060448201526064015b60405180910390fd5b6001600160a01b038616620000f85760405162461bcd60e51b815260206004820152601a60248201527f4261736553747261746567793a20726f75746572206973203078000000000000604482015260640162000097565b6001600160a01b038716620001505760405162461bcd60e51b815260206004820152601c60248201527f4261736553747261746567793a20747265617375727920697320307800000000604482015260640162000097565b6200016a8261ffff166200041860201b620011801760201c565b620001c65760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a20696e76616c696420706572666f726d616e63604482015264652066656560d81b606482015260840162000097565b620001d360008262000420565b620001ff7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b088962000420565b600380546001600160a01b03808a166001600160a01b03199283161790925560028054928b16929091168217905560408051636f307dc360e01b81529051636f307dc3916004808201926020929091908290030181865afa15801562000269573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200028f9190620005d9565b600180546001600160a01b03199081166001600160a01b039384161790915560068054821689841617905560078054821688841690811790915560048054909216878416178255600580549387166001600160b01b031990941693909317600160a01b61ffff871602179092556040805163313ce56760e01b8152905163313ce567928281019260209291908290030181865afa15801562000335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200035b919062000600565b6200036890600a62000738565b600d5550506001546001600160a01b038b81169116149550620003d49450505050505760405162461bcd60e51b815260206004820152601f60248201527f55535453747261746567793a20696e76616c696420756e6465726c79696e6700604482015260640162000097565b5050600e80546001600160a01b0319166001600160a01b039c909c169b909b17909a555050670de0b6b3a7640000600d5550620007499a5050505050505050505050565b612710101590565b6200042c828262000430565b5050565b6200043c8282620004b8565b6200042c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620004743390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b6001600160a01b0381168114620004f957600080fd5b50565b60008060008060008060008060006101208a8c0312156200051c57600080fd5b89516200052981620004e3565b60208b01519099506200053c81620004e3565b60408b01519098506200054f81620004e3565b60608b01519097506200056281620004e3565b60808b01519096506200057581620004e3565b60a08b01519095506200058881620004e3565b60c08b01519094506200059b81620004e3565b60e08b015190935061ffff81168114620005b457600080fd5b6101008b0151909250620005c881620004e3565b809150509295985092959850929598565b600060208284031215620005ec57600080fd5b8151620005f981620004e3565b9392505050565b6000602082840312156200061357600080fd5b815160ff81168114620005f957600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200067c57816000190482111562000660576200066062000625565b808516156200066e57918102915b93841c939080029062000640565b509250929050565b6000826200069557506001620004dd565b81620006a457506000620004dd565b8160018114620006bd5760028114620006c857620006e8565b6001915050620004dd565b60ff841115620006dc57620006dc62000625565b50506001821b620004dd565b5060208310610133831016604e8410600b84101617156200070d575081810a620004dd565b6200071983836200063b565b806000190482111562000730576200073062000625565b029392505050565b6000620005f960ff84168362000684565b61230480620007596000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c80636abc84251161012a578063a217fddf116100bd578063d547741f1161008c578063eb0469e511610071578063eb0469e5146104b2578063ec87621c146104c5578063fbfa77cf146104ec57600080fd5b8063d547741f14610477578063d9db2b771461048a57600080fd5b8063a217fddf1461044c578063a354264d14610454578063bfd131f11461045c578063ce8c42e81461046457600080fd5b80639119c067116100f95780639119c067146103e657806391d14854146103ef57806393c3a68f14610426578063958437ee1461043957600080fd5b80636abc84251461039a5780636e612f9b146103ad5780636f307dc3146103c0578063781338c0146103d357600080fd5b8063428eab1e116101bd578063524737541161018c5780635c074f44116101715780635c074f441461037657806361d027b31461037f57806362eac09d1461039257600080fd5b80635247375414610350578063563233f61461036357600080fd5b8063428eab1e1461032f5780634a614cf4146103385780634ad0b684146103405780634fa5d8541461034857600080fd5b80631ce63147116101f95780631ce63147146102c5578063248a9ca3146102d85780632f2ff15d1461030957806336568abe1461031c57600080fd5b806301ffc9a71461022b57806307caf901146102535780631312e0c5146102685780631bbec15e1461029a575b600080fd5b61023e610239366004611fef565b6104ff565b60405190151581526020015b60405180910390f35b610266610261366004612019565b610568565b005b61027b610276366004612019565b6107e1565b604080516001600160a01b03909316835260208301919091520161024a565b6005546102ad906001600160a01b031681565b6040516001600160a01b03909116815260200161024a565b6007546102ad906001600160a01b031681565b6102fb6102e6366004612019565b60009081526020819052604090206001015490565b60405190815260200161024a565b610266610317366004612047565b610819565b61026661032a366004612047565b610844565b6102fb600c5481565b600a546102fb565b6102fb6108d0565b6102666108ec565b61026661035e366004612019565b6109dd565b610266610371366004612077565b610afa565b6102fb60085481565b6003546102ad906001600160a01b031681565b600b546102fb565b6102666103a8366004612019565b610c8a565b600e546102ad906001600160a01b031681565b6001546102ad906001600160a01b031681565b6004546102ad906001600160a01b031681565b6102fb60095481565b61023e6103fd366004612047565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102fb610434366004612019565b610fc7565b61027b610447366004612019565b610fd5565b6102fb600081565b6102fb610fe5565b610266611028565b610266610472366004612019565b6110d0565b610266610485366004612047565b61115a565b60055461049f90600160a01b900461ffff1681565b60405161ffff909116815260200161024a565b6006546102ad906001600160a01b031681565b6102fb7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b6002546102ad906001600160a01b031681565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061056257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166105f75760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084015b60405180910390fd5b6000610601611188565b9050600082116106535760405162461bcd60e51b815260206004820152601660248201527f4261736553747261746567793a20616d6f756e7420300000000000000000000060448201526064016105ee565b816009600082825461066591906120b1565b9091555050600654600554610687916001600160a01b039182169116846111f6565b6006546040517f07caf901000000000000000000000000000000000000000000000000000000008152600481018490526000916001600160a01b0316906307caf901906024016020604051808303816000875af11580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071091906120c9565b6040805180820182526001600160a01b038381168083526020808401898152600b805460018101825560009190915294517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9600290960295860180546001600160a01b031916919095161790935591517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba909301929092559151868152929350917f8ae1a29c2159df38e3ed55004e595d4a504c44b98951a0501db94b7d9dfa2113910160405180910390a2505050565b600a81815481106107f157600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b6000828152602081905260409020600101546108358133611322565b61083f83836113a0565b505050565b6001600160a01b03811633146108c25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016105ee565b6108cc828261143e565b5050565b60006108da6114bd565b6008546108e791906120b1565b905090565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166109765760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084016105ee565b600080610981611522565b600a549193509150610995906001906120e6565b60408051838152602081018490526001600160a01b038516917f6a038298ce6aeb4a287c53d57f807bbe0853812eb55b115ede849dc987cca495910160405180910390a35050565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff16610a675760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084016105ee565b6000806000610a75846116db565b604080518381526020810183905290810182905292955090935091506001600160a01b038416907f4920436e71acf3ae867da04d3ab39c11ff9414833c8404596505ccb64f47c2209060600160405180910390a2600254610af4906001600160a01b0316610ae1611a17565b6001546001600160a01b03169190611a48565b50505050565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff16610b9e5760405162461bcd60e51b815260206004820152602160248201527f4261736553747261746567793a2063616c6c6572206973206e6f742061646d6960448201527f6e0000000000000000000000000000000000000000000000000000000000000060648201526084016105ee565b61ffff81166127101015610c1a5760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a20696e76616c696420706572666f726d616e6360448201527f652066656500000000000000000000000000000000000000000000000000000060648201526084016105ee565b600580547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8416908102919091179091556040519081527f3c1be17360b5ce4015d5d5ddd50de6e7e9d53d49907f45d72a202e159306938c9060200160405180910390a150565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff16610d145760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084016105ee565b600a548110610d655760405162461bcd60e51b815260206004820152601960248201527f4261736553747261746567793a206e6f742072756e6e696e670000000000000060448201526064016105ee565b6000600a8281548110610d7a57610d7a6120fd565b60009182526020822060029091020180549092506001600160a01b031690610da0611188565b6006546040517fac1a23220000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015292935091169063ac1a232290602401600060405180830381600087803b158015610e0257600080fd5b505af1158015610e16573d6000803e3d6000fd5b50505050600081610e25611188565b610e2f91906120e6565b905060008111610e815760405162461bcd60e51b815260206004820152601e60248201527f4261736553747261746567793a206e6f20615553542072657475726e6564000060448201526064016105ee565b6000846001015490508060086000828254610e9c91906120e6565b9250508190555080600c6000828254610eb591906120b1565b909155505060408051828152602081018490526001600160a01b038616917f225c081659607ca4ffa8d328c88b0c3d6c99d0ba75b002e377abf8b4ca2fdc79910160405180910390a2600a54610f0d906001906120e6565b861015610f8557600a805460009190610f28906001906120e6565b81548110610f3857610f386120fd565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168083526001918201549290930182905288546001600160a01b031916909217885590870155505b600a805480610f9657610f96612113565b60008281526020812060026000199093019283020180546001600160a01b0319168155600101559055505050505050565b600061056282612648611a91565b600b81815481106107f157600080fd5b6000600c5460001415610ff85750600090565b6000600954611005611188565b61100f91906120b1565b90506110228161101d611ab1565b611b0a565b91505090565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166110b25760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084016105ee565b60006110bc611188565b905080156110cd576110cd81610568565b50565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166110cd5760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084016105ee565b6000828152602081905260409020600101546111768133611322565b61083f838361143e565b612710101590565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024015b602060405180830381865afa1580156111d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e79190612129565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112849190612129565b61128e91906120b1565b6040516001600160a01b038516602482015260448101829052909150610af49085907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611b64565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108cc5761135e816001600160a01b03166014611c49565b611369836020611c49565b60405160200161137a92919061216e565b60408051601f198184030181529082905262461bcd60e51b82526105ee916004016121ef565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108cc576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556113fa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156108cc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000806009546114cb611188565b6114d591906120b1565b9050806114e457600091505090565b60006114ee611ab1565b90506114fa8282611b0a565b600d546115078484612222565b6115119190612241565b61151b91906120e6565b9250505090565b600080600061152f611e2a565b9050600081116115815760405162461bcd60e51b815260206004820152601a60248201527f4261736553747261746567793a206e6f2075737420657869737400000000000060448201526064016105ee565b806008600082825461159391906120b1565b90915550506006546004546115b5916001600160a01b039182169116836111f6565b6006546040517fa8a15a21000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b03169063a8a15a21906024016020604051808303816000875af115801561161a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163e91906120c9565b604080518082019091526001600160a01b03828116825260208201858152600a805460018101825560009190915292517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8600290940293840180546001600160a01b0319169190931617909155517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a9909101559491935090915050565b600080600083600b80549050116117345760405162461bcd60e51b815260206004820152601960248201527f4261736553747261746567793a206e6f742072756e6e696e670000000000000060448201526064016105ee565b6000600b8581548110611749576117496120fd565b906000526020600020906002020190506000600954611766611188565b61177091906120b1565b60018301548354600c5492935090916001600160a01b0390911690600090849061179b908590612222565b6117a59190612241565b6006546040517f7249abb90000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152929350911690637249abb990602401600060405180830381600087803b15801561180757600080fd5b505af115801561181b573d6000803e3d6000fd5b505050506000611829611e2a565b90506000811161187b5760405162461bcd60e51b815260206004820152601e60248201527f4261736553747261746567793a206e6f7468696e672072656465656d6564000060448201526064016105ee565b600082821161188b5760006118ad565b6005546118ad90600160a01b900461ffff166118a785856120e6565b90611a91565b90508015611906576003546004546118d2916001600160a01b03918216911683611a48565b6040518181527f400bdf25b31ddf5f320a4bc5dd19386740a74e689d95b01e02c4b499b51b99549060200160405180910390a15b82600c600082825461191891906120e6565b92505081905550846009600082825461193191906120e6565b9091555050600b54611945906001906120e6565b8b10156119bd57600b805460009190611960906001906120e6565b81548110611970576119706120fd565b60009182526020918290206040805180820190915260029092020180546001600160a01b0316808352600191820154929093018290528a546001600160a01b0319169092178a5590890155505b600b8054806119ce576119ce612113565b60008281526020812060026000199093019283020180546001600160a01b03191681556001015590558385611a0383856120e6565b995099509950505050505050509193909250565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024016111b5565b6040516001600160a01b03831660248201526044810182905261083f9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016112d6565b6000612710611aa08385612222565b611aaa9190612241565b9392505050565b600e54600480546040517fcdd219390000000000000000000000000000000000000000000000000000000081526001600160a01b039182169281019290925260016024830152600092169063cdd21939906044016111b5565b600080600d548484611b1c9190612222565b611b269190612241565b9050600c54811115611b5a57600554600c54611b5291600160a01b900461ffff16906118a790846120e6565b915050610562565b5060009392505050565b6000611bb9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e609092919063ffffffff16565b80519091501561083f5780806020019051810190611bd79190612263565b61083f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105ee565b60606000611c58836002612222565b611c639060026120b1565b67ffffffffffffffff811115611c7b57611c7b612285565b6040519080825280601f01601f191660200182016040528015611ca5576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611cdc57611cdc6120fd565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611d2757611d276120fd565b60200101906001600160f81b031916908160001a9053506000611d4b846002612222565b611d569060016120b1565b90505b6001811115611ddb577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611d9757611d976120fd565b1a60f81b828281518110611dad57611dad6120fd565b60200101906001600160f81b031916908160001a90535060049490941c93611dd48161229b565b9050611d59565b508315611aaa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105ee565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a08231906024016111b5565b6060611e6f8484600085611e77565b949350505050565b606082471015611eef5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105ee565b843b611f3d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ee565b600080866001600160a01b03168587604051611f5991906122b2565b60006040518083038185875af1925050503d8060008114611f96576040519150601f19603f3d011682016040523d82523d6000602084013e611f9b565b606091505b5091509150611fab828286611fb6565b979650505050505050565b60608315611fc5575081611aaa565b825115611fd55782518084602001fd5b8160405162461bcd60e51b81526004016105ee91906121ef565b60006020828403121561200157600080fd5b81356001600160e01b031981168114611aaa57600080fd5b60006020828403121561202b57600080fd5b5035919050565b6001600160a01b03811681146110cd57600080fd5b6000806040838503121561205a57600080fd5b82359150602083013561206c81612032565b809150509250929050565b60006020828403121561208957600080fd5b813561ffff81168114611aaa57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156120c4576120c461209b565b500190565b6000602082840312156120db57600080fd5b8151611aaa81612032565b6000828210156120f8576120f861209b565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561213b57600080fd5b5051919050565b60005b8381101561215d578181015183820152602001612145565b83811115610af45750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516121a6816017850160208801612142565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516121e3816028840160208801612142565b01602801949350505050565b602081526000825180602084015261220e816040850160208701612142565b601f01601f19169190910160400192915050565b600081600019048311821515161561223c5761223c61209b565b500290565b60008261225e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561227557600080fd5b81518015158114611aaa57600080fd5b634e487b7160e01b600052604160045260246000fd5b6000816122aa576122aa61209b565b506000190190565b600082516122c4818460208701612142565b919091019291505056fea2646970667358221220552d1e141b6c142118732fe0ff44ca28a99bcb3694982e115d6b43422e461a0564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c80636abc84251161012a578063a217fddf116100bd578063d547741f1161008c578063eb0469e511610071578063eb0469e5146104b2578063ec87621c146104c5578063fbfa77cf146104ec57600080fd5b8063d547741f14610477578063d9db2b771461048a57600080fd5b8063a217fddf1461044c578063a354264d14610454578063bfd131f11461045c578063ce8c42e81461046457600080fd5b80639119c067116100f95780639119c067146103e657806391d14854146103ef57806393c3a68f14610426578063958437ee1461043957600080fd5b80636abc84251461039a5780636e612f9b146103ad5780636f307dc3146103c0578063781338c0146103d357600080fd5b8063428eab1e116101bd578063524737541161018c5780635c074f44116101715780635c074f441461037657806361d027b31461037f57806362eac09d1461039257600080fd5b80635247375414610350578063563233f61461036357600080fd5b8063428eab1e1461032f5780634a614cf4146103385780634ad0b684146103405780634fa5d8541461034857600080fd5b80631ce63147116101f95780631ce63147146102c5578063248a9ca3146102d85780632f2ff15d1461030957806336568abe1461031c57600080fd5b806301ffc9a71461022b57806307caf901146102535780631312e0c5146102685780631bbec15e1461029a575b600080fd5b61023e610239366004611fef565b6104ff565b60405190151581526020015b60405180910390f35b610266610261366004612019565b610568565b005b61027b610276366004612019565b6107e1565b604080516001600160a01b03909316835260208301919091520161024a565b6005546102ad906001600160a01b031681565b6040516001600160a01b03909116815260200161024a565b6007546102ad906001600160a01b031681565b6102fb6102e6366004612019565b60009081526020819052604090206001015490565b60405190815260200161024a565b610266610317366004612047565b610819565b61026661032a366004612047565b610844565b6102fb600c5481565b600a546102fb565b6102fb6108d0565b6102666108ec565b61026661035e366004612019565b6109dd565b610266610371366004612077565b610afa565b6102fb60085481565b6003546102ad906001600160a01b031681565b600b546102fb565b6102666103a8366004612019565b610c8a565b600e546102ad906001600160a01b031681565b6001546102ad906001600160a01b031681565b6004546102ad906001600160a01b031681565b6102fb60095481565b61023e6103fd366004612047565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102fb610434366004612019565b610fc7565b61027b610447366004612019565b610fd5565b6102fb600081565b6102fb610fe5565b610266611028565b610266610472366004612019565b6110d0565b610266610485366004612047565b61115a565b60055461049f90600160a01b900461ffff1681565b60405161ffff909116815260200161024a565b6006546102ad906001600160a01b031681565b6102fb7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b6002546102ad906001600160a01b031681565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061056257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166105f75760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084015b60405180910390fd5b6000610601611188565b9050600082116106535760405162461bcd60e51b815260206004820152601660248201527f4261736553747261746567793a20616d6f756e7420300000000000000000000060448201526064016105ee565b816009600082825461066591906120b1565b9091555050600654600554610687916001600160a01b039182169116846111f6565b6006546040517f07caf901000000000000000000000000000000000000000000000000000000008152600481018490526000916001600160a01b0316906307caf901906024016020604051808303816000875af11580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071091906120c9565b6040805180820182526001600160a01b038381168083526020808401898152600b805460018101825560009190915294517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9600290960295860180546001600160a01b031916919095161790935591517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba909301929092559151868152929350917f8ae1a29c2159df38e3ed55004e595d4a504c44b98951a0501db94b7d9dfa2113910160405180910390a2505050565b600a81815481106107f157600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b6000828152602081905260409020600101546108358133611322565b61083f83836113a0565b505050565b6001600160a01b03811633146108c25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016105ee565b6108cc828261143e565b5050565b60006108da6114bd565b6008546108e791906120b1565b905090565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166109765760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084016105ee565b600080610981611522565b600a549193509150610995906001906120e6565b60408051838152602081018490526001600160a01b038516917f6a038298ce6aeb4a287c53d57f807bbe0853812eb55b115ede849dc987cca495910160405180910390a35050565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff16610a675760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084016105ee565b6000806000610a75846116db565b604080518381526020810183905290810182905292955090935091506001600160a01b038416907f4920436e71acf3ae867da04d3ab39c11ff9414833c8404596505ccb64f47c2209060600160405180910390a2600254610af4906001600160a01b0316610ae1611a17565b6001546001600160a01b03169190611a48565b50505050565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff16610b9e5760405162461bcd60e51b815260206004820152602160248201527f4261736553747261746567793a2063616c6c6572206973206e6f742061646d6960448201527f6e0000000000000000000000000000000000000000000000000000000000000060648201526084016105ee565b61ffff81166127101015610c1a5760405162461bcd60e51b815260206004820152602560248201527f4261736553747261746567793a20696e76616c696420706572666f726d616e6360448201527f652066656500000000000000000000000000000000000000000000000000000060648201526084016105ee565b600580547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8416908102919091179091556040519081527f3c1be17360b5ce4015d5d5ddd50de6e7e9d53d49907f45d72a202e159306938c9060200160405180910390a150565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff16610d145760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084016105ee565b600a548110610d655760405162461bcd60e51b815260206004820152601960248201527f4261736553747261746567793a206e6f742072756e6e696e670000000000000060448201526064016105ee565b6000600a8281548110610d7a57610d7a6120fd565b60009182526020822060029091020180549092506001600160a01b031690610da0611188565b6006546040517fac1a23220000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015292935091169063ac1a232290602401600060405180830381600087803b158015610e0257600080fd5b505af1158015610e16573d6000803e3d6000fd5b50505050600081610e25611188565b610e2f91906120e6565b905060008111610e815760405162461bcd60e51b815260206004820152601e60248201527f4261736553747261746567793a206e6f20615553542072657475726e6564000060448201526064016105ee565b6000846001015490508060086000828254610e9c91906120e6565b9250508190555080600c6000828254610eb591906120b1565b909155505060408051828152602081018490526001600160a01b038616917f225c081659607ca4ffa8d328c88b0c3d6c99d0ba75b002e377abf8b4ca2fdc79910160405180910390a2600a54610f0d906001906120e6565b861015610f8557600a805460009190610f28906001906120e6565b81548110610f3857610f386120fd565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168083526001918201549290930182905288546001600160a01b031916909217885590870155505b600a805480610f9657610f96612113565b60008281526020812060026000199093019283020180546001600160a01b0319168155600101559055505050505050565b600061056282612648611a91565b600b81815481106107f157600080fd5b6000600c5460001415610ff85750600090565b6000600954611005611188565b61100f91906120b1565b90506110228161101d611ab1565b611b0a565b91505090565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166110b25760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084016105ee565b60006110bc611188565b905080156110cd576110cd81610568565b50565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166110cd5760405162461bcd60e51b815260206004820152602360248201527f4261736553747261746567793a2063616c6c6572206973206e6f74206d616e6160448201526233b2b960e91b60648201526084016105ee565b6000828152602081905260409020600101546111768133611322565b61083f838361143e565b612710101590565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024015b602060405180830381865afa1580156111d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e79190612129565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112849190612129565b61128e91906120b1565b6040516001600160a01b038516602482015260448101829052909150610af49085907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611b64565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108cc5761135e816001600160a01b03166014611c49565b611369836020611c49565b60405160200161137a92919061216e565b60408051601f198184030181529082905262461bcd60e51b82526105ee916004016121ef565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108cc576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556113fa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156108cc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000806009546114cb611188565b6114d591906120b1565b9050806114e457600091505090565b60006114ee611ab1565b90506114fa8282611b0a565b600d546115078484612222565b6115119190612241565b61151b91906120e6565b9250505090565b600080600061152f611e2a565b9050600081116115815760405162461bcd60e51b815260206004820152601a60248201527f4261736553747261746567793a206e6f2075737420657869737400000000000060448201526064016105ee565b806008600082825461159391906120b1565b90915550506006546004546115b5916001600160a01b039182169116836111f6565b6006546040517fa8a15a21000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b03169063a8a15a21906024016020604051808303816000875af115801561161a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163e91906120c9565b604080518082019091526001600160a01b03828116825260208201858152600a805460018101825560009190915292517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8600290940293840180546001600160a01b0319169190931617909155517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a9909101559491935090915050565b600080600083600b80549050116117345760405162461bcd60e51b815260206004820152601960248201527f4261736553747261746567793a206e6f742072756e6e696e670000000000000060448201526064016105ee565b6000600b8581548110611749576117496120fd565b906000526020600020906002020190506000600954611766611188565b61177091906120b1565b60018301548354600c5492935090916001600160a01b0390911690600090849061179b908590612222565b6117a59190612241565b6006546040517f7249abb90000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152929350911690637249abb990602401600060405180830381600087803b15801561180757600080fd5b505af115801561181b573d6000803e3d6000fd5b505050506000611829611e2a565b90506000811161187b5760405162461bcd60e51b815260206004820152601e60248201527f4261736553747261746567793a206e6f7468696e672072656465656d6564000060448201526064016105ee565b600082821161188b5760006118ad565b6005546118ad90600160a01b900461ffff166118a785856120e6565b90611a91565b90508015611906576003546004546118d2916001600160a01b03918216911683611a48565b6040518181527f400bdf25b31ddf5f320a4bc5dd19386740a74e689d95b01e02c4b499b51b99549060200160405180910390a15b82600c600082825461191891906120e6565b92505081905550846009600082825461193191906120e6565b9091555050600b54611945906001906120e6565b8b10156119bd57600b805460009190611960906001906120e6565b81548110611970576119706120fd565b60009182526020918290206040805180820190915260029092020180546001600160a01b0316808352600191820154929093018290528a546001600160a01b0319169092178a5590890155505b600b8054806119ce576119ce612113565b60008281526020812060026000199093019283020180546001600160a01b03191681556001015590558385611a0383856120e6565b995099509950505050505050509193909250565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024016111b5565b6040516001600160a01b03831660248201526044810182905261083f9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016112d6565b6000612710611aa08385612222565b611aaa9190612241565b9392505050565b600e54600480546040517fcdd219390000000000000000000000000000000000000000000000000000000081526001600160a01b039182169281019290925260016024830152600092169063cdd21939906044016111b5565b600080600d548484611b1c9190612222565b611b269190612241565b9050600c54811115611b5a57600554600c54611b5291600160a01b900461ffff16906118a790846120e6565b915050610562565b5060009392505050565b6000611bb9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e609092919063ffffffff16565b80519091501561083f5780806020019051810190611bd79190612263565b61083f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105ee565b60606000611c58836002612222565b611c639060026120b1565b67ffffffffffffffff811115611c7b57611c7b612285565b6040519080825280601f01601f191660200182016040528015611ca5576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611cdc57611cdc6120fd565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611d2757611d276120fd565b60200101906001600160f81b031916908160001a9053506000611d4b846002612222565b611d569060016120b1565b90505b6001811115611ddb577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611d9757611d976120fd565b1a60f81b828281518110611dad57611dad6120fd565b60200101906001600160f81b031916908160001a90535060049490941c93611dd48161229b565b9050611d59565b508315611aaa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105ee565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a08231906024016111b5565b6060611e6f8484600085611e77565b949350505050565b606082471015611eef5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105ee565b843b611f3d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ee565b600080866001600160a01b03168587604051611f5991906122b2565b60006040518083038185875af1925050503d8060008114611f96576040519150601f19603f3d011682016040523d82523d6000602084013e611f9b565b606091505b5091509150611fab828286611fb6565b979650505050505050565b60608315611fc5575081611aaa565b825115611fd55782518084602001fd5b8160405162461bcd60e51b81526004016105ee91906121ef565b60006020828403121561200157600080fd5b81356001600160e01b031981168114611aaa57600080fd5b60006020828403121561202b57600080fd5b5035919050565b6001600160a01b03811681146110cd57600080fd5b6000806040838503121561205a57600080fd5b82359150602083013561206c81612032565b809150509250929050565b60006020828403121561208957600080fd5b813561ffff81168114611aaa57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156120c4576120c461209b565b500190565b6000602082840312156120db57600080fd5b8151611aaa81612032565b6000828210156120f8576120f861209b565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561213b57600080fd5b5051919050565b60005b8381101561215d578181015183820152602001612145565b83811115610af45750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516121a6816017850160208801612142565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516121e3816028840160208801612142565b01602801949350505050565b602081526000825180602084015261220e816040850160208701612142565b601f01601f19169190910160400192915050565b600081600019048311821515161561223c5761223c61209b565b500290565b60008261225e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561227557600080fd5b81518015158114611aaa57600080fd5b634e487b7160e01b600052604160045260246000fd5b6000816122aa576122aa61209b565b506000190190565b600082516122c4818460208701612142565b919091019291505056fea2646970667358221220552d1e141b6c142118732fe0ff44ca28a99bcb3694982e115d6b43422e461a0564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "currentPerformanceFee()": {
        "returns": {
          "_0": "current performance fee"
        }
      },
      "depositOperationLength()": {
        "returns": {
          "_0": "Length of pending deposit operations"
        }
      },
      "finishDepositStable(uint256)": {
        "params": {
          "idx": "Id of the pending deposit operation"
        }
      },
      "finishRedeemStable(uint256)": {
        "params": {
          "idx": "Id of the pending redeem operation"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initRedeemStable(uint256)": {
        "params": {
          "amount": "Amount of aUST to redeem"
        }
      },
      "investedAssets()": {
        "returns": {
          "_0": "The total amount of underlying"
        }
      },
      "redeemOperationLength()": {
        "returns": {
          "_0": "Length of pending redeem operations"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setPerfFeePct(uint16)": {
        "params": {
          "_perfFeePct": "The new performance fee %"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "applyInvestmentFee(uint256)": {
        "notice": "See {IStrategy}"
      },
      "constructor": {
        "notice": "_aUstToUstFeed is a fake chainlink feed, it is used to just inhert constructor of USTStrategy"
      },
      "currentPerformanceFee()": {
        "notice": "Calculate current performance fee amountPerformance fee is in UST"
      },
      "doHardWork()": {
        "notice": "Initiates a deposit of all the currently held UST into EthAnchorsince EthAnchor uses an asynchronous model, this function only starts the deposit process, but does not finish it."
      },
      "finishDepositStable(uint256)": {
        "notice": "Calls EthAnchor with a pending deposit ID, and attempts to finish it.Must be called some time after `_initDepositStable()`. Will only work if the EthAnchor bridge has finished processing the deposit."
      },
      "finishRedeemStable(uint256)": {
        "notice": "Calls EthAnchor with a pending redeem ID, and attempts to finish it.Must be called some time after `initRedeemStable()`. Will only work if the EthAnchor bridge has finished processing the deposit."
      },
      "initRedeemStable(uint256)": {
        "notice": "Initiates a withdrawal of UST from EthAnchorsince EthAnchor uses an asynchronous model, this function only starts the redeem process, but does not finish it."
      },
      "investedAssets()": {
        "notice": "Amount, expressed in the underlying currency, currently in the strategyboth held and invested amounts are included here, using the latest known exchange rates to the underlying currency. This will return value without performance fee."
      },
      "setPerfFeePct(uint16)": {
        "notice": "Updates the performance feeCan only be called by governance"
      },
      "underlying()": {
        "notice": "The underlying ERC20 token stored by the vault"
      },
      "vault()": {
        "notice": "The vault linked to this stragegy"
      },
      "withdrawAllToVault()": {
        "notice": "Request withdrawal from EthAnchorsince EthAnchor uses an asynchronous model, we can only request withdrawal for whole aUST"
      },
      "withdrawToVault(uint256)": {
        "notice": "Withdraws a specified amount back to the vaultsince EthAnchor uses an asynchronous model, and there is no underlying amount in the strategy, this function do nothing at all, However override interface of IStrategy."
      }
    },
    "notice": "USTAnchorStrategy for testnet. Since aUST/UST chainlink does not exist on testnet, we use EthAnchorExchangeRateFeeder to get aUST/UST exchange rate.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 7776,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "underlying",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1091"
      },
      {
        "astId": 7780,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "vault",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7782,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7785,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "ustToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1091"
      },
      {
        "astId": 7788,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "aUstToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)1091"
      },
      {
        "astId": 7790,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "perfFeePct",
        "offset": 20,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 7793,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "ethAnchorRouter",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IEthAnchorRouter)9322"
      },
      {
        "astId": 7796,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "aUstToUstFeed",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 7798,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "pendingDeposits",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7800,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "pendingRedeems",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7804,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "depositOperations",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Operation)7768_storage)dyn_storage"
      },
      {
        "astId": 7808,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "redeemOperations",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Operation)7768_storage)dyn_storage"
      },
      {
        "astId": 7810,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "convertedUst",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7812,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "_aUstToUstFeedDecimals",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 10187,
        "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
        "label": "exchangeRateFeeder",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IExchangeRateFeeder)9334"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Operation)7768_storage)dyn_storage": {
        "base": "t_struct(Operation)7768_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseStrategy.Operation[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1091": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEthAnchorRouter)9322": {
        "encoding": "inplace",
        "label": "contract IEthAnchorRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IExchangeRateFeeder)9334": {
        "encoding": "inplace",
        "label": "contract IExchangeRateFeeder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_struct(Operation)7768_storage": {
        "encoding": "inplace",
        "label": "struct BaseStrategy.Operation",
        "members": [
          {
            "astId": 7765,
            "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
            "label": "operator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7767,
            "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/test/strategy/TestUSTAnchorStrategy.sol:TestUSTAnchorStrategy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}