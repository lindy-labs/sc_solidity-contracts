{
  "address": "0x630c8C88b538598a50F05AC06647C8d1Da36C957",
  "abi": [
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setExchageRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "swapTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x45f9173baccd72379ded283479da632882e6ab19ccaa95f5043312ccc0afd130",
  "receipt": {
    "to": null,
    "from": "0xCfF577D4072BF126Cdd73CDC7353637A1Fa5f4CE",
    "contractAddress": "0x630c8C88b538598a50F05AC06647C8d1Da36C957",
    "transactionIndex": 42,
    "gasUsed": "299097",
    "logsBloom": "0x
    "blockHash": "0x735ba1baf1c66e4e9d58607f429a2ddb15877e35e9bf9213d7692279d24d6848",
    "transactionHash": "0x45f9173baccd72379ded283479da632882e6ab19ccaa95f5043312ccc0afd130",
    "logs": [],
    "blockNumber": 7867207,
    "cumulativeGasUsed": "13216516",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "535d1e8abee701d9b9e88f6935fd1381",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setExchageRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/Mock0x.sol\":\"Mock0x\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/mock/Mock0x.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./MockExchange.sol\\\";\\n\\ncontract Mock0x is MockExchange {\\n    // 0x uses a fallback function as an entry point for doing swaps,\\n    // from there, depending of the tokens included in the swap,\\n    // the call is delegated to the corresponding contract which performs the actual swap\\n    // and returns true if successful.\\n    fallback() external payable {\\n        (address from, address to, uint256 amount) = abi.decode(\\n            msg.data,\\n            (address, address, uint256)\\n        );\\n\\n        swapTokens(from, to, amount);\\n\\n        // we need to use assembly to return true for a sucessful swap\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 1)\\n            return(ptr, 0x20)\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x22208d6266441bf7b6f7239cbb0a4fa1341ff11f6421af2574bfe78ad8128bdd\",\"license\":\"MIT\"},\"contracts/mock/MockERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MockERC20 is ERC20 {\\n    uint8 private decimals_;\\n\\n    uint256 private fee;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        uint256 _totalSupply\\n    ) ERC20(_name, _symbol) {\\n        fee = 0;\\n        decimals_ = _decimals;\\n        _mint(msg.sender, _totalSupply);\\n    }\\n\\n    function decimals() public view override(ERC20) returns (uint8) {\\n        return decimals_;\\n    }\\n\\n    function updateDecimals(uint8 _decimals) external {\\n        decimals_ = _decimals;\\n    }\\n\\n    function mint(address _user, uint256 _amount) public {\\n        _mint(_user, _amount);\\n    }\\n\\n    function burn(address _user, uint256 _amount) public {\\n        _burn(_user, _amount);\\n    }\\n\\n    function setFee(uint256 _fee) public {\\n        fee = _fee;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20) {\\n        super._transfer(from, to, (amount * (10000 - fee)) / 10000);\\n    }\\n}\\n\\ncontract MockDAI is MockERC20 {\\n    constructor(uint256 supply) MockERC20(\\\"Mock DAI\\\", \\\"mockDAI\\\", 18, supply) {}\\n}\\n\\ncontract MockUSDC is MockERC20 {\\n    constructor(uint256 supply) MockERC20(\\\"Mock USDC\\\", \\\"mockUSDC\\\", 6, supply) {}\\n}\\n\\ncontract MockUST is MockERC20 {\\n    constructor(uint256 supply) MockERC20(\\\"Mock UST\\\", \\\"mockUST\\\", 18, supply) {}\\n}\\n\\ncontract MockAUST is MockERC20 {\\n    constructor(uint256 supply)\\n        MockERC20(\\\"Mock aUST\\\", \\\"mockaUST\\\", 18, supply)\\n    {}\\n}\\n\\ncontract MockLUSD is MockERC20 {\\n    constructor(uint256 supply)\\n        MockERC20(\\\"Mock LUSD\\\", \\\"mockLUSD\\\", 18, supply)\\n    {}\\n}\\n\\ncontract MockLQTY is MockERC20 {\\n    constructor(uint256 supply)\\n        MockERC20(\\\"Mock LQTY\\\", \\\"mockLQTY\\\", 18, supply)\\n    {}\\n}\\n\",\"keccak256\":\"0x1b69b7ef8935590647ff37ef9d14ce3a11c0e92fe800f33c4708256980308bba\",\"license\":\"UNLICENSED\"},\"contracts/mock/MockExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./MockERC20.sol\\\";\\n\\nabstract contract MockExchange {\\n    mapping(uint160 => uint256) exchageRates;\\n\\n    function setExchageRate(\\n        address _from,\\n        address _to,\\n        uint256 _rate // e18\\n    ) external {\\n        exchageRates[_getExchangeRateKey(_from, _to)] = _rate;\\n    }\\n\\n    function getExchangeRate(address _from, address _to)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 exchageRate = exchageRates[_getExchangeRateKey(_from, _to)];\\n        return exchageRate > 0 ? exchageRate : 1e18;\\n    }\\n\\n    function swapTokens(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) public payable {\\n        if (_to == address(0)) {\\n            payable(msg.sender).transfer(\\n                (_amount * getExchangeRate(_from, _to)) / 1e18\\n            );\\n        } else {\\n            uint256 toMint = (_amount * getExchangeRate(_from, _to)) / 1e18;\\n            MockERC20(_to).mint(msg.sender, toMint);\\n        }\\n\\n        if (_from == address(0)) {\\n            require(msg.value == _amount, \\\"MockExchange: insufficient ETH\\\");\\n        } else {\\n            MockERC20(_from).burn(msg.sender, _amount);\\n        }\\n    }\\n\\n    function _getExchangeRateKey(address _from, address _to)\\n        internal\\n        pure\\n        returns (uint160)\\n    {\\n        return (uint160(_from) << 1) ^ uint160(_to);\\n    }\\n}\\n\",\"keccak256\":\"0xc65b6f35390b37e3ef44aecca963f9fec64a515f62c0113e71b219bf29eec412\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610478806100206000396000f3fe6080604052600436106100385760003560e01c80638633b1fa1461006a578063baaa61be146100c2578063ec6cc0cc146100f45761003f565b3661003f57005b6000808061004d3682610379565b92509250925061005e838383610102565b60405160018152602081f35b34801561007657600080fd5b506100c0610085366004610379565b7401fffffffffffffffffffffffffffffffffffffffe60019390931b92909216186001600160a01b0316600090815260208190526040902055565b005b3480156100ce57600080fd5b506100e26100dd3660046103ba565b61030e565b60405190815260200160405180910390f35b6100c0610102366004610379565b6001600160a01b03821661016957336108fc670de0b6b3a7640000610127868661030e565b61013190856103f3565b61013b9190610420565b6040518115909202916000818181858888f19350505050158015610163573d6000803e3d6000fd5b50610210565b6000670de0b6b3a764000061017e858561030e565b61018890846103f3565b6101929190610420565b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018290529091506001600160a01b038416906340c10f1990604401600060405180830381600087803b1580156101f657600080fd5b505af115801561020a573d6000803e3d6000fd5b50505050505b6001600160a01b0383166102905780341461028b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4d6f636b45786368616e67653a20696e73756666696369656e74204554480000604482015260640160405180910390fd5b505050565b6040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b03841690639dc29fac90604401600060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b50505050505050565b6001600160a01b03600183901b7401fffffffffffffffffffffffffffffffffffffffe168218166000908152602081905260408120548061035757670de0b6b3a7640000610359565b805b949350505050565b6001600160a01b038116811461037657600080fd5b50565b60008060006060848603121561038e57600080fd5b833561039981610361565b925060208401356103a981610361565b929592945050506040919091013590565b600080604083850312156103cd57600080fd5b82356103d881610361565b915060208301356103e881610361565b809150509250929050565b600081600019048311821515161561041b57634e487b7160e01b600052601160045260246000fd5b500290565b60008261043d57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212202efaddaf154f6ec4ac3ae587e5aa2a2c6cb449d0059af8e9d8ab6b64a13a2cab64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c80638633b1fa1461006a578063baaa61be146100c2578063ec6cc0cc146100f45761003f565b3661003f57005b6000808061004d3682610379565b92509250925061005e838383610102565b60405160018152602081f35b34801561007657600080fd5b506100c0610085366004610379565b7401fffffffffffffffffffffffffffffffffffffffe60019390931b92909216186001600160a01b0316600090815260208190526040902055565b005b3480156100ce57600080fd5b506100e26100dd3660046103ba565b61030e565b60405190815260200160405180910390f35b6100c0610102366004610379565b6001600160a01b03821661016957336108fc670de0b6b3a7640000610127868661030e565b61013190856103f3565b61013b9190610420565b6040518115909202916000818181858888f19350505050158015610163573d6000803e3d6000fd5b50610210565b6000670de0b6b3a764000061017e858561030e565b61018890846103f3565b6101929190610420565b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018290529091506001600160a01b038416906340c10f1990604401600060405180830381600087803b1580156101f657600080fd5b505af115801561020a573d6000803e3d6000fd5b50505050505b6001600160a01b0383166102905780341461028b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4d6f636b45786368616e67653a20696e73756666696369656e74204554480000604482015260640160405180910390fd5b505050565b6040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b03841690639dc29fac90604401600060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b50505050505050565b6001600160a01b03600183901b7401fffffffffffffffffffffffffffffffffffffffe168218166000908152602081905260408120548061035757670de0b6b3a7640000610359565b805b949350505050565b6001600160a01b038116811461037657600080fd5b50565b60008060006060848603121561038e57600080fd5b833561039981610361565b925060208401356103a981610361565b929592945050506040919091013590565b600080604083850312156103cd57600080fd5b82356103d881610361565b915060208301356103e881610361565b809150509250929050565b600081600019048311821515161561041b57634e487b7160e01b600052601160045260246000fd5b500290565b60008261043d57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212202efaddaf154f6ec4ac3ae587e5aa2a2c6cb449d0059af8e9d8ab6b64a13a2cab64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11679,
        "contract": "contracts/mock/Mock0x.sol:Mock0x",
        "label": "exchageRates",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint160,t_uint256)"
      }
    ],
    "types": {
      "t_mapping(t_uint160,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint160",
        "label": "mapping(uint160 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}