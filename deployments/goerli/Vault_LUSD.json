{
  "address": "0x35BFB62942E9bDffB95E5A2a0d7F24F88522cFc3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_minLockPeriod",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_investPct",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_perfFeePct",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_lossTolerancePct",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "int128",
              "name": "tokenI",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "underlyingI",
              "type": "int128"
            }
          ],
          "internalType": "struct CurveSwapper.SwapPoolParam[]",
          "name": "_swapPools",
          "type": "tuple[]"
        },
        {
          "internalType": "uint16",
          "name": "_immediateInvestLimitPct",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "StrategyAdminCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyAmountZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyCallerNotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyCallerNotKeeper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyCallerNotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyCallerNotSettings",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyCannotTransferAdminRightsToSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyKeeperCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNoUnderlying",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotEnoughShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotIVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotRunning",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyUnderlyingCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAdminCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAmountDoesNotMatchParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAmountLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCallerNotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCallerNotKeeper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCallerNotSettings",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCallerNotSponsor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotComputeSharesWithoutPrincipal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotDeposit0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotDepositWhenClaimerInDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotDepositWhenYieldNegative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotSponsor0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotTransferAdminRightsToSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotWithdrawMoreThanAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotWithdrawWhenYieldNegative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultClaimPercentageCannotBe0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultClaimerCannotBe0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultClaimsDontAddUp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultDepositLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultDepositNameTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultDestinationCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidImmediateInvestLimitPct",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidInvestPct",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidLockPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidLossTolerance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidMinLockPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidPerformanceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultMustUseForceWithdrawToAcceptLosses",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNoPerformanceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNoYieldToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotEnoughToRebalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotOwnerOfDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotSponsor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNothingToDo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultSenderNotOwnerOfGroupId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultStrategyHasInvestedFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultStrategyNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultTreasuryCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultUnderlyingCannotBe0Address",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "tokenI",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "underlyingI",
          "type": "int128"
        }
      ],
      "name": "CurveSwapPoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CurveSwapPoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimerId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "lockedUntil",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "DepositMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "burned",
          "type": "bool"
        }
      ],
      "name": "DepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Disinvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ExitPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ExitUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "ImmediateInvestLimitPctUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "InvestPctUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Invested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "pct",
          "type": "uint16"
        }
      ],
      "name": "LossTolerancePctUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "pct",
          "type": "uint16"
        }
      ],
      "name": "PerfFeePctUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "Sponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "burned",
          "type": "bool"
        }
      ],
      "name": "Unsponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimerId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnedShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "perfFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalUnderlying",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "YieldClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEEPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DEPOSIT_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SPONSOR_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_SPONSOR_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTINGS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHARES_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPONSOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accumulatedPerfFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "int128",
              "name": "tokenI",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "underlyingI",
              "type": "int128"
            }
          ],
          "internalType": "struct CurveSwapper.SwapPoolParam",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockDuration",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "pct",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IVault.ClaimParams[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.DepositParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "depositIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockDuration",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "pct",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IVault.ClaimParams[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.DepositParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "depositForGroupId",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "depositIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositGroupIdOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "claimerId",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitUnpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "forceWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "immediateInvestLimitPct",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investPct",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxInvestableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "alreadyInvested",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lossTolerancePct",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLockPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "partialUnsponsor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "partialWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perfFeePct",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimerId",
          "type": "address"
        }
      ],
      "name": "principalOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_pct",
          "type": "uint16"
        }
      ],
      "name": "setImmediateInvestLimitPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_investPct",
          "type": "uint16"
        }
      ],
      "name": "setInvestPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "pct",
          "type": "uint16"
        }
      ],
      "name": "setLossTolerancePct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_perfFeePct",
          "type": "uint16"
        }
      ],
      "name": "setPerfFeePct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimerId",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "sponsor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swappers",
      "outputs": [
        {
          "internalType": "contract ICurve",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "underlyingDecimals",
          "type": "uint8"
        },
        {
          "internalType": "int128",
          "name": "tokenI",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "underlyingI",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSponsored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingMinusSponsored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdminRights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "unsponsor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateInvested",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "yieldFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimableYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perfFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
  "receipt": {
    "to": null,
    "from": "0xCfF577D4072BF126Cdd73CDC7353637A1Fa5f4CE",
    "contractAddress": "0x35BFB62942E9bDffB95E5A2a0d7F24F88522cFc3",
    "transactionIndex": 50,
    "gasUsed": "5390231",
    "logsBloom": "0x
    "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a",
    "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
    "logs": [
      {
        "transactionIndex": 50,
        "blockNumber": 8457340,
        "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
        "address": "0x35BFB62942E9bDffB95E5A2a0d7F24F88522cFc3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cff577d4072bf126cdd73cdc7353637a1fa5f4ce",
          "0x000000000000000000000000cff577d4072bf126cdd73cdc7353637a1fa5f4ce"
        ],
        "data": "0x",
        "logIndex": 68,
        "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a"
      },
      {
        "transactionIndex": 50,
        "blockNumber": 8457340,
        "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
        "address": "0x35BFB62942E9bDffB95E5A2a0d7F24F88522cFc3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab",
          "0x000000000000000000000000cff577d4072bf126cdd73cdc7353637a1fa5f4ce",
          "0x000000000000000000000000cff577d4072bf126cdd73cdc7353637a1fa5f4ce"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a"
      },
      {
        "transactionIndex": 50,
        "blockNumber": 8457340,
        "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
        "address": "0x35BFB62942E9bDffB95E5A2a0d7F24F88522cFc3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf603095",
          "0x000000000000000000000000cff577d4072bf126cdd73cdc7353637a1fa5f4ce",
          "0x000000000000000000000000cff577d4072bf126cdd73cdc7353637a1fa5f4ce"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a"
      },
      {
        "transactionIndex": 50,
        "blockNumber": 8457340,
        "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
        "address": "0x35BFB62942E9bDffB95E5A2a0d7F24F88522cFc3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x1597bc5e34ff090612f53164e4e642d2ab4fc78bffe19ed1b602a0d12559561a",
          "0x000000000000000000000000cff577d4072bf126cdd73cdc7353637a1fa5f4ce",
          "0x000000000000000000000000cff577d4072bf126cdd73cdc7353637a1fa5f4ce"
        ],
        "data": "0x",
        "logIndex": 71,
        "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a"
      },
      {
        "transactionIndex": 50,
        "blockNumber": 8457340,
        "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
        "address": "0xb6C0754530B89C80A2eb5068589ea0A8c854D636",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000035bfb62942e9bdffb95e5a2a0d7f24f88522cfc3",
          "0x0000000000000000000000007357681a94b7cbc94c6c6877dd6101fa36df4d20"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 72,
        "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a"
      },
      {
        "transactionIndex": 50,
        "blockNumber": 8457340,
        "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
        "address": "0x173952f281fFe8e2d190C9BB5C30c1E8A21C6bC1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000035bfb62942e9bdffb95e5a2a0d7f24f88522cfc3",
          "0x0000000000000000000000007357681a94b7cbc94c6c6877dd6101fa36df4d20"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 73,
        "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a"
      },
      {
        "transactionIndex": 50,
        "blockNumber": 8457340,
        "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
        "address": "0x35BFB62942E9bDffB95E5A2a0d7F24F88522cFc3",
        "topics": [
          "0x1576b5fcfa863788d9ef6558cab7aa68d4b48c44eb7bacaf1a8ac6d6b9d26f94",
          "0x000000000000000000000000173952f281ffe8e2d190c9bb5c30c1e8a21c6bc1",
          "0x0000000000000000000000007357681a94b7cbc94c6c6877dd6101fa36df4d20"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 74,
        "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a"
      },
      {
        "transactionIndex": 50,
        "blockNumber": 8457340,
        "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
        "address": "0x9d5fCB5b31E8Eba24D8A47ed28c94c93e72d98B1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000035bfb62942e9bdffb95e5a2a0d7f24f88522cfc3",
          "0x0000000000000000000000007357681a94b7cbc94c6c6877dd6101fa36df4d20"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 75,
        "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a"
      },
      {
        "transactionIndex": 50,
        "blockNumber": 8457340,
        "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
        "address": "0x35BFB62942E9bDffB95E5A2a0d7F24F88522cFc3",
        "topics": [
          "0x1576b5fcfa863788d9ef6558cab7aa68d4b48c44eb7bacaf1a8ac6d6b9d26f94",
          "0x0000000000000000000000009d5fcb5b31e8eba24d8a47ed28c94c93e72d98b1",
          "0x0000000000000000000000007357681a94b7cbc94c6c6877dd6101fa36df4d20"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 76,
        "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a"
      },
      {
        "transactionIndex": 50,
        "blockNumber": 8457340,
        "transactionHash": "0xe1966f44c9bad8fe6aaf9a046db4581e7551513fa04650baee9b57c83956c490",
        "address": "0x35BFB62942E9bDffB95E5A2a0d7F24F88522cFc3",
        "topics": [
          "0x7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d1",
          "0x000000000000000000000000cff577d4072bf126cdd73cdc7353637a1fa5f4ce"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0x8d77829d4b0f561e5214d67815164af5441cb8c6cf9495399d2cbffa97002b0a"
      }
    ],
    "blockNumber": 8457340,
    "cumulativeGasUsed": "13948197",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb6C0754530B89C80A2eb5068589ea0A8c854D636",
    1,
    9000,
    "0xCfF577D4072BF126Cdd73CDC7353637A1Fa5f4CE",
    "0xCfF577D4072BF126Cdd73CDC7353637A1Fa5f4CE",
    100,
    200,
    [
      {
        "token": "0x173952f281fFe8e2d190C9BB5C30c1E8A21C6bC1",
        "pool": "0x7357681A94B7cBc94c6C6877DD6101FA36dF4D20",
        "tokenI": 1,
        "underlyingI": 0
      },
      {
        "token": "0x9d5fCB5b31E8Eba24D8A47ed28c94c93e72d98B1",
        "pool": "0x7357681A94B7cBc94c6C6877DD6101FA36dF4D20",
        "tokenI": 2,
        "underlyingI": 0
      }
    ],
    0
  ],
  "numDeployments": 2,
  "solcInputHash": "e0752d7526ed9b7295ab47e7b3ee8c8b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_minLockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_investPct\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_perfFeePct\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_lossTolerancePct\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"tokenI\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"underlyingI\",\"type\":\"int128\"}],\"internalType\":\"struct CurveSwapper.SwapPoolParam[]\",\"name\":\"_swapPools\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"_immediateInvestLimitPct\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"StrategyAdminCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyAmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyCallerNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyCallerNotKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyCallerNotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyCallerNotSettings\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyCannotTransferAdminRightsToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyKeeperCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNoUnderlying\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotEnoughShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotIVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotRunning\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyUnderlyingCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAdminCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAmountDoesNotMatchParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAmountLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCallerNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCallerNotKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCallerNotSettings\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCallerNotSponsor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotComputeSharesWithoutPrincipal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotDeposit0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotDepositWhenClaimerInDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotDepositWhenYieldNegative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotSponsor0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotTransferAdminRightsToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotWithdrawMoreThanAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotWithdrawWhenYieldNegative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultClaimPercentageCannotBe0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultClaimerCannotBe0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultClaimsDontAddUp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultDepositLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultDepositNameTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultDestinationCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidImmediateInvestLimitPct\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidInvestPct\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidLockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidLossTolerance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidMinLockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidPerformanceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultMustUseForceWithdrawToAcceptLosses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNoPerformanceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNoYieldToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotEnoughToRebalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotOwnerOfDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotSponsor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNothingToDo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultSenderNotOwnerOfGroupId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultStrategyHasInvestedFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultStrategyNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultTreasuryCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultUnderlyingCannotBe0Address\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"tokenI\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"underlyingI\",\"type\":\"int128\"}],\"name\":\"CurveSwapPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CurveSwapPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimerId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DepositMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Disinvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExitPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExitUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"ImmediateInvestLimitPctUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"InvestPctUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"}],\"name\":\"LossTolerancePctUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"}],\"name\":\"PerfFeePctUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"Sponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"name\":\"Unsponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimerId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perfFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SPONSOR_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SPONSOR_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTINGS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARES_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPONSOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedPerfFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"tokenI\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"underlyingI\",\"type\":\"int128\"}],\"internalType\":\"struct CurveSwapper.SwapPoolParam\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.ClaimParams[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.DepositParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.ClaimParams[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.DepositParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"depositForGroupId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositGroupIdOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimerId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"forceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immediateInvestLimitPct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investPct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxInvestableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyInvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossTolerancePct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"partialUnsponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"partialWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perfFeePct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimerId\",\"type\":\"address\"}],\"name\":\"principalOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_pct\",\"type\":\"uint16\"}],\"name\":\"setImmediateInvestLimitPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_investPct\",\"type\":\"uint16\"}],\"name\":\"setInvestPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"pct\",\"type\":\"uint16\"}],\"name\":\"setLossTolerancePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_perfFeePct\",\"type\":\"uint16\"}],\"name\":\"setPerfFeePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimerId\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"sponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"int128\",\"name\":\"tokenI\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"underlyingI\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSponsored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingMinusSponsored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"unsponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateInvested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"yieldFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool((address,address,int128,int128))\":{\"params\":{\"_param\":\"Swap pool params\"}},\"claimYield(address)\":{\"params\":{\"_to\":\"Address that will receive the yield.\"}},\"constructor\":{\"params\":{\"_admin\":\"Vault admin address\",\"_investPct\":\"Percentage of the total underlying to invest in the strategy\",\"_lossTolerancePct\":\"Loss tolerance when investing through the strategy\",\"_minLockPeriod\":\"Minimum lock period to deposit\",\"_perfFeePct\":\"Performance fee percentage\",\"_swapPools\":\"Swap pools used to automatically convert tokens to underlying\",\"_treasury\":\"Treasury address to collect performance fee\",\"_underlying\":\"Underlying ERC20 token to use.\"}},\"deposit((address,uint64,uint256,(uint16,address,bytes)[],string,uint256))\":{\"params\":{\"_params\":\"Deposit params\"}},\"depositForGroupId(uint256,(address,uint64,uint256,(uint16,address,bytes)[],string,uint256))\":{\"params\":{\"_groupId\":\"The group id for the new deposit\",\"_params\":\"Deposit params\"}},\"exitPaused()\":{\"details\":\"Returns true if the contract is exitPaused, and false otherwise.\"},\"forceWithdraw(address,uint256[])\":{\"params\":{\"_ids\":\"Array with the ids of the deposits.\",\"_to\":\"Address that will receive the funds.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getUnderlying()\":{\"returns\":{\"_0\":\"The address of the vault's main underlying token\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"investState()\":{\"returns\":{\"alreadyInvested\":\"already invested amount\",\"maxInvestableAmount\":\"maximum investable amount\"}},\"partialUnsponsor(address,uint256[],uint256[])\":{\"params\":{\"_amounts\":\"Array with the amounts to withdraw.\",\"_ids\":\"Array with the ids of the deposits.\",\"_to\":\"Address that will receive the funds.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removePool(address)\":{\"params\":{\"_inputToken\":\"the token to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setImmediateInvestLimitPct(uint16)\":{\"params\":{\"_pct\":\"the new immediate invest limit percentage\"}},\"setInvestPct(uint16)\":{\"params\":{\"_investPct\":\"the new invest percentage\"}},\"setLossTolerancePct(uint16)\":{\"params\":{\"_pct\":\"the new investment fee estimated percentage.\"}},\"setPerfFeePct(uint16)\":{\"params\":{\"_perfFeePct\":\"the new performance fee.\"}},\"setStrategy(address)\":{\"params\":{\"_strategy\":\"the new strategy's address.\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"the new strategy's address.\"}},\"sponsor(address,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount to sponsor.\",\"_inputToken\":\"The input token to deposit.\",\"_lockedUntil\":\"When the sponsor can unsponsor the amount.\"}},\"totalUnderlyingMinusSponsored()\":{\"returns\":{\"_0\":\"Total amount of principal and yield help by the vault (not including sponsored amount and performance fee).\"}},\"transferAdminRights(address)\":{\"params\":{\"_newAdmin\":\"The new admin account.\"}},\"unsponsor(address,uint256[])\":{\"params\":{\"_ids\":\"Array with the ids of the deposits.\",\"_to\":\"Address that will receive the funds.\"}},\"withdraw(address,uint256[])\":{\"params\":{\"_ids\":\"Array with the ids of the deposits.\",\"_to\":\"Address that will receive the funds.\"}},\"yieldFor(address)\":{\"params\":{\"_to\":\"address to consider.\"},\"returns\":{\"claimableYield\":\"claimable yield for @param _to, share of generated yield by @param _to,      and performance fee from generated yield\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CurveSwapPoolAdded(address,address,int128,int128)\":{\"notice\":\"Emitted when a new swap pool is added\"},\"CurveSwapPoolRemoved(address)\":{\"notice\":\"Emitted when a swap pool is removed\"},\"Sponsored(uint256,uint256,address,uint256)\":{\"notice\":\"Emitted when a new sponsor deposit is created\"},\"Swap(address,address,uint256,uint256)\":{\"notice\":\"Emitted after every swap\"},\"Unsponsored(uint256,uint256,address,bool)\":{\"notice\":\"Emitted when an existing sponsor withdraws\"}},\"kind\":\"user\",\"methods\":{\"KEEPER_ROLE()\":{\"notice\":\"Role allowed to invest/desinvest from strategy\"},\"MAX_DEPOSIT_LOCK_DURATION()\":{\"notice\":\"Maximum lock for each deposit\"},\"MAX_SPONSOR_LOCK_DURATION()\":{\"notice\":\"Maximum lock for each sponsor\"},\"MIN_SPONSOR_LOCK_DURATION()\":{\"notice\":\"Minimum lock for each sponsor\"},\"SETTINGS_ROLE()\":{\"notice\":\"Role allowed to change settings such as performance fee and investment fee\"},\"SHARES_MULTIPLIER()\":{\"notice\":\"Helper constant for computing shares without losing precision\"},\"SPONSOR_ROLE()\":{\"notice\":\"Role for sponsors allowed to call sponsor/unsponsor\"},\"accumulatedPerfFee()\":{\"notice\":\"Current accumulated performance fee;\"},\"addPool((address,address,int128,int128))\":{\"notice\":\"Adds a new curve swap pool from an input token to {underlying}\"},\"claimYield(address)\":{\"notice\":\"Accumulate performance fee and transfers rest yield generated for the caller to\"},\"claimers(address)\":{\"notice\":\"claimer address => claimer data\"},\"deposit((address,uint64,uint256,(uint16,address,bytes)[],string,uint256))\":{\"notice\":\"Creates a new deposit\"},\"depositForGroupId(uint256,(address,uint64,uint256,(uint16,address,bytes)[],string,uint256))\":{\"notice\":\"Creates a new deposit using the specified group id\"},\"deposits(uint256)\":{\"notice\":\"deposit ID => deposit data\"},\"immediateInvestLimitPct()\":{\"notice\":\"Percentage of the max investable amount until which a deposit is immediately invested into the strategy.\"},\"investPct()\":{\"notice\":\"Percentage of the total underlying to invest in the strategy\"},\"investState()\":{\"notice\":\"Calculate maximum investable amount and already invested amount\"},\"lossTolerancePct()\":{\"notice\":\"Loss tolerance pct\"},\"minLockPeriod()\":{\"notice\":\"Minimum lock period for each deposit\"},\"partialUnsponsor(address,uint256[],uint256[])\":{\"notice\":\"fails if there are not enough funds to withdraw the specified amounts.\"},\"perfFeePct()\":{\"notice\":\"Performance fee percentage\"},\"removePool(address)\":{\"notice\":\"Removes an existing swap pool, and the ability to deposit the given token as underlying\"},\"setImmediateInvestLimitPct(uint16)\":{\"notice\":\"Update immediate invest limit percentage Emits {ImmediateInvestLimitPctUpdated} event\"},\"setInvestPct(uint16)\":{\"notice\":\"Update invest percentage Emits {InvestPctUpdated} event\"},\"setLossTolerancePct(uint16)\":{\"notice\":\"Changes the estimated investment fee used by the strategy.\"},\"setPerfFeePct(uint16)\":{\"notice\":\"Changes the performance fee used by the vault.\"},\"setStrategy(address)\":{\"notice\":\"Changes the strategy used by the vault.if there is invested funds in previous strategy, it is not allowed to set new strategy.\"},\"setTreasury(address)\":{\"notice\":\"Changes the treasury used by the vault.\"},\"strategy()\":{\"notice\":\"The investment strategy\"},\"swappers(address)\":{\"notice\":\"token => curve pool (for trading token/underlying)\"},\"totalPrincipal()\":{\"notice\":\"The total of principal deposited\"},\"totalShares()\":{\"notice\":\"Total amount of shares\"},\"totalSponsored()\":{\"notice\":\"Total amount currently sponsored\"},\"totalUnderlying()\":{\"notice\":\"Total amount of underlying currently controlled by the vault and the its strategy.\"},\"totalUnderlyingMinusSponsored()\":{\"notice\":\"Computes the total amount of principal + yield currently controlled by the vault and the strategy. The principal + yield is the total amount of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee.\"},\"transferAdminRights(address)\":{\"notice\":\"Transfers administrator rights for the Vault to another account, revoking all current admin's roles and setting up the roles for the new admin.Can only be called by the admin.\"},\"treasury()\":{\"notice\":\"Treasury address to collect performance fee\"},\"underlying()\":{\"notice\":\"Underlying ERC20 token accepted by the vault\"},\"unsponsor(address,uint256[])\":{\"notice\":\"Withdraws the sponsored amount for the deposits with the ids provided\"},\"updateInvested()\":{\"notice\":\"Update the invested amount;\"},\"withdrawPerformanceFee()\":{\"notice\":\"Withdraws any pending performance fee amount back to the treasury\"},\"yieldFor(address)\":{\"notice\":\"Computes the amount of yield available for an an address.\"}},\"notice\":\"A vault where other accounts can deposit an underlying token currency and set distribution params for their principal and yieldThe underlying token can be automatically swapped from any configured ERC20 token via {CurveSwapper}\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport {IVault} from \\\"./vault/IVault.sol\\\";\\nimport {IVaultSponsoring} from \\\"./vault/IVaultSponsoring.sol\\\";\\nimport {IVaultSettings} from \\\"./vault/IVaultSettings.sol\\\";\\nimport {CurveSwapper} from \\\"./vault/CurveSwapper.sol\\\";\\nimport {PercentMath} from \\\"./lib/PercentMath.sol\\\";\\nimport {ExitPausable} from \\\"./lib/ExitPausable.sol\\\";\\nimport {IStrategy} from \\\"./strategy/IStrategy.sol\\\";\\nimport {CustomErrors} from \\\"./interfaces/CustomErrors.sol\\\";\\n\\n/**\\n * A vault where other accounts can deposit an underlying token\\n * currency and set distribution params for their principal and yield\\n *\\n * @notice The underlying token can be automatically swapped from any configured ERC20 token via {CurveSwapper}\\n */\\ncontract Vault is\\n    IVault,\\n    IVaultSponsoring,\\n    IVaultSettings,\\n    CurveSwapper,\\n    Context,\\n    ERC165,\\n    AccessControl,\\n    ReentrancyGuard,\\n    Pausable,\\n    ExitPausable,\\n    CustomErrors\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Metadata;\\n    using PercentMath for uint256;\\n    using PercentMath for uint16;\\n    using Counters for Counters.Counter;\\n\\n    //\\n    // Constants\\n    //\\n\\n    /// Role allowed to invest/desinvest from strategy\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n\\n    /// Role allowed to change settings such as performance fee and investment fee\\n    bytes32 public constant SETTINGS_ROLE = keccak256(\\\"SETTINGS_ROLE\\\");\\n\\n    /// Role for sponsors allowed to call sponsor/unsponsor\\n    bytes32 public constant SPONSOR_ROLE = keccak256(\\\"SPONSOR_ROLE\\\");\\n\\n    /// Minimum lock for each sponsor\\n    uint64 public constant MIN_SPONSOR_LOCK_DURATION = 2 weeks;\\n\\n    /// Maximum lock for each sponsor\\n    uint64 public constant MAX_SPONSOR_LOCK_DURATION = 24 weeks;\\n\\n    /// Maximum lock for each deposit\\n    uint64 public constant MAX_DEPOSIT_LOCK_DURATION = 24 weeks;\\n\\n    /// Helper constant for computing shares without losing precision\\n    uint256 public constant SHARES_MULTIPLIER = 1e18;\\n\\n    //\\n    // State\\n    //\\n\\n    /// @inheritdoc IVault\\n    IERC20Metadata public immutable override(IVault) underlying;\\n\\n    /// @inheritdoc IVault\\n    uint16 public override(IVault) investPct;\\n\\n    /// @inheritdoc IVault\\n    uint64 public immutable override(IVault) minLockPeriod;\\n\\n    /// @inheritdoc IVaultSponsoring\\n    uint256 public override(IVaultSponsoring) totalSponsored;\\n\\n    /// @inheritdoc IVault\\n    uint256 public override(IVault) totalShares;\\n\\n    /// @inheritdoc IVault\\n    uint16 public override(IVault) immediateInvestLimitPct;\\n\\n    /// The investment strategy\\n    IStrategy public strategy;\\n\\n    /// Unique IDs to correlate donations that belong to the same foundation\\n    uint256 private _depositGroupIds;\\n    mapping(uint256 => address) public depositGroupIdOwner;\\n\\n    /// deposit ID => deposit data\\n    mapping(uint256 => Deposit) public deposits;\\n\\n    /// Counter for deposit ids\\n    Counters.Counter private _depositTokenIds;\\n\\n    /// claimer address => claimer data\\n    mapping(address => Claimer) public claimers;\\n\\n    /// The total of principal deposited\\n    uint256 public override(IVault) totalPrincipal;\\n\\n    /// Treasury address to collect performance fee\\n    address public treasury;\\n\\n    /// Performance fee percentage\\n    uint16 public perfFeePct;\\n\\n    /// Current accumulated performance fee;\\n    uint256 public accumulatedPerfFee;\\n\\n    /// Loss tolerance pct\\n    uint16 public lossTolerancePct;\\n\\n    /// Rebalance minimum\\n    uint256 private immutable rebalanceMinimum;\\n\\n    /**\\n     * @param _underlying Underlying ERC20 token to use.\\n     * @param _minLockPeriod Minimum lock period to deposit\\n     * @param _investPct Percentage of the total underlying to invest in the strategy\\n     * @param _treasury Treasury address to collect performance fee\\n     * @param _admin Vault admin address\\n     * @param _perfFeePct Performance fee percentage\\n     * @param _lossTolerancePct Loss tolerance when investing through the strategy\\n     * @param _swapPools Swap pools used to automatically convert tokens to underlying\\n     */\\n    constructor(\\n        IERC20Metadata _underlying,\\n        uint64 _minLockPeriod,\\n        uint16 _investPct,\\n        address _treasury,\\n        address _admin,\\n        uint16 _perfFeePct,\\n        uint16 _lossTolerancePct,\\n        SwapPoolParam[] memory _swapPools,\\n        uint16 _immediateInvestLimitPct\\n    ) {\\n        if (!_immediateInvestLimitPct.validPct())\\n            revert VaultInvalidImmediateInvestLimitPct();\\n        if (!_investPct.validPct()) revert VaultInvalidInvestPct();\\n        if (!_perfFeePct.validPct()) revert VaultInvalidPerformanceFee();\\n        if (!_lossTolerancePct.validPct()) revert VaultInvalidLossTolerance();\\n        if (address(_underlying) == address(0x0))\\n            revert VaultUnderlyingCannotBe0Address();\\n        if (_treasury == address(0x0)) revert VaultTreasuryCannotBe0Address();\\n        if (_admin == address(0x0)) revert VaultAdminCannotBe0Address();\\n        if (_minLockPeriod == 0 || _minLockPeriod > MAX_DEPOSIT_LOCK_DURATION)\\n            revert VaultInvalidMinLockPeriod();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(KEEPER_ROLE, _admin);\\n        _grantRole(SETTINGS_ROLE, _admin);\\n        _grantRole(SPONSOR_ROLE, _admin);\\n\\n        investPct = _investPct;\\n        underlying = _underlying;\\n        treasury = _treasury;\\n        minLockPeriod = _minLockPeriod;\\n        perfFeePct = _perfFeePct;\\n        lossTolerancePct = _lossTolerancePct;\\n        immediateInvestLimitPct = _immediateInvestLimitPct;\\n\\n        rebalanceMinimum = 10 * 10**underlying.decimals();\\n\\n        _addPools(_swapPools);\\n\\n        emit TreasuryUpdated(_treasury);\\n    }\\n\\n    //\\n    // Modifiers\\n    //\\n\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender))\\n            revert VaultCallerNotAdmin();\\n        _;\\n    }\\n\\n    modifier onlySettings() {\\n        if (!hasRole(SETTINGS_ROLE, msg.sender))\\n            revert VaultCallerNotSettings();\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        if (!hasRole(KEEPER_ROLE, msg.sender)) revert VaultCallerNotKeeper();\\n        _;\\n    }\\n\\n    modifier onlySponsor() {\\n        if (!hasRole(SPONSOR_ROLE, msg.sender)) revert VaultCallerNotSponsor();\\n        _;\\n    }\\n\\n    /**\\n     * Transfers administrator rights for the Vault to another account,\\n     * revoking all current admin's roles and setting up the roles for the new admin.\\n     *\\n     * @notice Can only be called by the admin.\\n     *\\n     * @param _newAdmin The new admin account.\\n     */\\n    function transferAdminRights(address _newAdmin) external onlyAdmin {\\n        if (_newAdmin == address(0x0)) revert VaultAdminCannotBe0Address();\\n        if (_newAdmin == msg.sender)\\n            revert VaultCannotTransferAdminRightsToSelf();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _newAdmin);\\n        _grantRole(KEEPER_ROLE, _newAdmin);\\n        _grantRole(SETTINGS_ROLE, _newAdmin);\\n        _grantRole(SPONSOR_ROLE, _newAdmin);\\n\\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _revokeRole(KEEPER_ROLE, msg.sender);\\n        _revokeRole(SETTINGS_ROLE, msg.sender);\\n        _revokeRole(SPONSOR_ROLE, msg.sender);\\n    }\\n\\n    //\\n    // IVault\\n    //\\n\\n    /// @inheritdoc IVault\\n    function totalUnderlying() public view override(IVault) returns (uint256) {\\n        if (address(strategy) != address(0)) {\\n            return\\n                underlying.balanceOf(address(this)) + strategy.investedAssets();\\n        }\\n\\n        return underlying.balanceOf(address(this));\\n    }\\n\\n    /// @inheritdoc IVault\\n    function yieldFor(address _to)\\n        public\\n        view\\n        override(IVault)\\n        returns (\\n            uint256 claimableYield,\\n            uint256 shares,\\n            uint256 perfFee\\n        )\\n    {\\n        uint256 claimerPrincipal = claimers[_to].totalPrincipal;\\n        uint256 claimerShares = claimers[_to].totalShares;\\n        uint256 _totalUnderlyingMinusSponsored = totalUnderlyingMinusSponsored();\\n\\n        uint256 currentClaimerPrincipal = _computeAmount(\\n            claimerShares,\\n            totalShares,\\n            _totalUnderlyingMinusSponsored\\n        );\\n\\n        if (currentClaimerPrincipal <= claimerPrincipal) {\\n            return (0, 0, 0);\\n        }\\n\\n        uint256 yieldWithPerfFee = currentClaimerPrincipal - claimerPrincipal;\\n\\n        shares = _computeShares(\\n            yieldWithPerfFee,\\n            totalShares,\\n            _totalUnderlyingMinusSponsored\\n        );\\n        uint256 sharesAmount = _computeAmount(\\n            shares,\\n            totalShares,\\n            _totalUnderlyingMinusSponsored\\n        );\\n\\n        perfFee = sharesAmount.pctOf(perfFeePct);\\n        claimableYield = sharesAmount - perfFee;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function depositForGroupId(uint256 _groupId, DepositParams calldata _params)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256[] memory depositIds)\\n    {\\n        if (depositGroupIdOwner[_groupId] != msg.sender)\\n            revert VaultSenderNotOwnerOfGroupId();\\n\\n        depositIds = _doDeposit(_groupId, _params);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function deposit(DepositParams calldata _params)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256[] memory depositIds)\\n    {\\n        uint256 depositGroupId = _depositGroupIds;\\n        _depositGroupIds = depositGroupId + 1;\\n\\n        depositGroupIdOwner[depositGroupId] = msg.sender;\\n        depositIds = _doDeposit(depositGroupId, _params);\\n    }\\n\\n    function _doDeposit(uint256 _groupId, DepositParams calldata _params)\\n        internal\\n        returns (uint256[] memory depositIds)\\n    {\\n        if (_params.amount == 0) revert VaultCannotDeposit0();\\n        if (\\n            _params.lockDuration < minLockPeriod ||\\n            _params.lockDuration > MAX_DEPOSIT_LOCK_DURATION\\n        ) revert VaultInvalidLockPeriod();\\n        if (bytes(_params.name).length < 3) revert VaultDepositNameTooShort();\\n\\n        uint256 principalMinusStrategyFee = _applyLossTolerance(totalPrincipal);\\n        uint256 previousTotalUnderlying = totalUnderlyingMinusSponsored();\\n        if (principalMinusStrategyFee > previousTotalUnderlying)\\n            revert VaultCannotDepositWhenYieldNegative();\\n\\n        _transferAndCheckInputToken(\\n            msg.sender,\\n            _params.inputToken,\\n            _params.amount\\n        );\\n        uint256 newUnderlyingAmount = _swapIntoUnderlying(\\n            _params.inputToken,\\n            _params.amount,\\n            _params.slippage\\n        );\\n\\n        uint64 lockedUntil = _params.lockDuration + _blockTimestamp();\\n\\n        depositIds = _createDeposit(\\n            previousTotalUnderlying,\\n            newUnderlyingAmount,\\n            lockedUntil,\\n            _params.claims,\\n            _params.name,\\n            _groupId\\n        );\\n\\n        if (immediateInvestLimitPct != 0) _immediateInvestment();\\n    }\\n\\n    /// @inheritdoc IVault\\n    function claimYield(address _to)\\n        external\\n        override(IVault)\\n        nonReentrant\\n        whenNotExitPaused\\n    {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        (uint256 yield, uint256 shares, uint256 fee) = yieldFor(msg.sender);\\n\\n        if (yield == 0) revert VaultNoYieldToClaim();\\n\\n        uint256 _totalUnderlyingMinusSponsored = totalUnderlyingMinusSponsored();\\n        uint256 _totalShares = totalShares;\\n\\n        accumulatedPerfFee += fee;\\n\\n        claimers[msg.sender].totalShares -= shares;\\n        totalShares -= shares;\\n\\n        emit YieldClaimed(\\n            msg.sender,\\n            _to,\\n            yield,\\n            shares,\\n            fee,\\n            _totalUnderlyingMinusSponsored,\\n            _totalShares\\n        );\\n\\n        if (address(strategy) != address(0)) {\\n            uint256 yieldTransferred = strategy.transferYield(_to, yield);\\n            if (yieldTransferred >= yield) {\\n                return;\\n            }\\n\\n            yield -= yieldTransferred;\\n        }\\n\\n        _rebalanceBeforeWithdrawing(yield);\\n\\n        underlying.safeTransfer(_to, yield);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function withdraw(address _to, uint256[] calldata _ids)\\n        external\\n        override(IVault)\\n        nonReentrant\\n        whenNotExitPaused\\n    {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        if (totalPrincipal > totalUnderlyingMinusSponsored())\\n            revert VaultCannotWithdrawWhenYieldNegative();\\n\\n        _withdrawAll(_to, _ids, false);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function forceWithdraw(address _to, uint256[] calldata _ids)\\n        external\\n        nonReentrant\\n        whenNotExitPaused\\n    {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        _withdrawAll(_to, _ids, true);\\n    }\\n\\n    function partialWithdraw(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external nonReentrant whenNotExitPaused {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        _withdrawPartial(_to, _ids, _amounts);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function investState()\\n        public\\n        view\\n        override(IVault)\\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested)\\n    {\\n        if (address(strategy) == address(0)) {\\n            return (0, 0);\\n        }\\n\\n        maxInvestableAmount = totalUnderlying().pctOf(investPct);\\n        alreadyInvested = strategy.investedAssets();\\n    }\\n\\n    /// @inheritdoc IVault\\n    function updateInvested() external override(IVault) onlyKeeper {\\n        if (address(strategy) == address(0)) revert VaultStrategyNotSet();\\n\\n        (uint256 maxInvestableAmount, uint256 alreadyInvested) = investState();\\n\\n        if (maxInvestableAmount == alreadyInvested) revert VaultNothingToDo();\\n\\n        // disinvest\\n        if (alreadyInvested > maxInvestableAmount) {\\n            uint256 disinvestAmount = alreadyInvested - maxInvestableAmount;\\n\\n            if (disinvestAmount < rebalanceMinimum)\\n                revert VaultNotEnoughToRebalance();\\n\\n            uint256 amountWithdrawn = strategy.withdrawToVault(disinvestAmount);\\n\\n            emit Disinvested(amountWithdrawn);\\n\\n            return;\\n        }\\n\\n        // invest\\n        uint256 investAmount = maxInvestableAmount - alreadyInvested;\\n\\n        if (investAmount < rebalanceMinimum) revert VaultNotEnoughToRebalance();\\n\\n        underlying.safeTransfer(address(strategy), investAmount);\\n\\n        strategy.invest();\\n\\n        emit Invested(investAmount);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function withdrawPerformanceFee() external override(IVault) onlyKeeper {\\n        uint256 _perfFee = accumulatedPerfFee;\\n        if (_perfFee == 0) revert VaultNoPerformanceFee();\\n\\n        accumulatedPerfFee = 0;\\n        _rebalanceBeforeWithdrawing(_perfFee);\\n\\n        emit FeeWithdrawn(_perfFee);\\n        underlying.safeTransfer(treasury, _perfFee);\\n    }\\n\\n    //\\n    // IVaultSponsoring\\n    //\\n\\n    /// @inheritdoc IVaultSponsoring\\n    function sponsor(\\n        address _inputToken,\\n        uint256 _amount,\\n        uint256 _lockDuration,\\n        uint256 _slippage\\n    )\\n        external\\n        override(IVaultSponsoring)\\n        nonReentrant\\n        onlySponsor\\n        whenNotPaused\\n    {\\n        if (_amount == 0) revert VaultCannotSponsor0();\\n\\n        if (\\n            _lockDuration < MIN_SPONSOR_LOCK_DURATION ||\\n            _lockDuration > MAX_SPONSOR_LOCK_DURATION\\n        ) revert VaultInvalidLockPeriod();\\n\\n        uint256 lockedUntil = _lockDuration + block.timestamp;\\n        _depositTokenIds.increment();\\n        uint256 tokenId = _depositTokenIds.current();\\n\\n        _transferAndCheckInputToken(msg.sender, _inputToken, _amount);\\n        uint256 underlyingAmount = _swapIntoUnderlying(\\n            _inputToken,\\n            _amount,\\n            _slippage\\n        );\\n\\n        deposits[tokenId] = Deposit(\\n            underlyingAmount,\\n            msg.sender,\\n            address(0),\\n            lockedUntil\\n        );\\n        totalSponsored += underlyingAmount;\\n\\n        emit Sponsored(tokenId, underlyingAmount, msg.sender, lockedUntil);\\n    }\\n\\n    /// @inheritdoc IVaultSponsoring\\n    function unsponsor(address _to, uint256[] calldata _ids)\\n        external\\n        nonReentrant\\n        whenNotExitPaused\\n    {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        _unsponsor(_to, _ids);\\n    }\\n\\n    /// @inheritdoc IVaultSponsoring\\n    function partialUnsponsor(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external nonReentrant whenNotExitPaused {\\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\\n\\n        _partialUnsponsor(_to, _ids, _amounts);\\n    }\\n\\n    //\\n    // CurveSwapper\\n    //\\n\\n    /// @inheritdoc CurveSwapper\\n    function getUnderlying()\\n        public\\n        view\\n        override(CurveSwapper)\\n        returns (address)\\n    {\\n        return address(underlying);\\n    }\\n\\n    /// Adds a new curve swap pool from an input token to {underlying}\\n    ///\\n    /// @param _param Swap pool params\\n    function addPool(SwapPoolParam memory _param) external onlyAdmin {\\n        _addPool(_param);\\n    }\\n\\n    /// Removes an existing swap pool, and the ability to deposit the given token as underlying\\n    ///\\n    /// @param _inputToken the token to remove\\n    function removePool(address _inputToken) external onlyAdmin {\\n        _removePool(_inputToken);\\n    }\\n\\n    //\\n    // Admin functions\\n    //\\n\\n    /// @inheritdoc IVaultSettings\\n    function setImmediateInvestLimitPct(uint16 _pct) external onlySettings {\\n        if (!PercentMath.validPct(_pct))\\n            revert VaultInvalidImmediateInvestLimitPct();\\n\\n        emit ImmediateInvestLimitPctUpdated(_pct);\\n\\n        immediateInvestLimitPct = _pct;\\n    }\\n\\n    /// @inheritdoc IVaultSettings\\n    function setInvestPct(uint16 _investPct)\\n        external\\n        override(IVaultSettings)\\n        onlySettings\\n    {\\n        if (!PercentMath.validPct(_investPct)) revert VaultInvalidInvestPct();\\n\\n        emit InvestPctUpdated(_investPct);\\n\\n        investPct = _investPct;\\n    }\\n\\n    /// @inheritdoc IVaultSettings\\n    function setTreasury(address _treasury)\\n        external\\n        override(IVaultSettings)\\n        onlySettings\\n    {\\n        if (address(_treasury) == address(0x0))\\n            revert VaultTreasuryCannotBe0Address();\\n        treasury = _treasury;\\n        emit TreasuryUpdated(_treasury);\\n    }\\n\\n    /// @inheritdoc IVaultSettings\\n    function setPerfFeePct(uint16 _perfFeePct)\\n        external\\n        override(IVaultSettings)\\n        onlySettings\\n    {\\n        if (!PercentMath.validPct(_perfFeePct))\\n            revert VaultInvalidPerformanceFee();\\n        perfFeePct = _perfFeePct;\\n        emit PerfFeePctUpdated(_perfFeePct);\\n    }\\n\\n    /// @inheritdoc IVaultSettings\\n    function setStrategy(address _strategy)\\n        external\\n        override(IVaultSettings)\\n        onlySettings\\n    {\\n        if (_strategy == address(0)) revert VaultStrategyNotSet();\\n        if (IStrategy(_strategy).vault() != address(this))\\n            revert VaultInvalidVault();\\n        if (address(strategy) != address(0) && strategy.hasAssets())\\n            revert VaultStrategyHasInvestedFunds();\\n\\n        strategy = IStrategy(_strategy);\\n\\n        emit StrategyUpdated(_strategy);\\n    }\\n\\n    /// @inheritdoc IVaultSettings\\n    function setLossTolerancePct(uint16 pct)\\n        external\\n        override(IVaultSettings)\\n        onlySettings\\n    {\\n        if (!pct.validPct()) revert VaultInvalidLossTolerance();\\n\\n        lossTolerancePct = pct;\\n        emit LossTolerancePctUpdated(pct);\\n    }\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Computes the total amount of principal + yield currently controlled by the\\n     * vault and the strategy. The principal + yield is the total amount\\n     * of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee.\\n     *\\n     * @return Total amount of principal and yield help by the vault (not including sponsored amount and performance fee).\\n     */\\n    function totalUnderlyingMinusSponsored() public view returns (uint256) {\\n        uint256 _totalUnderlying = totalUnderlying();\\n        uint256 deductAmount = totalSponsored + accumulatedPerfFee;\\n        if (deductAmount > _totalUnderlying) {\\n            return 0;\\n        }\\n\\n        return _totalUnderlying - deductAmount;\\n    }\\n\\n    //\\n    // ERC165\\n    //\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, AccessControl)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IVault).interfaceId ||\\n            interfaceId == type(IVaultSponsoring).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // Internal API\\n    //\\n\\n    function _immediateInvestment() private {\\n        (uint256 maxInvestableAmount, uint256 alreadyInvested) = investState();\\n\\n        if (\\n            alreadyInvested.inPctOf(maxInvestableAmount) >=\\n            immediateInvestLimitPct\\n        ) return;\\n\\n        uint256 investAmount = maxInvestableAmount - alreadyInvested;\\n\\n        if (investAmount < rebalanceMinimum) return;\\n\\n        underlying.safeTransfer(address(strategy), investAmount);\\n\\n        strategy.invest();\\n\\n        emit Invested(investAmount);\\n    }\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     * @param _force Boolean to specify if the action should be perfomed when there's loss.\\n     */\\n    function _withdrawAll(\\n        address _to,\\n        uint256[] calldata _ids,\\n        bool _force\\n    ) internal {\\n        uint256 localTotalShares = totalShares;\\n        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();\\n        uint256 amount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint256 i = 0; i < idsLen; ++i) {\\n            uint256 depositAmount = deposits[_ids[i]].amount;\\n\\n            amount += _withdrawSingle(\\n                _ids[i],\\n                localTotalShares,\\n                localTotalPrincipal,\\n                _to,\\n                _force,\\n                depositAmount\\n            );\\n        }\\n\\n        _rebalanceBeforeWithdrawing(amount);\\n\\n        underlying.safeTransfer(_to, amount);\\n    }\\n\\n    function _withdrawPartial(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) internal {\\n        uint256 localTotalShares = totalShares;\\n        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();\\n        uint256 amount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint256 i = 0; i < idsLen; ++i) {\\n            amount += _withdrawSingle(\\n                _ids[i],\\n                localTotalShares,\\n                localTotalPrincipal,\\n                _to,\\n                false,\\n                _amounts[i]\\n            );\\n        }\\n\\n        _rebalanceBeforeWithdrawing(amount);\\n\\n        underlying.safeTransfer(_to, amount);\\n    }\\n\\n    /**\\n     * Rebalances the vault's funds to cover the transfer of funds from the vault\\n     * by disinvesting from the strategy. After the rebalance the vault is left\\n     * with a set percentage (100% - invest%) of the total underlying as reserves.\\n     *\\n     * @notice this will have effect only for sync strategies.\\n     *\\n     * @param _amount Funds to be transferred from the vault.\\n     */\\n    function _rebalanceBeforeWithdrawing(uint256 _amount) internal {\\n        uint256 vaultBalance = underlying.balanceOf(address(this));\\n\\n        if (_amount <= vaultBalance) return;\\n        if (!strategy.isSync()) revert VaultNotEnoughFunds();\\n\\n        uint256 expectedReserves = (totalUnderlying() - _amount).pctOf(\\n            10000 - investPct\\n        );\\n\\n        // we want to withdraw the from the strategy only what is needed\\n        // to cover the transfer and leave the vault with the expected reserves\\n        uint256 needed = _amount + expectedReserves - vaultBalance;\\n\\n        uint256 amountWithdrawn = strategy.withdrawToVault(needed);\\n\\n        emit Disinvested(amountWithdrawn);\\n    }\\n\\n    /**\\n     * Withdraws the sponsored amount for the deposits with the ids provided\\n     * in @param _ids and sends it to @param _to.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function _unsponsor(address _to, uint256[] calldata _ids) internal {\\n        uint256 sponsorAmount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint8 i = 0; i < idsLen; ++i) {\\n            uint256 tokenId = _ids[i];\\n            uint256 amount = deposits[tokenId].amount;\\n\\n            _unsponsorSingle(_to, tokenId, amount);\\n\\n            sponsorAmount += amount;\\n        }\\n\\n        _decreaseTotalSponsoredAndTransfer(_to, sponsorAmount);\\n    }\\n\\n    /**\\n     * Withdraws the specified sponsored amounts @param _amounts for the deposits with the ids provided\\n     * in @param _ids and sends it to @param _to.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     * @param _amounts Array with the amounts to withdraw.\\n     */\\n    function _partialUnsponsor(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) internal {\\n        uint256 sponsorAmount;\\n        uint256 idsLen = _ids.length;\\n\\n        for (uint8 i = 0; i < idsLen; ++i) {\\n            uint256 depositId = _ids[i];\\n            uint256 amount = _amounts[i];\\n\\n            _unsponsorSingle(_to, depositId, amount);\\n\\n            sponsorAmount += amount;\\n        }\\n\\n        _decreaseTotalSponsoredAndTransfer(_to, sponsorAmount);\\n    }\\n\\n    /**\\n     * Validates conditions for unsponsoring amount @param _amount of the deposit with the id @param _id.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _tokenId Id of the deposit.\\n     * @param _amount Amount to be unsponsored/withdrawn.\\n     */\\n    function _unsponsorSingle(\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) internal {\\n        Deposit memory _deposit = deposits[_tokenId];\\n\\n        if (_deposit.owner != msg.sender) revert VaultNotAllowed();\\n        if (_deposit.lockedUntil > block.timestamp) revert VaultAmountLocked();\\n        if (_deposit.claimerId != address(0)) revert VaultNotSponsor();\\n        if (_deposit.amount < _amount)\\n            revert VaultCannotWithdrawMoreThanAvailable();\\n\\n        bool isFull = _amount == _deposit.amount;\\n\\n        emit Unsponsored(_tokenId, _amount, _to, isFull);\\n\\n        if (!isFull) {\\n            deposits[_tokenId].amount -= _amount;\\n            return;\\n        }\\n\\n        delete deposits[_tokenId];\\n    }\\n\\n    /**\\n     * Updates totalSponsored by subtracting the amount @param _amount and performing a transfer to @param _to.\\n     *\\n     * @param _to Adress that will receive the funds.\\n     * @param _amount Amount being unsponsored.\\n     */\\n    function _decreaseTotalSponsoredAndTransfer(address _to, uint256 _amount)\\n        internal\\n    {\\n        if (_amount > totalUnderlying()) revert VaultNotEnoughFunds();\\n\\n        totalSponsored -= _amount;\\n\\n        _rebalanceBeforeWithdrawing(_amount);\\n\\n        underlying.safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev `_createDeposit` declares too many locals\\n     * We move some of them to this struct to fix the problem\\n     */\\n    struct CreateDepositLocals {\\n        uint256 totalShares;\\n        uint256 totalUnderlying;\\n        uint16 accumulatedPct;\\n        uint256 accumulatedAmount;\\n        uint256 claimsLen;\\n    }\\n\\n    /**\\n     * Creates a deposit with the given amount of underlying and claim\\n     * structure. The deposit is locked until the timestamp specified in @param _lockedUntil.\\n     * @notice This function assumes underlying will be transfered elsewhere in\\n     * the transaction.\\n     *\\n     * @notice Underlying must be transfered *after* this function, in order to\\n     * correctly calculate shares.\\n     *\\n     * @notice claims must add up to 100%.\\n     *\\n     * @param _amount Amount of underlying to consider @param claims claim\\n     * @param _lockedUntil Timestamp at which the deposit unlocks\\n     * @param claims Claim params\\n     * params.\\n     */\\n    function _createDeposit(\\n        uint256 _previousTotalUnderlying,\\n        uint256 _amount,\\n        uint64 _lockedUntil,\\n        ClaimParams[] calldata claims,\\n        string calldata _name,\\n        uint256 _groupId\\n    ) internal returns (uint256[] memory) {\\n        CreateDepositLocals memory locals = CreateDepositLocals({\\n            totalShares: totalShares,\\n            totalUnderlying: _previousTotalUnderlying,\\n            accumulatedPct: 0,\\n            accumulatedAmount: 0,\\n            claimsLen: claims.length\\n        });\\n\\n        uint256[] memory result = new uint256[](locals.claimsLen);\\n\\n        for (uint256 i = 0; i < locals.claimsLen; ++i) {\\n            ClaimParams memory data = claims[i];\\n            if (data.pct == 0) revert VaultClaimPercentageCannotBe0();\\n            if (data.beneficiary == address(0)) revert VaultClaimerCannotBe0();\\n            // if it's the last claim, just grab all remaining amount, instead\\n            // of relying on percentages\\n            uint256 localAmount = i == locals.claimsLen - 1\\n                ? _amount - locals.accumulatedAmount\\n                : _amount.pctOf(data.pct);\\n\\n            result[i] = _createClaim(\\n                _groupId,\\n                localAmount,\\n                _lockedUntil,\\n                data,\\n                locals.totalShares,\\n                locals.totalUnderlying,\\n                _name\\n            );\\n            locals.accumulatedPct += data.pct;\\n            locals.accumulatedAmount += localAmount;\\n        }\\n\\n        if (!locals.accumulatedPct.is100Pct()) revert VaultClaimsDontAddUp();\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev `_createClaim` declares too many locals\\n     * We move some of them to this struct to fix the problem\\n     */\\n    struct CreateClaimLocals {\\n        uint256 newShares;\\n        address claimerId;\\n        uint256 tokenId;\\n    }\\n\\n    function _createClaim(\\n        uint256 _depositGroupId,\\n        uint256 _amount,\\n        uint64 _lockedUntil,\\n        ClaimParams memory _claim,\\n        uint256 _localTotalShares,\\n        uint256 _localTotalPrincipal,\\n        string calldata _name\\n    ) internal returns (uint256) {\\n        // Checks if the user is not already in debt\\n        if (\\n            _computeShares(\\n                _applyLossTolerance(claimers[_claim.beneficiary].totalPrincipal),\\n                _localTotalShares,\\n                _localTotalPrincipal\\n            ) > claimers[_claim.beneficiary].totalShares\\n        ) revert VaultCannotDepositWhenClaimerInDebt();\\n\\n        _depositTokenIds.increment();\\n        CreateClaimLocals memory locals = CreateClaimLocals({\\n            newShares: _computeShares(\\n                _amount,\\n                _localTotalShares,\\n                _localTotalPrincipal\\n            ),\\n            claimerId: _claim.beneficiary,\\n            tokenId: _depositTokenIds.current()\\n        });\\n\\n        claimers[locals.claimerId].totalShares += locals.newShares;\\n        claimers[locals.claimerId].totalPrincipal += _amount;\\n\\n        totalShares += locals.newShares;\\n        totalPrincipal += _amount;\\n\\n        deposits[locals.tokenId] = Deposit(\\n            _amount,\\n            msg.sender,\\n            locals.claimerId,\\n            _lockedUntil\\n        );\\n\\n        emit DepositMinted(\\n            locals.tokenId,\\n            _depositGroupId,\\n            _amount,\\n            locals.newShares,\\n            msg.sender,\\n            _claim.beneficiary,\\n            locals.claimerId,\\n            _lockedUntil,\\n            _claim.data,\\n            _name\\n        );\\n\\n        return locals.tokenId;\\n    }\\n\\n    /**\\n     * Reduces the principal and shares of the claimer.\\n     * If there were any yield to be claimed, the claimer will also keep shares to withdraw later on.\\n     *\\n     * @notice This function doesn't transfer any funds, it only updates the state.\\n     *\\n     * @notice Only the owner of the deposit may call this function.\\n     *\\n     * @param _tokenId The deposit ID to withdraw from.\\n     * @param _totalShares The total shares to consider for the withdraw.\\n     * @param _totalUnderlyingMinusSponsored The total underlying to consider for the withdraw.\\n     * @param _to Where the funds will be sent\\n     * @param _force If the withdraw should still withdraw if there are not enough funds in the vault.\\n     *\\n     * @return the amount to withdraw.\\n     */\\n    function _withdrawSingle(\\n        uint256 _tokenId,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlyingMinusSponsored,\\n        address _to,\\n        bool _force,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        if (deposits[_tokenId].owner != msg.sender)\\n            revert VaultNotOwnerOfDeposit();\\n\\n        // memoizing saves warm sloads\\n        Deposit memory _deposit = deposits[_tokenId];\\n        Claimer memory _claim = claimers[_deposit.claimerId];\\n\\n        if (_deposit.lockedUntil > block.timestamp) revert VaultDepositLocked();\\n        if (_deposit.claimerId == address(0)) revert VaultNotDeposit();\\n        if (_deposit.amount < _amount)\\n            revert VaultCannotWithdrawMoreThanAvailable();\\n\\n        // Amount of shares the _amount is worth\\n        uint256 amountShares = _computeShares(\\n            _amount,\\n            _totalShares,\\n            _totalUnderlyingMinusSponsored\\n        );\\n\\n        // Amount of shares the _amount is worth taking in the claimer's\\n        // totalShares and totalPrincipal\\n        uint256 claimerShares = (_amount * _claim.totalShares) /\\n            _claim.totalPrincipal;\\n\\n        if (!_force && amountShares > claimerShares)\\n            revert VaultMustUseForceWithdrawToAcceptLosses();\\n\\n        uint256 sharesToBurn = amountShares;\\n\\n        if (_force && amountShares > claimerShares)\\n            sharesToBurn = claimerShares;\\n\\n        claimers[_deposit.claimerId].totalShares -= sharesToBurn;\\n        claimers[_deposit.claimerId].totalPrincipal -= _amount;\\n\\n        totalShares -= sharesToBurn;\\n        totalPrincipal -= _amount;\\n\\n        bool isFull = _deposit.amount == _amount;\\n\\n        if (isFull) {\\n            delete deposits[_tokenId];\\n        } else {\\n            deposits[_tokenId].amount -= _amount;\\n        }\\n\\n        uint256 amount = _computeAmount(\\n            sharesToBurn,\\n            _totalShares,\\n            _totalUnderlyingMinusSponsored\\n        );\\n\\n        emit DepositWithdrawn(_tokenId, sharesToBurn, amount, _to, isFull);\\n\\n        return amount;\\n    }\\n\\n    function _transferAndCheckInputToken(\\n        address _from,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\\n\\n        if (balanceAfter != balanceBefore + _amount)\\n            revert VaultAmountDoesNotMatchParams();\\n    }\\n\\n    function _blockTimestamp() internal view returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n\\n    /**\\n     * Computes amount of shares that will be received for a given deposit amount\\n     *\\n     * @param _amount Amount of deposit to consider.\\n     * @param _totalShares Amount of existing shares to consider.\\n     * @param _totalUnderlyingMinusSponsored Amount of existing underlying to consider.\\n     * @return Amount of shares the deposit will receive.\\n     */\\n    function _computeShares(\\n        uint256 _amount,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlyingMinusSponsored\\n    ) internal pure returns (uint256) {\\n        if (_amount == 0) return 0;\\n        if (_totalShares == 0) return _amount * SHARES_MULTIPLIER;\\n        if (_totalUnderlyingMinusSponsored == 0)\\n            revert VaultCannotComputeSharesWithoutPrincipal();\\n\\n        return (_amount * _totalShares) / _totalUnderlyingMinusSponsored;\\n    }\\n\\n    /**\\n     * Computes the amount of underlying from a given number of shares\\n     *\\n     * @param _shares Number of shares.\\n     * @param _totalShares Amount of existing shares to consider.\\n     * @param _totalUnderlyingMinusSponsored Amounf of existing underlying to consider.\\n     * @return Amount that corresponds to the number of shares.\\n     */\\n    function _computeAmount(\\n        uint256 _shares,\\n        uint256 _totalShares,\\n        uint256 _totalUnderlyingMinusSponsored\\n    ) internal pure returns (uint256) {\\n        if (\\n            _shares == 0 ||\\n            _totalShares == 0 ||\\n            _totalUnderlyingMinusSponsored == 0\\n        ) {\\n            return 0;\\n        }\\n\\n        return ((_totalUnderlyingMinusSponsored * _shares) / _totalShares);\\n    }\\n\\n    /**\\n     * Applies a loss tolerance to the given @param _amount.\\n     *\\n     * This function is used to prevent the vault from entering loss mode when funds are lost due to fees in the strategy.\\n     * For instance, the fees taken by Anchor.\\n     *\\n     * @param _amount Amount to apply the fees to.\\n     *\\n     * @return Amount with the fees applied.\\n     */\\n    function _applyLossTolerance(uint256 _amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _amount - _amount.pctOf(lossTolerancePct);\\n    }\\n\\n    function sharesOf(address claimerId) external view returns (uint256) {\\n        return claimers[claimerId].totalShares;\\n    }\\n\\n    function principalOf(address claimerId) external view returns (uint256) {\\n        return claimers[claimerId].totalPrincipal;\\n    }\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    function exitPause() external onlyAdmin {\\n        _exitPause();\\n    }\\n\\n    function exitUnpause() external onlyAdmin {\\n        _exitUnpause();\\n    }\\n}\\n\",\"keccak256\":\"0xe638f8a344df1f3b3f4c7fa32a9da95906a763950fc2432817148df18e261472\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/CustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface CustomErrors {\\n    //\\n    // Vault Errors\\n    //\\n\\n    // Vault: sender is not the owner of the group id\\n    error VaultSenderNotOwnerOfGroupId();\\n\\n    // Vault: invalid investPct\\n    error VaultInvalidInvestPct();\\n\\n    // Vault: invalid immediateInvestLimitPct\\n    error VaultInvalidImmediateInvestLimitPct();\\n\\n    // Vault: invalid performance fee\\n    error VaultInvalidPerformanceFee();\\n\\n    // Vault: no performance fee\\n    error VaultNoPerformanceFee();\\n\\n    // Vault: invalid lossTolerance\\n    error VaultInvalidLossTolerance();\\n\\n    // Vault: underlying cannot be 0x0\\n    error VaultUnderlyingCannotBe0Address();\\n\\n    // Vault: treasury cannot be 0x0\\n    error VaultTreasuryCannotBe0Address();\\n\\n    // Vault: admin cannot be 0x0\\n    error VaultAdminCannotBe0Address();\\n\\n    // Vault: cannot transfer admin rights to self\\n    error VaultCannotTransferAdminRightsToSelf();\\n\\n    // Vault: caller is not admin\\n    error VaultCallerNotAdmin();\\n\\n    // Vault: caller is not settings\\n    error VaultCallerNotSettings();\\n\\n    // Vault: caller is not keeper\\n    error VaultCallerNotKeeper();\\n\\n    // Vault: caller is not sponsor\\n    error VaultCallerNotSponsor();\\n\\n    // Vault: destination address is 0x\\n    error VaultDestinationCannotBe0Address();\\n\\n    // Vault: strategy is not set\\n    error VaultStrategyNotSet();\\n\\n    // Vault: invalid minLockPeriod\\n    error VaultInvalidMinLockPeriod();\\n\\n    // Vault: invalid lock period\\n    error VaultInvalidLockPeriod();\\n\\n    // Vault: cannot deposit 0\\n    error VaultCannotDeposit0();\\n\\n    // Vault: cannot sponsor 0\\n    error VaultCannotSponsor0();\\n\\n    // Vault: cannot deposit when yield is negative\\n    error VaultCannotDepositWhenYieldNegative();\\n\\n    // Vault: cannot deposit when the claimer is in debt\\n    error VaultCannotDepositWhenClaimerInDebt();\\n\\n    // Vault: cannot withdraw when yield is negative\\n    error VaultCannotWithdrawWhenYieldNegative();\\n\\n    // Vault: nothing to do\\n    error VaultNothingToDo();\\n\\n    // Vault: not enough to rebalance\\n    error VaultNotEnoughToRebalance();\\n\\n    // Vault: invalid vault\\n    error VaultInvalidVault();\\n\\n    // Vault: strategy has invested funds\\n    error VaultStrategyHasInvestedFunds();\\n\\n    // Vault: not enough funds\\n    error VaultNotEnoughFunds();\\n\\n    // Vault: you are not allowed\\n    error VaultNotAllowed();\\n\\n    // Vault: amount is locked\\n    error VaultAmountLocked();\\n\\n    // Vault: deposit is locked\\n    error VaultDepositLocked();\\n\\n    // Vault: token id is not a sponsor\\n    error VaultNotSponsor();\\n\\n    // Vault: token id is not a deposit\\n    error VaultNotDeposit();\\n\\n    // Vault: claim percentage cannot be 0\\n    error VaultClaimPercentageCannotBe0();\\n\\n    // Vault: claimer cannot be address 0\\n    error VaultClaimerCannotBe0();\\n\\n    // Vault: claims don't add up to 100%\\n    error VaultClaimsDontAddUp();\\n\\n    // Vault: you are not the owner of a deposit\\n    error VaultNotOwnerOfDeposit();\\n\\n    // Vault: cannot withdraw more than the available amount\\n    error VaultCannotWithdrawMoreThanAvailable();\\n\\n    // Vault: must force withdraw to withdraw with a loss\\n    error VaultMustUseForceWithdrawToAcceptLosses();\\n\\n    // Vault: amount received does not match params\\n    error VaultAmountDoesNotMatchParams();\\n\\n    // Vault: cannot compute shares when there's no principal\\n    error VaultCannotComputeSharesWithoutPrincipal();\\n\\n    // Vault: deposit name for MetaVault too short\\n    error VaultDepositNameTooShort();\\n\\n    // Vault: no yield to claim\\n    error VaultNoYieldToClaim();\\n\\n    //\\n    // Strategy Errors\\n    //\\n\\n    // Strategy: admin is 0x\\n    error StrategyAdminCannotBe0Address();\\n\\n    // Strategy: keeper is 0x\\n    error StrategyKeeperCannotBe0Address();\\n\\n    // Strategy: cannot transfer admin rights to self\\n    error StrategyCannotTransferAdminRightsToSelf();\\n\\n    // Strategy: underlying is 0x\\n    error StrategyUnderlyingCannotBe0Address();\\n\\n    // Strategy: not an IVault\\n    error StrategyNotIVault();\\n\\n    // Strategy: caller is not manager\\n    error StrategyCallerNotManager();\\n\\n    // Strategy: caller has no settings role\\n    error StrategyCallerNotSettings();\\n\\n    // Strategy: caller has no keeper role\\n    error StrategyCallerNotKeeper();\\n\\n    // Strategy: caller is not admin\\n    error StrategyCallerNotAdmin();\\n\\n    // Strategy: amount is 0\\n    error StrategyAmountZero();\\n\\n    // Strategy: not running\\n    error StrategyNotRunning();\\n\\n    // Not Enough Underlying Balance in Strategy contract\\n    error StrategyNoUnderlying();\\n\\n    // Not Enough Shares in Strategy Contract\\n    error StrategyNotEnoughShares();\\n}\\n\",\"keccak256\":\"0x93c28a987162a62f149167763ae493e6861642d8fa186ded52264512f1a61a2e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/curve/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface ICurve {\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa5cb0f4b8edec058e25ee9b914e15ab7f091757afc3c114a9fe983b2b4f69054\",\"license\":\"UNLICENSED\"},\"contracts/lib/ExitPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an exit stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotExitPaused` and `whenExitPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract ExitPausable is Context {\\n    /**\\n     * @dev Emitted when the exitPause is triggered by `account`.\\n     */\\n    event ExitPaused(address account);\\n\\n    /**\\n     * @dev Emitted when the exitPause is lifted by `account`.\\n     */\\n    event ExitUnpaused(address account);\\n\\n    bool private _exitPaused;\\n\\n    /**\\n     * @dev Initializes the contract in exitUnpaused state.\\n     */\\n    constructor() {\\n        _exitPaused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not exitPaused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be exitPaused.\\n     */\\n    modifier whenNotExitPaused() {\\n        _requireNotExitPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is exitPaused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be exitPaused.\\n     */\\n    modifier whenExitPaused() {\\n        _requireExitPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is exitPaused, and false otherwise.\\n     */\\n    function exitPaused() public view virtual returns (bool) {\\n        return _exitPaused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is exitPaused.\\n     */\\n    function _requireNotExitPaused() internal view virtual {\\n        require(!exitPaused(), \\\"Pausable: ExitPaused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not exitPaused.\\n     */\\n    function _requireExitPaused() internal view virtual {\\n        require(exitPaused(), \\\"Pausable: not ExitPaused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be exitPaused.\\n     */\\n    function _exitPause() internal virtual whenNotExitPaused {\\n        _exitPaused = true;\\n        emit ExitPaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be exitPaused.\\n     */\\n    function _exitUnpause() internal virtual whenExitPaused {\\n        _exitPaused = false;\\n        emit ExitUnpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9a274cb1e2037301ae1493b2933081fc3e3981f7254b70aca2ba2c41096f473f\",\"license\":\"MIT\"},\"contracts/lib/PercentMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary PercentMath {\\n    // Divisor used for representing percentages\\n    uint256 public constant PCT_DIVISOR = 10000;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PCT_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPct(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PCT_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PCT_DIVISOR as the denominator\\n     */\\n    function pctOf(uint256 _amount, uint16 _fracNum)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount * _fracNum) / PCT_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage that a value represents in relation to the total value\\n     * @param _amount Amount to calculate the percentage of in relation to the total\\n     * @param _total Amount to calculate the percentage relative to\\n     */\\n    function inPctOf(uint256 _amount, uint256 _total)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        return uint16((_amount * PCT_DIVISOR) / _total);\\n    }\\n\\n    /**\\n     * @dev Checks if a given number corresponds to 100%\\n     * @param _perc Percentage value to check, with PCT_DIVISOR\\n     */\\n    function is100Pct(uint256 _perc) internal pure returns (bool) {\\n        return _perc == PCT_DIVISOR;\\n    }\\n}\\n\",\"keccak256\":\"0x3fd1625f542fb3d123e30cc642f829f4e4e2fc5998be2d431ca07d146d199932\",\"license\":\"UNLICENSED\"},\"contracts/strategy/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * IStrategy defines the interface for pluggable contracts used by vaults to invest funds and generate yield.\\n *\\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault.\\n *\\n * @notice It's up to the vault to decide how much to invest/disinvest from the total pool.\\n */\\ninterface IStrategy {\\n    /**\\n     * Emmited when funds are invested by the strategy.\\n     *\\n     *@param amount amount invested\\n     */\\n    event StrategyInvested(uint256 amount);\\n    /**\\n     * Emmited when funds are withdrawn (disinvested) by the strategy.\\n     *\\n     *@param amount amount withdrawn\\n     */\\n    event StrategyWithdrawn(uint256 amount);\\n\\n    /**\\n     * Provides information about wether the strategy is synchronous or asynchronous.\\n     *\\n     * @notice Synchronous strategies support instant withdrawals,\\n     * while asynchronous strategies impose a delay before withdrawals can be made.\\n     *\\n     * @return true if the strategy is synchronous, false otherwise\\n     */\\n    function isSync() external view returns (bool);\\n\\n    /**\\n     * The vault linked to this strategy.\\n     *\\n     * @return The vault's address\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * Withdraws the specified amount back to the vault (disinvests)\\n     *\\n     * @param amount Amount to withdraw\\n     *\\n     * @return actual amount withdrawn\\n     */\\n    function withdrawToVault(uint256 amount) external returns (uint256);\\n\\n    /**\\n     * Transfers the @param _amount to @param _to in the more appropriate currency.\\n     *\\n     * For instance, for Liquity Yield DCA, the most appropriate currency may\\n     * be ETH since yield will be kept in ETH.\\n     *\\n     * @param _to address that will receive the funds.\\n     * @param _amount amount to transfer.\\n     *\\n     * @return amountTransferred amount in underlying equivalent to amount transferred in other currency.\\n     */\\n    function transferYield(address _to, uint256 _amount)\\n        external\\n        returns (uint256 amountTransferred);\\n\\n    /**\\n     * Amount of the underlying currency currently invested by the strategy.\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets() external view returns (uint256);\\n\\n    /**\\n     * Indicates if assets are invested into strategy or not.\\n     *\\n     * @notice this will be used when removing the strategy from the vault\\n     * @return true if assets invested, false if nothing invested.\\n     */\\n    function hasAssets() external view returns (bool);\\n\\n    /**\\n     * Deposits of all the available underlying into the yield generating protocol.\\n     */\\n    function invest() external;\\n}\\n\",\"keccak256\":\"0x3e83101aeeada4796f5751beb40b19e8448e180f6c42be09eb1c93396f7c13cd\",\"license\":\"UNLICENSED\"},\"contracts/vault/CurveSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ICurve} from \\\"../interfaces/curve/ICurve.sol\\\";\\n\\n/// Helper abstract contract to manage curve swaps\\nabstract contract CurveSwapper {\\n    using SafeERC20 for IERC20;\\n\\n    //\\n    // Structs\\n    //\\n\\n    struct Swapper {\\n        /// Curve pool instance\\n        ICurve pool;\\n        /// decimals in token\\n        uint8 tokenDecimals;\\n        /// decimals in underlying\\n        uint8 underlyingDecimals;\\n        /// index of the deposit token we want to exchange to/from underlying\\n        int128 tokenI;\\n        /// index of underlying used by the vault (presumably always UST)\\n        int128 underlyingI;\\n    }\\n\\n    struct SwapPoolParam {\\n        address token;\\n        address pool;\\n        int128 tokenI;\\n        int128 underlyingI;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    /// Emitted when a new swap pool is added\\n    event CurveSwapPoolAdded(\\n        address indexed token,\\n        address indexed pool,\\n        int128 tokenI,\\n        int128 underlyingI\\n    );\\n\\n    /// Emitted when a swap pool is removed\\n    event CurveSwapPoolRemoved(address indexed token);\\n\\n    /// Emitted after every swap\\n    event Swap(\\n        address indexed fromToken,\\n        address indexed toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    );\\n\\n    //\\n    // State\\n    //\\n\\n    /// token => curve pool (for trading token/underlying)\\n    mapping(address => Swapper) public swappers;\\n\\n    /// @return The address of the vault's main underlying token\\n    function getUnderlying() public view virtual returns (address);\\n\\n    /// Swaps a given amount of\\n    /// Only works if the pool has previously been inserted into the contract\\n    ///\\n    /// @param _token The token we want to swap into\\n    /// @param _amount The amount of underlying we want to swap\\n    function _swapIntoUnderlying(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) internal returns (uint256 amount) {\\n        address underlyingToken = getUnderlying();\\n        if (_token == underlyingToken) {\\n            // same token, nothing to do\\n            return _amount;\\n        }\\n\\n        Swapper storage swapper = swappers[_token];\\n        require(\\n            address(swapper.pool) != address(0x0),\\n            \\\"non-existing swap pool\\\"\\n        );\\n\\n        uint256 minAmount = _calcMinDy(\\n            _amount,\\n            swapper.tokenDecimals,\\n            swapper.underlyingDecimals,\\n            _slippage\\n        );\\n\\n        amount = swapper.pool.exchange_underlying(\\n            swapper.tokenI,\\n            swapper.underlyingI,\\n            _amount,\\n            minAmount\\n        );\\n\\n        emit Swap(_token, underlyingToken, _amount, amount);\\n    }\\n\\n    /// Swaps a given amount of Underlying into a given token\\n    /// Only works if the pool has previously been inserted into the contract\\n    ///\\n    /// @param _token The token we want to swap into\\n    /// @param _amount The amount of underlying we want to swap\\n    function _swapFromUnderlying(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) internal returns (uint256 amount) {\\n        if (_token == getUnderlying()) {\\n            // same token, nothing to do\\n            return _amount;\\n        }\\n\\n        Swapper storage swapper = swappers[_token];\\n\\n        uint256 minAmount = _calcMinDy(\\n            _amount,\\n            swapper.underlyingDecimals,\\n            swapper.tokenDecimals,\\n            _slippage\\n        );\\n\\n        amount = swapper.pool.exchange_underlying(\\n            swapper.underlyingI,\\n            swapper.tokenI,\\n            _amount,\\n            minAmount\\n        );\\n\\n        emit Swap(getUnderlying(), _token, _amount, amount);\\n    }\\n\\n    function _calcMinDy(\\n        uint256 _amount,\\n        uint8 _fromDecimals,\\n        uint8 _toDecimals,\\n        uint256 _slippage\\n    ) internal pure returns (uint256) {\\n        return\\n            (_amount * _slippage * 10**_toDecimals) / (10**_fromDecimals * 10000);\\n    }\\n\\n    /// This is necessary because some tokens (USDT) force you to approve(0)\\n    /// before approving a new amount meaning if we always approved blindly,\\n    /// then we could get random failures on the second attempt\\n    function _approveIfNecessary(address _token, address _pool) internal {\\n        uint256 allowance = IERC20(_token).allowance(address(this), _pool);\\n\\n        if (allowance == 0) {\\n            IERC20(_token).safeApprove(_pool, type(uint256).max);\\n        }\\n    }\\n\\n    /// @param _swapPools configs for each swap pool\\n    function _addPools(SwapPoolParam[] memory _swapPools) internal {\\n        uint256 length = _swapPools.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            _addPool(_swapPools[i]);\\n        }\\n    }\\n\\n    function _addPool(SwapPoolParam memory _param) internal {\\n        require(\\n            address(swappers[_param.token].pool) == address(0),\\n            \\\"token already has a swap pool\\\"\\n        );\\n        require(\\n            ICurve(_param.pool).coins(uint256(uint128(_param.underlyingI))) ==\\n                getUnderlying(),\\n            \\\"_underlyingI does not match underlying token\\\"\\n        );\\n\\n        uint256 tokenDecimals = IERC20Metadata(_param.token).decimals();\\n        uint256 underlyingDecimals = IERC20Metadata(getUnderlying()).decimals();\\n\\n        // TODO check if _token and _underlyingIndex match the pool settings\\n        swappers[_param.token] = Swapper(\\n            ICurve(_param.pool),\\n            uint8(tokenDecimals),\\n            uint8(underlyingDecimals),\\n            _param.tokenI,\\n            _param.underlyingI\\n        );\\n\\n        _approveIfNecessary(getUnderlying(), address(_param.pool));\\n        _approveIfNecessary(_param.token, address(_param.pool));\\n\\n        emit CurveSwapPoolAdded(\\n            _param.token,\\n            _param.pool,\\n            _param.tokenI,\\n            _param.underlyingI\\n        );\\n    }\\n\\n    function _removePool(address _inputToken) internal {\\n        require(\\n            address(swappers[_inputToken].pool) != address(0),\\n            \\\"pool does not exist\\\"\\n        );\\n        delete swappers[_inputToken];\\n\\n        emit CurveSwapPoolRemoved(_inputToken);\\n    }\\n}\\n\",\"keccak256\":\"0x26958d7dd547f2fd53dcd56b1fbeb5567fdcf66b04bc5920eefa42e223f80908\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVault {\\n    //\\n    // Structs\\n    //\\n\\n    struct ClaimParams {\\n        uint16 pct;\\n        address beneficiary;\\n        bytes data;\\n    }\\n\\n    struct DepositParams {\\n        address inputToken;\\n        uint64 lockDuration;\\n        uint256 amount;\\n        ClaimParams[] claims;\\n        string name;\\n        uint256 slippage;\\n    }\\n\\n    struct Deposit {\\n        /// amount of the deposit\\n        uint256 amount;\\n        /// wallet of the owner\\n        address owner;\\n        /// wallet of the claimer\\n        address claimerId;\\n        /// when can the deposit be withdrawn\\n        uint256 lockedUntil;\\n    }\\n\\n    struct Claimer {\\n        uint256 totalPrincipal;\\n        uint256 totalShares;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    event DepositMinted(\\n        uint256 indexed id,\\n        uint256 groupId,\\n        uint256 amount,\\n        uint256 shares,\\n        address indexed depositor,\\n        address indexed claimer,\\n        address claimerId,\\n        uint64 lockedUntil,\\n        bytes data,\\n        string name\\n    );\\n\\n    event DepositWithdrawn(\\n        uint256 indexed id,\\n        uint256 shares,\\n        uint256 amount,\\n        address indexed to,\\n        bool burned\\n    );\\n\\n    event Invested(uint256 amount);\\n\\n    event Disinvested(uint256 amount);\\n\\n    event YieldClaimed(\\n        address claimerId,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 burnedShares,\\n        uint256 perfFee,\\n        uint256 totalUnderlying,\\n        uint256 totalShares\\n    );\\n\\n    event FeeWithdrawn(uint256 amount);\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Total amount of principal.\\n     */\\n    function totalPrincipal() external view returns (uint256);\\n\\n    /**\\n     * Update the invested amount;\\n     */\\n    function updateInvested() external;\\n\\n    /**\\n     * Calculate maximum investable amount and already invested amount\\n     *\\n     * @return maxInvestableAmount maximum investable amount\\n     * @return alreadyInvested already invested amount\\n     */\\n    function investState()\\n        external\\n        view\\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested);\\n\\n    /**\\n     * Percentage of the max investable amount until which a deposit is\\n     * immediately invested into the strategy.\\n     */\\n    function immediateInvestLimitPct() external view returns (uint16);\\n\\n    /**\\n     * Percentage of the total underlying to invest in the strategy\\n     */\\n    function investPct() external view returns (uint16);\\n\\n    /**\\n     * Underlying ERC20 token accepted by the vault\\n     */\\n    function underlying() external view returns (IERC20Metadata);\\n\\n    /**\\n     * Minimum lock period for each deposit\\n     */\\n    function minLockPeriod() external view returns (uint64);\\n\\n    /**\\n     * Total amount of underlying currently controlled by the\\n     * vault and the its strategy.\\n     */\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /**\\n     * Total amount of shares\\n     */\\n    function totalShares() external view returns (uint256);\\n\\n    /**\\n     * Computes the amount of yield available for an an address.\\n     *\\n     * @param _to address to consider.\\n     *\\n     * @return claimable yield for @param _to, share of generated yield by @param _to,\\n     *      and performance fee from generated yield\\n     */\\n    function yieldFor(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * Accumulate performance fee and transfers rest yield generated for the caller to\\n     *\\n     * @param _to Address that will receive the yield.\\n     */\\n    function claimYield(address _to) external;\\n\\n    /**\\n     * Creates a new deposit using the specified group id\\n     *\\n     * @param _groupId The group id for the new deposit\\n     * @param _params Deposit params\\n     */\\n    function depositForGroupId(uint256 _groupId, DepositParams calldata _params)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * Creates a new deposit\\n     *\\n     * @param _params Deposit params\\n     */\\n    function deposit(DepositParams calldata _params)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the expected amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function withdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * When the vault is underperforming it withdraws the funds with a loss.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function forceWithdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws any pending performance fee amount back to the treasury\\n     */\\n    function withdrawPerformanceFee() external;\\n}\\n\",\"keccak256\":\"0x5f8bd642fe800b1311980062ffa646b044c360a48407403f4cff4f3818ee6f0e\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVaultSettings.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface IVaultSettings {\\n    //\\n    // Events\\n    //\\n\\n    event ImmediateInvestLimitPctUpdated(uint256 percentage);\\n    event InvestPctUpdated(uint256 percentage);\\n    event TreasuryUpdated(address indexed treasury);\\n    event PerfFeePctUpdated(uint16 pct);\\n    event StrategyUpdated(address indexed strategy);\\n    event LossTolerancePctUpdated(uint16 pct);\\n\\n    /**\\n     * Update immediate invest limit percentage\\n     *\\n     * Emits {ImmediateInvestLimitPctUpdated} event\\n     *\\n     * @param _pct the new immediate invest limit percentage\\n     */\\n    function setImmediateInvestLimitPct(uint16 _pct) external;\\n\\n    /**\\n     * Update invest percentage\\n     *\\n     * Emits {InvestPctUpdated} event\\n     *\\n     * @param _investPct the new invest percentage\\n     */\\n    function setInvestPct(uint16 _investPct) external;\\n\\n    /**\\n     * Changes the treasury used by the vault.\\n     *\\n     * @param _treasury the new strategy's address.\\n     */\\n    function setTreasury(address _treasury) external;\\n\\n    /**\\n     * Changes the performance fee used by the vault.\\n     *\\n     * @param _perfFeePct the new performance fee.\\n     */\\n    function setPerfFeePct(uint16 _perfFeePct) external;\\n\\n    /**\\n     * Changes the strategy used by the vault.\\n     *\\n     * @notice if there is invested funds in previous strategy, it is not allowed to set new strategy.\\n     * @param _strategy the new strategy's address.\\n     */\\n    function setStrategy(address _strategy) external;\\n\\n    /**\\n     * Changes the estimated investment fee used by the strategy.\\n     *\\n     * @param _pct the new investment fee estimated percentage.\\n     */\\n    function setLossTolerancePct(uint16 _pct) external;\\n}\\n\",\"keccak256\":\"0x9feb6a0b014fdf6d2e6d04dc9414fe142a84fe6dd742cd301d9e3b188696abda\",\"license\":\"UNLICENSED\"},\"contracts/vault/IVaultSponsoring.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface IVaultSponsoring {\\n    //\\n    // Events\\n    //\\n\\n    /// Emitted when a new sponsor deposit is created\\n    event Sponsored(\\n        uint256 indexed id,\\n        uint256 amount,\\n        address indexed depositor,\\n        uint256 lockedUntil\\n    );\\n\\n    /// Emitted when an existing sponsor withdraws\\n    event Unsponsored(\\n        uint256 indexed id,\\n        uint256 amount,\\n        address indexed to,\\n        bool burned\\n    );\\n\\n    /**\\n     * Total amount currently sponsored\\n     */\\n    function totalSponsored() external view returns (uint256);\\n\\n    /**\\n     * Creates a sponsored deposit with the amount provided in @param _amount.\\n     * Sponsored amounts will be invested like deposits, but unlike deposits\\n     * there are no claimers and the yield generated is donated to the vault.\\n     * The amount is locked until the timestamp specified in @param _lockedUntil.\\n     *\\n     * @param _inputToken The input token to deposit.\\n     * @param _amount Amount to sponsor.\\n     * @param _lockedUntil When the sponsor can unsponsor the amount.\\n     */\\n    function sponsor(\\n        address _inputToken,\\n        uint256 _amount,\\n        uint256 _lockedUntil,\\n        uint256 _slippage\\n    ) external;\\n\\n    /**\\n     * Withdraws the sponsored amount for the deposits with the ids provided\\n     * in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the sponsored amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function unsponsor(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws the specified sponsored amounts @param _amounts for the deposits with the ids provided\\n     * in @param _ids and sends it to @param _to.\\n     *\\n     * @notice fails if there are not enough funds to withdraw the specified amounts.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     * @param _amounts Array with the amounts to withdraw.\\n     */\\n    function partialUnsponsor(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa799534c73c063008171fe021b6cb381c3a7853c69c8f2305e07eacf4d5cb66e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103c55760003560e01c80638cad7fbe116101ff578063c70920bc1161011a578063e4020fdf116100ad578063f5eb42dc1161007c578063f5eb42dc146109ab578063f6289887146109d7578063f78797c0146109fe578063fd6e921714610a2757600080fd5b8063e4020fdf1461096e578063e751c14114610981578063eb0ebfbc1461098f578063f0f442601461099857600080fd5b8063d547741f116100e9578063d547741f1461090c578063d9db2b771461091f578063da62fba914610934578063df6f9ba71461095b57600080fd5b8063c70920bc146108cb578063cd00dd41146108d3578063cd0d9ba8146108e6578063cda2695a146108f957600080fd5b8063abaa9d7011610192578063bba97d3311610161578063bba97d331461086e578063bd2e3ecd14610628578063c0ddb6921461089c578063c2d79444146108a457600080fd5b8063abaa9d70146107b9578063b02c43d0146107c9578063b5106add1461083b578063b59a40cb1461084e57600080fd5b8063a164c25d116101ce578063a164c25d1461077b578063a1ac20eb14610785578063a217fddf14610798578063a8c62e76146107a057600080fd5b80638cad7fbe1461067357806391d14854146107095780639816f47314610742578063999927df1461076857600080fd5b80634e813ac4116102ef5780636e7007e6116102825780637e2cba6f116102515780637e2cba6f146106325780637e4b8da0146106455780638293744b146106585780638456cb591461066b57600080fd5b80636e7007e6146105a05780636f307dc3146105c157806373ae54b5146105e857806376490b561461062857600080fd5b80635cb0d406116102be5780635cb0d4061461053c5780635e8486551461054457806361d027b31461054c57806361e20a1c1461057757600080fd5b80634e813ac4146104f95780634fc78d6814610516578063563233f61461051e5780635c975abb1461053157600080fd5b806336568abe116103675780633f383236116103365780633f383236146104c25780633f4ba83a146104d557806348b08ee8146104dd5780634b1533b2146104f057600080fd5b806336568abe1461048b5780633a98ef391461049e5780633b7d0946146104a75780633ba52fc6146104ba57600080fd5b8063248a9ca3116103a3578063248a9ca3146104185780632f2ff15d1461043c57806333a100ca14610451578063364bc15a1461046457600080fd5b806301ffc9a7146103ca5780631325d5f1146103f257806319d3ee3d1461040f575b600080fd5b6103dd6103d8366004614e33565b610a3b565b60405190151581526020015b60405180910390f35b610401670de0b6b3a764000081565b6040519081526020016103e9565b610401600e5481565b610401610426366004614e5d565b6000908152600160208190526040909120015490565b61044f61044a366004614e8b565b610ab3565b005b61044f61045f366004614ebb565b610ade565b6104017ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b61044f610499366004614e8b565b610d33565b61040160055481565b61044f6104b5366004614ebb565b610dc4565b61044f610e1f565b61044f6104d0366004614f5f565b610f23565b61044f610f7b565b61044f6104eb366004614ff2565b610fd4565b610401600c5481565b6105016110b2565b604080519283526020830191909152016103e9565b61044f611174565b61044f61052c366004614ff2565b61147e565b60035460ff166103dd565b61044f61157e565b61044f6115d5565b600d5461055f906001600160a01b031681565b6040516001600160a01b0390911681526020016103e9565b610401610585366004614ebb565b6001600160a01b03166000908152600b602052604090205490565b600f546105ae9061ffff1681565b60405161ffff90911681526020016103e9565b61055f7f000000000000000000000000000000000000000000000000000000000000000081565b61060f7f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff90911681526020016103e9565b61060f62dd7c0081565b61044f610640366004614ff2565b61162c565b61044f610653366004615059565b6116ff565b61044f6106663660046150dc565b61179d565b61044f61187c565b6106ca610681366004614ebb565b600060208190529081526040902080546001909101546001600160a01b0382169160ff600160a01b8204811692600160a81b9092041690600f81810b91600160801b9004900b85565b604080516001600160a01b03909616865260ff94851660208701529390921692840192909252600f91820b6060840152900b608082015260a0016103e9565b6103dd610717366004614e8b565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000061055f565b61044f610776366004614ebb565b6118d3565b61060f6212750081565b61044f610793366004614ff2565b611b8d565b610401600081565b60065461055f906201000090046001600160a01b031681565b600354610100900460ff166103dd565b61080b6107d7366004614e5d565b600960205260009081526040902080546001820154600283015460039093015491926001600160a01b039182169291169084565b6040516103e994939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b61044f610849366004614ebb565b611c73565b61086161085c366004615149565b611e57565b6040516103e99190615186565b61088161087c366004614ebb565b611efc565b604080519384526020840192909252908201526060016103e9565b610401611fbb565b6104017f1597bc5e34ff090612f53164e4e642d2ab4fc78bffe19ed1b602a0d12559561a81565b610401611ffe565b61044f6108e1366004615059565b6121ae565b6108616108f43660046151ca565b612240565b61044f610907366004615211565b6122fa565b61044f61091a366004614e8b565b612540565b600d546105ae90600160a01b900461ffff1681565b610501610942366004614ebb565b600b602052600090815260409020805460019091015482565b61044f6109693660046150dc565b612566565b61044f61097c3660046150dc565b6125f8565b6006546105ae9061ffff1681565b61040160045481565b61044f6109a6366004614ebb565b612688565b6104016109b9366004614ebb565b6001600160a01b03166000908152600b602052604090206001015490565b6104017ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309581565b61055f610a0c366004614e5d565b6008602052600090815260409020546001600160a01b031681565b6003546105ae9062010000900461ffff1681565b60006001600160e01b031982167f8d9d701e000000000000000000000000000000000000000000000000000000001480610a9e57506001600160e01b031982167f0fae047800000000000000000000000000000000000000000000000000000000145b80610aad5750610aad826128ff565b92915050565b60008281526001602081905260409091200154610acf81612966565b610ad98383612970565b505050565b3360009081527f473683a5a3e156e4e3a6c3a7a6d9e3d4a58f9392a3bba04b84ad6221b3f7f356602052604090205460ff16610b2d57604051631e15456f60e11b815260040160405180910390fd5b6001600160a01b038116610b5457604051634f08b3f360e11b815260040160405180910390fd5b306001600160a01b0316816001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc0919061524c565b6001600160a01b031614610c00576040517f0251bab500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546201000090046001600160a01b031615801590610c925750600660029054906101000a90046001600160a01b03166001600160a01b0316635be9b2d36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c929190615269565b15610cc9576040517fd28a9fdb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600680547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038416908102919091179091556040517f4da9c22c924692646a21cf1f423781ae3285198dc22e8a6912835d3272b90b3c90600090a250565b6001600160a01b0381163314610db65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b610dc082826129f7565b5050565b3360009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff16610e1357604051631bacfc6960e01b815260040160405180910390fd5b610e1c81612a7a565b50565b3360009081527f10c15aae13326e9b33c92ffbb94efb7492c500f0cca324caca9bd1aca194ed18602052604090205460ff16610e6e57604051637660f80560e11b815260040160405180910390fd5b600e5480610ea8576040517f0a33934000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e55610eb681612b4e565b6040518181527fb7eeacba6b133788365610e83d3f130d07b6ef6e78877961f25b3f61fcba07529060200160405180910390a1600d54610e1c906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612d82565b3360009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff16610f7257604051631bacfc6960e01b815260040160405180910390fd5b610e1c81612dcb565b3360009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff16610fca57604051631bacfc6960e01b815260040160405180910390fd5b610fd2613215565b565b3360009081527f473683a5a3e156e4e3a6c3a7a6d9e3d4a58f9392a3bba04b84ad6221b3f7f356602052604090205460ff1661102357604051631e15456f60e11b815260040160405180910390fd5b61ffff81166127101015611063576040517f25cd038500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405161ffff821681527fd7adeddbad454575cc686aee138c6f258b6177a977b4e7be7086ebb25de0e9a39060200160405180910390a16006805461ffff191661ffff92909216919091179055565b60065460009081906201000090046001600160a01b03166110d65750600091829150565b6003546110f59062010000900461ffff166110ef611ffe565b90613267565b9150600660029054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa15801561114a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116e919061528b565b90509091565b3360009081527f10c15aae13326e9b33c92ffbb94efb7492c500f0cca324caca9bd1aca194ed18602052604090205460ff166111c357604051637660f80560e11b815260040160405180910390fd5b6006546201000090046001600160a01b03166111f257604051634f08b3f360e11b815260040160405180910390fd5b6000806111fd6110b2565b915091508082141561123b576040517ff096593000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181111561134957600061124f83836152ba565b90507f000000000000000000000000000000000000000000000000000000000000000081101561129257604051630e33bdb760e11b815260040160405180910390fd5b6006546040516319d1885d60e31b8152600481018390526000916201000090046001600160a01b03169063ce8c42e8906024016020604051808303816000875af11580156112e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611308919061528b565b90507ff7e72e2f53a982a67fc999c00edfd87a94bdf99e5031c74851276cfd65b0bd298160405161133b91815260200190565b60405180910390a150505050565b600061135582846152ba565b90507f000000000000000000000000000000000000000000000000000000000000000081101561139857604051630e33bdb760e11b815260040160405180910390fd5b6006546113d8906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916201000090041683612d82565b600660029054906101000a90046001600160a01b03166001600160a01b031663e8b5e51f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561142857600080fd5b505af115801561143c573d6000803e3d6000fd5b505050507fac9f7997c30b6a3cc9c74953898b5de154359339c7ec0d6d70ceb98e55db1a4b8160405161147191815260200190565b60405180910390a1505050565b3360009081527f473683a5a3e156e4e3a6c3a7a6d9e3d4a58f9392a3bba04b84ad6221b3f7f356602052604090205460ff166114cd57604051631e15456f60e11b815260040160405180910390fd5b61ffff8116612710101561150d576040517fd25b1e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d80547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8416908102919091179091556040519081527f16de0efbdf16c568a60b65978ed774bba4e0c179de55ab8f639527e41fd0c861906020015b60405180910390a150565b3360009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff166115cd57604051631bacfc6960e01b815260040160405180910390fd5b610fd2613284565b3360009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff1661162457604051631bacfc6960e01b815260040160405180910390fd5b610fd26132c3565b3360009081527f473683a5a3e156e4e3a6c3a7a6d9e3d4a58f9392a3bba04b84ad6221b3f7f356602052604090205460ff1661167b57604051631e15456f60e11b815260040160405180910390fd5b61ffff811661271010156116bb576040517f1d05623100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f805461ffff191661ffff83169081179091556040519081527f5b9aa28fc994f782b33ebebd9947795b5bc59a54203466433eac5f8d9e81940090602001611573565b6002805414156117515760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dad565b6002805561175d6132fd565b6001600160a01b0385166117845760405163f95106ab60e01b815260040160405180910390fd5b6117918585858585613355565b50506001600255505050565b6002805414156117ef5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dad565b600280556117fb6132fd565b6001600160a01b0383166118225760405163f95106ab60e01b815260040160405180910390fd5b61182a611fbb565b600c541115611865576040517f0bdd660c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118728383836000613415565b5050600160025550565b3360009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff166118cb57604051631bacfc6960e01b815260040160405180910390fd5b610fd26134f0565b6002805414156119255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dad565b600280556119316132fd565b6001600160a01b0381166119585760405163f95106ab60e01b815260040160405180910390fd5b600080600061196633611efc565b92509250925082600014156119a7576040517f58367fe100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006119b1611fbb565b90506000600554905082600e60008282546119cc91906152d1565b9091555050336000908152600b6020526040812060010180548692906119f39084906152ba565b925050819055508360056000828254611a0c91906152ba565b90915550506040805133815260208101879052908101859052606081018490526080810183905260a081018290526001600160a01b038716907f4344accc2a634cf29195bba6fa3d939e3415ecd1ca5c57b322bcf81f920979c89060c00160405180910390a26006546201000090046001600160a01b031615611b42576006546040517fa4ab9fbf0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201889052600092620100009004169063a4ab9fbf906044016020604051808303816000875af1158015611afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b20919061528b565b9050858110611b3457505050505050611b85565b611b3e81876152ba565b9550505b611b4b85612b4e565b611b7f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168787612d82565b50505050505b506001600255565b3360009081527f473683a5a3e156e4e3a6c3a7a6d9e3d4a58f9392a3bba04b84ad6221b3f7f356602052604090205460ff16611bdc57604051631e15456f60e11b815260040160405180910390fd5b61ffff81166127101015611c1c576040517ff799c76d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405161ffff821681527f40775ca73a6e168d23747bc0200694cf7c99ad2db624d04c095cb59899011a569060200160405180910390a16003805461ffff909216620100000263ffff000019909216919091179055565b3360009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff16611cc257604051631bacfc6960e01b815260040160405180910390fd5b6001600160a01b038116611d02576040517f30c9889300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116331415611d45576040517f25499f7e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d50600082612970565b611d7a7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab82612970565b611da47ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309582612970565b611dce7f1597bc5e34ff090612f53164e4e642d2ab4fc78bffe19ed1b602a0d12559561a82612970565b611dd96000336129f7565b611e037ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab336129f7565b611e2d7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf603095336129f7565b610e1c7f1597bc5e34ff090612f53164e4e642d2ab4fc78bffe19ed1b602a0d12559561a336129f7565b6060600280541415611eab5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dad565b60028055611eb761352d565b600754611ec58160016152d1565b600755600081815260086020526040902080546001600160a01b03191633179055611ef08184613580565b60016002559392505050565b6001600160a01b0381166000908152600b6020526040812080546001909101548291829182611f29611fbb565b90506000611f3a8360055484613789565b9050838111611f5757600080600096509650965050505050611fb4565b6000611f6385836152ba565b9050611f7281600554856137c1565b96506000611f838860055486613789565b600d54909150611f9f908290600160a01b900461ffff16613267565b9650611fab87826152ba565b98505050505050505b9193909250565b600080611fc6611ffe565b90506000600e54600454611fda91906152d1565b905081811115611fed5760009250505090565b611ff781836152ba565b9250505090565b6006546000906201000090046001600160a01b03161561212657600660029054906101000a90046001600160a01b03166001600160a01b0316634ad0b6846040518163ffffffff1660e01b8152600401602060405180830381865afa15801561206b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208f919061528b565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612117919061528b565b61212191906152d1565b905090565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561218a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612121919061528b565b6002805414156122005760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dad565b6002805561220c6132fd565b6001600160a01b0385166122335760405163f95106ab60e01b815260040160405180910390fd5b6117918585858585613830565b60606002805414156122945760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dad565b600280556122a061352d565b6000838152600860205260409020546001600160a01b031633146122f0576040517f9049b68600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ef08383613580565b60028054141561234c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dad565b600280553360009081527f27365024d84ecf053ef4d13025b66be161b03e90a7fc7ff54f74d5533a9f857e602052604090205460ff166123b8576040517f9aff7af000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6123c061352d565b826123f7576040517ff712805800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6212750082108061240a575062dd7c0082115b1561242857604051636235acd960e01b815260040160405180910390fd5b600061243442846152d1565b9050612444600a80546001019055565b600061244f600a5490565b905061245c3387876138be565b60006124698787866139f6565b604080516080810182528281523360208083019182526000838501818152606085018a815289835260099093529481209351845591516001840180546001600160a01b03199081166001600160a01b0393841617909155945160028501805490961691161790935591516003909101556004805492935083929091906124f09084906152d1565b90915550506040805182815260208101859052339184917f7ca3497675c6d3ec00b1edc13b8e0b06169ee96a663ab25a74af7da53378f09e910160405180910390a3505060016002555050505050565b6000828152600160208190526040909120015461255c81612966565b610ad983836129f7565b6002805414156125b85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dad565b600280556125c46132fd565b6001600160a01b0383166125eb5760405163f95106ab60e01b815260040160405180910390fd5b6118728383836001613415565b60028054141561264a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dad565b600280556126566132fd565b6001600160a01b03831661267d5760405163f95106ab60e01b815260040160405180910390fd5b611872838383613bd5565b3360009081527f473683a5a3e156e4e3a6c3a7a6d9e3d4a58f9392a3bba04b84ad6221b3f7f356602052604090205460ff166126d757604051631e15456f60e11b815260040160405180910390fd5b6001600160a01b038116612717576040517f6b5e63d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d80546001600160a01b0319166001600160a01b0383169081179091556040517f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190600090a250565b612710101590565b8015806127e35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156127bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e1919061528b565b155b6128555760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610dad565b6040516001600160a01b038316602482015260448101829052610ad99084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613c50565b60606128f58484600085613d35565b90505b9392505050565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610aad57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610aad565b610e1c8133613e7d565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16610dc05760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1615610dc05760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0381811660009081526020819052604090205416612ae15760405162461bcd60e51b815260206004820152601360248201527f706f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610dad565b6001600160a01b03811660008181526020819052604080822080547fffffffffffffffffffff00000000000000000000000000000000000000000000168155600101829055517f94be23730c4398d20227f4e457cf92307b13e5956f2a958e2e368ad44e2f826b9190a250565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd9919061528b565b9050808211612be6575050565b600660029054906101000a90046001600160a01b03166001600160a01b0316639af2e6356040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5d9190615269565b612c7a57604051635f842b9960e11b815260040160405180910390fd5b600354600090612cad90612c9a9062010000900461ffff166127106152e9565b84612ca3611ffe565b6110ef91906152ba565b9050600082612cbc83866152d1565b612cc691906152ba565b6006546040516319d1885d60e31b815260048101839052919250600091620100009091046001600160a01b03169063ce8c42e8906024016020604051808303816000875af1158015612d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d40919061528b565b90507ff7e72e2f53a982a67fc999c00edfd87a94bdf99e5031c74851276cfd65b0bd2981604051612d7391815260200190565b60405180910390a15050505050565b6040516001600160a01b038316602482015260448101829052610ad99084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161289a565b80516001600160a01b039081166000908152602081905260409020541615612e355760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e20616c7265616479206861732061207377617020706f6f6c0000006044820152606401610dad565b602081015160608201516040517fc66106570000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff90911660048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692169063c661065790602401602060405180830381865afa158015612ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef6919061524c565b6001600160a01b031614612f725760405162461bcd60e51b815260206004820152602c60248201527f5f756e6465726c79696e674920646f6573206e6f74206d6174636820756e646560448201527f726c79696e6720746f6b656e00000000000000000000000000000000000000006064820152608401610dad565b600081600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fda919061530c565b60ff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561303f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613063919061530c565b6040805160a0810182526020808701516001600160a01b03908116835260ff8781168385019081529581168486018181528a870151600f90810b60608089019182528d015190910b608088019081528c5186166000908152968790529790952095518654985191518416600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff92909416600160a01b027fffffffffffffffffffffff00000000000000000000000000000000000000000090991694169390931796909617919091161782555191516fffffffffffffffffffffffffffffffff908116600160801b0292169190911760019091015590506131926131887f000000000000000000000000000000000000000000000000000000000000000090565b8460200151613efd565b6131a483600001518460200151613efd565b82602001516001600160a01b031683600001516001600160a01b03167f1576b5fcfa863788d9ef6558cab7aa68d4b48c44eb7bacaf1a8ac6d6b9d26f9485604001518660600151604051613208929190600f92830b8152910b602082015260400190565b60405180910390a3505050565b61321d613f8e565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061271061327a61ffff84168561532f565b6128f8919061534e565b61328c6132fd565b6003805461ff0019166101001790557f92493a2527e1a0e4214d0f98b1bedbdc2b53ef81ee4578756108fef0deff09ee61324a3390565b6132cb613fe0565b6003805461ff00191690557fc47f9c912614e04aeb80c7e6cdc73c0f4368cde4bf42df3b26ad96b898913c7d3361324a565b600354610100900460ff1615610fd25760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a20457869745061757365640000000000000000000000006044820152606401610dad565b6005546000613362611fbb565b9050600085815b818110156133cc576133b089898381811061338657613386615370565b9050602002013586868d60008c8c888181106133a4576133a4615370565b90506020020135614037565b6133ba90846152d1565b92506133c581615386565b9050613369565b506133d682612b4e565b61340a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168a84612d82565b505050505050505050565b6005546000613422611fbb565b9050600084815b818110156134a8576000600960008a8a8581811061344957613449615370565b90506020020135815260200190815260200160002060000154905061348a89898481811061347957613479615370565b9050602002013587878d8b86614037565b61349490856152d1565b935050806134a190615386565b9050613429565b506134b282612b4e565b6134e66001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168984612d82565b5050505050505050565b6134f861352d565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861324a3390565b60035460ff1615610fd25760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610dad565b606060408201356135bd576040517fab59997c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166135f860408401602085016153a1565b67ffffffffffffffff161080613629575062dd7c0061361d60408401602085016153a1565b67ffffffffffffffff16115b1561364757604051636235acd960e01b815260040160405180910390fd5b600361365660808401846153cb565b90501015613690576040517f3867858900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061369d600c54614399565b905060006136a9611fbb565b9050808211156136e5576040517f08063cab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613700336136f66020870187614ebb565b86604001356138be565b60006137216137126020870187614ebb565b86604001358760a001356139f6565b905060004261373660408801602089016153a1565b6137409190615412565b905061376883838361375560608b018b61543e565b61376260808d018d6153cb565b8e6143b8565b60065490955061ffff161561377f5761377f6145fa565b5050505092915050565b6000831580613796575082155b8061379f575081155b156137ac575060006128f8565b826137b7858461532f565b6128f5919061534e565b6000836137d0575060006128f8565b826137ee576137e7670de0b6b3a76400008561532f565b90506128f8565b81613825576040517ff91b6e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816137b7848661532f565b600083815b818160ff1610156138aa57600087878360ff1681811061385757613857615370565b905060200201359050600086868460ff1681811061387757613877615370565b90506020020135905061388b8a8383614663565b61389581866152d1565b94505050806138a390615488565b9050613835565b506138b58783614840565b50505050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613905573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613929919061528b565b90506139406001600160a01b0384168530856148bd565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015613987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ab919061528b565b90506139b783836152d1565b81146139ef576040517f2a25a38b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b038581169082161415613a3657839150506128f8565b6001600160a01b0380861660009081526020819052604090208054909116613aa05760405162461bcd60e51b815260206004820152601660248201527f6e6f6e2d6578697374696e67207377617020706f6f6c000000000000000000006044820152606401610dad565b8054600090613ac590879060ff600160a01b8204811691600160a81b90041688614914565b825460018401546040517fa6417ed6000000000000000000000000000000000000000000000000000000008152600f82810b6004830152600160801b90920490910b602482015260448101899052606481018390529192506001600160a01b03169063a6417ed6906084016020604051808303816000875af1158015613b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b73919061528b565b9350826001600160a01b0316876001600160a01b03167ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe2358887604051613bc3929190918252602082015260400190565b60405180910390a35050509392505050565b600081815b818160ff161015613c4557600085858360ff16818110613bfc57613bfc615370565b6020908102929092013560008181526009909352604090922054919250613c269050888383614663565b613c3081866152d1565b9450505080613c3e90615488565b9050613bda565b506139ef8583614840565b6000613ca5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128e69092919063ffffffff16565b805190915015610ad95780806020019051810190613cc39190615269565b610ad95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610dad565b606082471015613dad5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610dad565b6001600160a01b0385163b613e045760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610dad565b600080866001600160a01b03168587604051613e2091906154d4565b60006040518083038185875af1925050503d8060008114613e5d576040519150601f19603f3d011682016040523d82523d6000602084013e613e62565b606091505b5091509150613e7282828661495f565b979650505050505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16610dc057613ebb816001600160a01b03166014614998565b613ec6836020614998565b604051602001613ed79291906154f0565b60408051601f198184030181529082905262461bcd60e51b8252610dad9160040161559d565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e90604401602060405180830381865afa158015613f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f71919061528b565b905080610ad957610ad96001600160a01b03841683600019612769565b60035460ff16610fd25760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610dad565b600354610100900460ff16610fd25760405162461bcd60e51b815260206004820152601860248201527f5061757361626c653a206e6f74204578697450617573656400000000000000006044820152606401610dad565b6000868152600960205260408120600101546001600160a01b0316331461408a576040517fff40736100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008781526009602090815260408083208151608081018352815481526001808301546001600160a01b039081168387015260028401541682850181905260039093015460608301908152928652600b85529483902083518085019094528054845290940154928201929092529051421015614132576040517f0f6268c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408201516001600160a01b0316614176576040517fde8b700400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815184111561419857604051635bcd1de160e11b815260040160405180910390fd5b60006141a5858a8a6137c1565b825160208401519192506000916141bc908861532f565b6141c6919061534e565b9050861580156141d557508082115b1561420c576040517f7df2e7ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8187801561421957508183115b156142215750805b6040808601516001600160a01b03166000908152600b60205290812060010180548392906142509084906152ba565b90915550506040808601516001600160a01b03166000908152600b60205290812080548992906142819084906152ba565b92505081905550806005600082825461429a91906152ba565b9250508190555086600c60008282546142b391906152ba565b90915550508451871480156142fc5760008d81526009602052604081208181556001810180546001600160a01b0319908116909155600282018054909116905560030155614320565b60008d815260096020526040812080548a929061431a9084906152ba565b90915550505b600061432d838e8e613789565b90508a6001600160a01b03168e7f14e79002ce0df3ba4381425c583d4c9984c7e2910d3e7e088377db997773153e8584866040516143809392919092835260208301919091521515604082015260600190565b60405180910390a39d9c50505050505050505050505050565b600f546000906143ae90839061ffff16613267565b610aad90836152ba565b6040805160a0810182526005548152602081018a90526000918101829052606081810183905260808201879052918667ffffffffffffffff8111156143ff576143ff614ed8565b604051908082528060200260200182016040528015614428578160200160208202803683370190505b50905060005b82608001518110156145a257600089898381811061444e5761444e615370565b905060200281019061446091906155b0565b614469906155c6565b805190915061ffff166144a8576040517f4f287e5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516001600160a01b03166144ec576040517fd444696b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600185608001516144ff91906152ba565b8314614517578151614512908e90613267565b614526565b6060850151614526908e6152ba565b905061454087828e8589600001518a602001518f8f614b79565b84848151811061455257614552615370565b60209081029190910101528151604086018051614570908390615686565b61ffff1690525060608501805182919061458b9083906152d1565b90525061459b9150829050615386565b905061442e565b506145b6826040015161ffff166127101490565b6145ec576040517fd7b03e8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9a9950505050505050505050565b6000806146056110b2565b600654919350915061ffff1661461b8284614e24565b61ffff1610614628575050565b600061463482846152ba565b90507f000000000000000000000000000000000000000000000000000000000000000081101561139857505050565b60008281526009602090815260409182902082516080810184528154815260018201546001600160a01b039081169382018490526002830154169381019390935260030154606083015233146146e5576040517f5040aaa300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4281606001511115614723576040517f4cf1715e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408101516001600160a01b031615614768576040517f6f15ccf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805182111561478a57604051635bcd1de160e11b815260040160405180910390fd5b80516040805184815291841460208301819052916001600160a01b0387169186917f8bb6f71206f2ec5e5a42539a0d677bb7e48844b6cefdad5d7139fd68568d7299910160405180910390a38061480557600084815260096020526040812080548592906147f99084906152ba565b90915550505050505050565b50505060009081526009602052604081208181556001810180546001600160a01b031990811690915560028201805490911690556003015550565b614848611ffe565b81111561486857604051635f842b9960e11b815260040160405180910390fd5b806004600082825461487a91906152ba565b90915550614889905081612b4e565b610dc06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383612d82565b6040516001600160a01b038085166024830152831660448201526064810182905261490e9085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161289a565b50505050565b600061492184600a615787565b61492d9061271061532f565b61493884600a615787565b614942848861532f565b61494c919061532f565b614956919061534e565b95945050505050565b6060831561496e5750816128f8565b82511561497e5782518084602001fd5b8160405162461bcd60e51b8152600401610dad919061559d565b606060006149a783600261532f565b6149b29060026152d1565b67ffffffffffffffff8111156149ca576149ca614ed8565b6040519080825280601f01601f1916602001820160405280156149f4576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110614a2b57614a2b615370565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110614a7657614a76615370565b60200101906001600160f81b031916908160001a9053506000614a9a84600261532f565b614aa59060016152d1565b90505b6001811115614b2a577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110614ae657614ae6615370565b1a60f81b828281518110614afc57614afc615370565b60200101906001600160f81b031916908160001a90535060049490941c93614b2381615796565b9050614aa8565b5083156128f85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610dad565b602080860180516001600160a01b039081166000908152600b90935260408084206001015492519091168352822054614bbc90614bb590614399565b87876137c1565b1115614bf4576040517fb010931500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b614c02600a80546001019055565b60006040518060600160405280614c1a8b89896137c1565b815260200188602001516001600160a01b03168152602001614c3b600a5490565b905280516020808301516001600160a01b03166000908152600b9091526040812060010180549394509192614c719084906152d1565b90915550506020808201516001600160a01b03166000908152600b9091526040812080548b9290614ca39084906152d1565b9091555050805160058054600090614cbc9084906152d1565b9250508190555088600c6000828254614cd591906152d1565b9250508190555060405180608001604052808a8152602001336001600160a01b0316815260200182602001516001600160a01b031681526020018967ffffffffffffffff1681525060096000836040015181526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015590505086602001516001600160a01b0316336001600160a01b031682604001517fb26a67c96199378f459c394f9a442f1a94d19837d1ac17c14e3d6366d98223088d8d866000015187602001518f8f604001518d8d604051614e0b9897969594939291906157ad565b60405180910390a4604001519998505050505050505050565b60008161327a6127108561532f565b600060208284031215614e4557600080fd5b81356001600160e01b0319811681146128f857600080fd5b600060208284031215614e6f57600080fd5b5035919050565b6001600160a01b0381168114610e1c57600080fd5b60008060408385031215614e9e57600080fd5b823591506020830135614eb081614e76565b809150509250929050565b600060208284031215614ecd57600080fd5b81356128f881614e76565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715614f1157614f11614ed8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614f4057614f40614ed8565b604052919050565b8035600f81900b8114614f5a57600080fd5b919050565b600060808284031215614f7157600080fd5b6040516080810181811067ffffffffffffffff82111715614f9457614f94614ed8565b6040528235614fa281614e76565b81526020830135614fb281614e76565b6020820152614fc360408401614f48565b6040820152614fd460608401614f48565b60608201529392505050565b803561ffff81168114614f5a57600080fd5b60006020828403121561500457600080fd5b6128f882614fe0565b60008083601f84011261501f57600080fd5b50813567ffffffffffffffff81111561503757600080fd5b6020830191508360208260051b850101111561505257600080fd5b9250929050565b60008060008060006060868803121561507157600080fd5b853561507c81614e76565b9450602086013567ffffffffffffffff8082111561509957600080fd5b6150a589838a0161500d565b909650945060408801359150808211156150be57600080fd5b506150cb8882890161500d565b969995985093965092949392505050565b6000806000604084860312156150f157600080fd5b83356150fc81614e76565b9250602084013567ffffffffffffffff81111561511857600080fd5b6151248682870161500d565b9497909650939450505050565b600060c0828403121561514357600080fd5b50919050565b60006020828403121561515b57600080fd5b813567ffffffffffffffff81111561517257600080fd5b61517e84828501615131565b949350505050565b6020808252825182820181905260009190848201906040850190845b818110156151be578351835292840192918401916001016151a2565b50909695505050505050565b600080604083850312156151dd57600080fd5b82359150602083013567ffffffffffffffff8111156151fb57600080fd5b61520785828601615131565b9150509250929050565b6000806000806080858703121561522757600080fd5b843561523281614e76565b966020860135965060408601359560600135945092505050565b60006020828403121561525e57600080fd5b81516128f881614e76565b60006020828403121561527b57600080fd5b815180151581146128f857600080fd5b60006020828403121561529d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156152cc576152cc6152a4565b500390565b600082198211156152e4576152e46152a4565b500190565b600061ffff83811690831681811015615304576153046152a4565b039392505050565b60006020828403121561531e57600080fd5b815160ff811681146128f857600080fd5b6000816000190483118215151615615349576153496152a4565b500290565b60008261536b57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060001982141561539a5761539a6152a4565b5060010190565b6000602082840312156153b357600080fd5b813567ffffffffffffffff811681146128f857600080fd5b6000808335601e198436030181126153e257600080fd5b83018035915067ffffffffffffffff8211156153fd57600080fd5b60200191503681900382131561505257600080fd5b600067ffffffffffffffff808316818516808303821115615435576154356152a4565b01949350505050565b6000808335601e1984360301811261545557600080fd5b83018035915067ffffffffffffffff82111561547057600080fd5b6020019150600581901b360382131561505257600080fd5b600060ff821660ff81141561549f5761549f6152a4565b60010192915050565b60005b838110156154c35781810151838201526020016154ab565b8381111561490e5750506000910152565b600082516154e68184602087016154a8565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516155288160178501602088016154a8565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516155658160288401602088016154a8565b01602801949350505050565b600081518084526155898160208601602086016154a8565b601f01601f19169290920160200192915050565b6020815260006128f86020830184615571565b60008235605e198336030181126154e657600080fd5b6000606082360312156155d857600080fd5b6155e0614eee565b6155e983614fe0565b81526020808401356155fa81614e76565b82820152604084013567ffffffffffffffff8082111561561957600080fd5b9085019036601f83011261562c57600080fd5b81358181111561563e5761563e614ed8565b615650601f8201601f19168501614f17565b9150808252368482850101111561566657600080fd5b808484018584013760009082019093019290925250604082015292915050565b600061ffff808316818516808303821115615435576154356152a4565b600181815b808511156156de5781600019048211156156c4576156c46152a4565b808516156156d157918102915b93841c93908002906156a8565b509250929050565b6000826156f557506001610aad565b8161570257506000610aad565b816001811461571857600281146157225761573e565b6001915050610aad565b60ff841115615733576157336152a4565b50506001821b610aad565b5060208310610133831016604e8410600b8410161715615761575081810a610aad565b61576b83836156a3565b806000190482111561577f5761577f6152a4565b029392505050565b60006128f860ff8416836156e6565b6000816157a5576157a56152a4565b506000190190565b8881528760208201528660408201526001600160a01b038616606082015267ffffffffffffffff8516608082015260e060a082015260006157f160e0830186615571565b82810360c0840152838152838560208301376000602085830101526020601f19601f860116820101915050999850505050505050505056fea26469706673582212202a20725b85dffd8a1d0b1cfced27f2c2eefca63a8f9b8d0c957dc78d7f3a5d4564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool((address,address,int128,int128))": {
        "params": {
          "_param": "Swap pool params"
        }
      },
      "claimYield(address)": {
        "params": {
          "_to": "Address that will receive the yield."
        }
      },
      "constructor": {
        "params": {
          "_admin": "Vault admin address",
          "_investPct": "Percentage of the total underlying to invest in the strategy",
          "_lossTolerancePct": "Loss tolerance when investing through the strategy",
          "_minLockPeriod": "Minimum lock period to deposit",
          "_perfFeePct": "Performance fee percentage",
          "_swapPools": "Swap pools used to automatically convert tokens to underlying",
          "_treasury": "Treasury address to collect performance fee",
          "_underlying": "Underlying ERC20 token to use."
        }
      },
      "deposit((address,uint64,uint256,(uint16,address,bytes)[],string,uint256))": {
        "params": {
          "_params": "Deposit params"
        }
      },
      "depositForGroupId(uint256,(address,uint64,uint256,(uint16,address,bytes)[],string,uint256))": {
        "params": {
          "_groupId": "The group id for the new deposit",
          "_params": "Deposit params"
        }
      },
      "exitPaused()": {
        "details": "Returns true if the contract is exitPaused, and false otherwise."
      },
      "forceWithdraw(address,uint256[])": {
        "params": {
          "_ids": "Array with the ids of the deposits.",
          "_to": "Address that will receive the funds."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getUnderlying()": {
        "returns": {
          "_0": "The address of the vault's main underlying token"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "investState()": {
        "returns": {
          "alreadyInvested": "already invested amount",
          "maxInvestableAmount": "maximum investable amount"
        }
      },
      "partialUnsponsor(address,uint256[],uint256[])": {
        "params": {
          "_amounts": "Array with the amounts to withdraw.",
          "_ids": "Array with the ids of the deposits.",
          "_to": "Address that will receive the funds."
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removePool(address)": {
        "params": {
          "_inputToken": "the token to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setImmediateInvestLimitPct(uint16)": {
        "params": {
          "_pct": "the new immediate invest limit percentage"
        }
      },
      "setInvestPct(uint16)": {
        "params": {
          "_investPct": "the new invest percentage"
        }
      },
      "setLossTolerancePct(uint16)": {
        "params": {
          "_pct": "the new investment fee estimated percentage."
        }
      },
      "setPerfFeePct(uint16)": {
        "params": {
          "_perfFeePct": "the new performance fee."
        }
      },
      "setStrategy(address)": {
        "params": {
          "_strategy": "the new strategy's address."
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "the new strategy's address."
        }
      },
      "sponsor(address,uint256,uint256,uint256)": {
        "params": {
          "_amount": "Amount to sponsor.",
          "_inputToken": "The input token to deposit.",
          "_lockedUntil": "When the sponsor can unsponsor the amount."
        }
      },
      "totalUnderlyingMinusSponsored()": {
        "returns": {
          "_0": "Total amount of principal and yield help by the vault (not including sponsored amount and performance fee)."
        }
      },
      "transferAdminRights(address)": {
        "params": {
          "_newAdmin": "The new admin account."
        }
      },
      "unsponsor(address,uint256[])": {
        "params": {
          "_ids": "Array with the ids of the deposits.",
          "_to": "Address that will receive the funds."
        }
      },
      "withdraw(address,uint256[])": {
        "params": {
          "_ids": "Array with the ids of the deposits.",
          "_to": "Address that will receive the funds."
        }
      },
      "yieldFor(address)": {
        "params": {
          "_to": "address to consider."
        },
        "returns": {
          "claimableYield": "claimable yield for @param _to, share of generated yield by @param _to,      and performance fee from generated yield"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CurveSwapPoolAdded(address,address,int128,int128)": {
        "notice": "Emitted when a new swap pool is added"
      },
      "CurveSwapPoolRemoved(address)": {
        "notice": "Emitted when a swap pool is removed"
      },
      "Sponsored(uint256,uint256,address,uint256)": {
        "notice": "Emitted when a new sponsor deposit is created"
      },
      "Swap(address,address,uint256,uint256)": {
        "notice": "Emitted after every swap"
      },
      "Unsponsored(uint256,uint256,address,bool)": {
        "notice": "Emitted when an existing sponsor withdraws"
      }
    },
    "kind": "user",
    "methods": {
      "KEEPER_ROLE()": {
        "notice": "Role allowed to invest/desinvest from strategy"
      },
      "MAX_DEPOSIT_LOCK_DURATION()": {
        "notice": "Maximum lock for each deposit"
      },
      "MAX_SPONSOR_LOCK_DURATION()": {
        "notice": "Maximum lock for each sponsor"
      },
      "MIN_SPONSOR_LOCK_DURATION()": {
        "notice": "Minimum lock for each sponsor"
      },
      "SETTINGS_ROLE()": {
        "notice": "Role allowed to change settings such as performance fee and investment fee"
      },
      "SHARES_MULTIPLIER()": {
        "notice": "Helper constant for computing shares without losing precision"
      },
      "SPONSOR_ROLE()": {
        "notice": "Role for sponsors allowed to call sponsor/unsponsor"
      },
      "accumulatedPerfFee()": {
        "notice": "Current accumulated performance fee;"
      },
      "addPool((address,address,int128,int128))": {
        "notice": "Adds a new curve swap pool from an input token to {underlying}"
      },
      "claimYield(address)": {
        "notice": "Accumulate performance fee and transfers rest yield generated for the caller to"
      },
      "claimers(address)": {
        "notice": "claimer address => claimer data"
      },
      "deposit((address,uint64,uint256,(uint16,address,bytes)[],string,uint256))": {
        "notice": "Creates a new deposit"
      },
      "depositForGroupId(uint256,(address,uint64,uint256,(uint16,address,bytes)[],string,uint256))": {
        "notice": "Creates a new deposit using the specified group id"
      },
      "deposits(uint256)": {
        "notice": "deposit ID => deposit data"
      },
      "immediateInvestLimitPct()": {
        "notice": "Percentage of the max investable amount until which a deposit is immediately invested into the strategy."
      },
      "investPct()": {
        "notice": "Percentage of the total underlying to invest in the strategy"
      },
      "investState()": {
        "notice": "Calculate maximum investable amount and already invested amount"
      },
      "lossTolerancePct()": {
        "notice": "Loss tolerance pct"
      },
      "minLockPeriod()": {
        "notice": "Minimum lock period for each deposit"
      },
      "partialUnsponsor(address,uint256[],uint256[])": {
        "notice": "fails if there are not enough funds to withdraw the specified amounts."
      },
      "perfFeePct()": {
        "notice": "Performance fee percentage"
      },
      "removePool(address)": {
        "notice": "Removes an existing swap pool, and the ability to deposit the given token as underlying"
      },
      "setImmediateInvestLimitPct(uint16)": {
        "notice": "Update immediate invest limit percentage Emits {ImmediateInvestLimitPctUpdated} event"
      },
      "setInvestPct(uint16)": {
        "notice": "Update invest percentage Emits {InvestPctUpdated} event"
      },
      "setLossTolerancePct(uint16)": {
        "notice": "Changes the estimated investment fee used by the strategy."
      },
      "setPerfFeePct(uint16)": {
        "notice": "Changes the performance fee used by the vault."
      },
      "setStrategy(address)": {
        "notice": "Changes the strategy used by the vault.if there is invested funds in previous strategy, it is not allowed to set new strategy."
      },
      "setTreasury(address)": {
        "notice": "Changes the treasury used by the vault."
      },
      "strategy()": {
        "notice": "The investment strategy"
      },
      "swappers(address)": {
        "notice": "token => curve pool (for trading token/underlying)"
      },
      "totalPrincipal()": {
        "notice": "The total of principal deposited"
      },
      "totalShares()": {
        "notice": "Total amount of shares"
      },
      "totalSponsored()": {
        "notice": "Total amount currently sponsored"
      },
      "totalUnderlying()": {
        "notice": "Total amount of underlying currently controlled by the vault and the its strategy."
      },
      "totalUnderlyingMinusSponsored()": {
        "notice": "Computes the total amount of principal + yield currently controlled by the vault and the strategy. The principal + yield is the total amount of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee."
      },
      "transferAdminRights(address)": {
        "notice": "Transfers administrator rights for the Vault to another account, revoking all current admin's roles and setting up the roles for the new admin.Can only be called by the admin."
      },
      "treasury()": {
        "notice": "Treasury address to collect performance fee"
      },
      "underlying()": {
        "notice": "Underlying ERC20 token accepted by the vault"
      },
      "unsponsor(address,uint256[])": {
        "notice": "Withdraws the sponsored amount for the deposits with the ids provided"
      },
      "updateInvested()": {
        "notice": "Update the invested amount;"
      },
      "withdrawPerformanceFee()": {
        "notice": "Withdraws any pending performance fee amount back to the treasury"
      },
      "yieldFor(address)": {
        "notice": "Computes the amount of yield available for an an address."
      }
    },
    "notice": "A vault where other accounts can deposit an underlying token currency and set distribution params for their principal and yieldThe underlying token can be automatically swapped from any configured ERC20 token via {CurveSwapper}",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18967,
        "contract": "contracts/Vault.sol:Vault",
        "label": "swappers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Swapper)18925_storage)"
      },
      {
        "astId": 1786,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1781_storage)"
      },
      {
        "astId": 2386,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2285,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 11851,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_exitPaused",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 5769,
        "contract": "contracts/Vault.sol:Vault",
        "label": "investPct",
        "offset": 2,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 5779,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalSponsored",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5784,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalShares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5789,
        "contract": "contracts/Vault.sol:Vault",
        "label": "immediateInvestLimitPct",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 5793,
        "contract": "contracts/Vault.sol:Vault",
        "label": "strategy",
        "offset": 2,
        "slot": "6",
        "type": "t_contract(IStrategy)16107"
      },
      {
        "astId": 5796,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_depositGroupIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5800,
        "contract": "contracts/Vault.sol:Vault",
        "label": "depositGroupIdOwner",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5806,
        "contract": "contracts/Vault.sol:Vault",
        "label": "deposits",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Deposit)19400_storage)"
      },
      {
        "astId": 5810,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_depositTokenIds",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)4799_storage"
      },
      {
        "astId": 5816,
        "contract": "contracts/Vault.sol:Vault",
        "label": "claimers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(Claimer)19405_storage)"
      },
      {
        "astId": 5821,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalPrincipal",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5824,
        "contract": "contracts/Vault.sol:Vault",
        "label": "treasury",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5827,
        "contract": "contracts/Vault.sol:Vault",
        "label": "perfFeePct",
        "offset": 20,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 5830,
        "contract": "contracts/Vault.sol:Vault",
        "label": "accumulatedPerfFee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5833,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lossTolerancePct",
        "offset": 0,
        "slot": "15",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICurve)11397": {
        "encoding": "inplace",
        "label": "contract ICurve",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)16107": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Claimer)19405_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IVault.Claimer)",
        "numberOfBytes": "32",
        "value": "t_struct(Claimer)19405_storage"
      },
      "t_mapping(t_address,t_struct(Swapper)18925_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CurveSwapper.Swapper)",
        "numberOfBytes": "32",
        "value": "t_struct(Swapper)18925_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1781_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1781_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Deposit)19400_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVault.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)19400_storage"
      },
      "t_struct(Claimer)19405_storage": {
        "encoding": "inplace",
        "label": "struct IVault.Claimer",
        "members": [
          {
            "astId": 19402,
            "contract": "contracts/Vault.sol:Vault",
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19404,
            "contract": "contracts/Vault.sol:Vault",
            "label": "totalShares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)4799_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4798,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Deposit)19400_storage": {
        "encoding": "inplace",
        "label": "struct IVault.Deposit",
        "members": [
          {
            "astId": 19390,
            "contract": "contracts/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19393,
            "contract": "contracts/Vault.sol:Vault",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19396,
            "contract": "contracts/Vault.sol:Vault",
            "label": "claimerId",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 19399,
            "contract": "contracts/Vault.sol:Vault",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)1781_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1778,
            "contract": "contracts/Vault.sol:Vault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1780,
            "contract": "contracts/Vault.sol:Vault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Swapper)18925_storage": {
        "encoding": "inplace",
        "label": "struct CurveSwapper.Swapper",
        "members": [
          {
            "astId": 18912,
            "contract": "contracts/Vault.sol:Vault",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ICurve)11397"
          },
          {
            "astId": 18915,
            "contract": "contracts/Vault.sol:Vault",
            "label": "tokenDecimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 18918,
            "contract": "contracts/Vault.sol:Vault",
            "label": "underlyingDecimals",
            "offset": 21,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 18921,
            "contract": "contracts/Vault.sol:Vault",
            "label": "tokenI",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          },
          {
            "astId": 18924,
            "contract": "contracts/Vault.sol:Vault",
            "label": "underlyingI",
            "offset": 16,
            "slot": "1",
            "type": "t_int128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}