{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.10\"},\"sources\":{\"contracts/Donations.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * A contract to store donations before they are transferred to the charities.\\n */\\ncontract Donations is ERC721, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant WORKER_ROLE = keccak256(\\\"WORKER_ROLE\\\");\\n\\n    struct DonationParams {\\n        uint128 destinationId;\\n        address owner;\\n        IERC20 token;\\n        uint256 amount;\\n        string donationId;\\n        address vault;\\n    }\\n\\n    struct Metadata {\\n        uint128 destinationId;\\n        uint64 expiry;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    struct LocalMintVars {\\n        uint64 expiry;\\n        uint256 length;\\n        uint256 metadataId;\\n    }\\n\\n    event DonationMinted(\\n        uint256 indexed id,\\n        uint128 indexed destinationId,\\n        bytes32 indexed groupId,\\n        IERC20 token,\\n        uint256 expiry,\\n        uint256 amount,\\n        address owner,\\n        string donationId,\\n        address vault\\n    );\\n\\n    event DonationBurned(uint256 indexed id, string donationId);\\n\\n    event DonationsSent(\\n        uint128 indexed destinationId,\\n        IERC20 indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event TTLUpdated(uint64 ttl);\\n\\n    uint256 private metadataId;\\n    mapping(uint256 => Metadata) public metadata;\\n\\n    /// Duration of the expiration date for new donations.\\n    uint64 public ttl = 180 days;\\n\\n    /// Used to indicate whether a group of donations identified by the key has been processed or not.\\n    mapping(bytes32 => bool) public processedDonationsGroups;\\n\\n    /// Stores how much should be transferred to each charity in each coin.\\n    mapping(IERC20 => mapping(uint128 => uint256)) public transferableAmounts;\\n\\n    /**\\n     * @param _owner Account that will receive the admin role.\\n     */\\n    constructor(address _owner) ERC721(\\\"Sandclock Donation\\\", \\\"Donations\\\") {\\n        require(_owner != address(0x0), \\\"Vault: owner cannot be 0x0\\\");\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _grantRole(WORKER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * Changes the TTL for new donations.\\n     *\\n     * @param _ttl the new TTL.\\n     */\\n    function setTTL(uint64 _ttl) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        ttl = _ttl;\\n\\n        emit TTLUpdated(_ttl);\\n    }\\n\\n    /**\\n     * Transfers the donated funds in the currency @param _token to the charity with the id @param _destinationId.\\n     *\\n     * @param _destinationId ID of the charity.\\n     * @param _token Currency to transfer the funds from.\\n     * @param _to Address of the charity.\\n     */\\n    function donate(\\n        uint128 _destinationId,\\n        IERC20 _token,\\n        address _to\\n    ) external onlyRole(WORKER_ROLE) {\\n        uint256 amount = transferableAmounts[_token][_destinationId];\\n        require(amount != 0, \\\"Donations: nothing to donate\\\");\\n\\n        transferableAmounts[_token][_destinationId] = 0;\\n\\n        emit DonationsSent(_destinationId, _token, _to, amount);\\n\\n        _token.safeTransfer(_to, amount);\\n    }\\n\\n    /**\\n     * Mints an NFT for every donation in @param _params.\\n     * The @param _txHash and @param _batchNr uniquely identify a group of donations.\\n     *\\n     * @param _txHash The hash of the transaction where the yield for these donations was claimed.\\n     * @param _batchNr When there are too many donations in a claim, we break them into batches to not reach the gas limit.\\n     * @param _params Donation params.\\n     */\\n    function mint(\\n        bytes32 _txHash,\\n        uint256 _batchNr,\\n        DonationParams[] calldata _params\\n    ) external onlyRole(WORKER_ROLE) {\\n        bytes32 groupId = keccak256(abi.encodePacked(_txHash, _batchNr));\\n\\n        require(\\n            !processedDonationsGroups[groupId],\\n            \\\"Donations: already processed\\\"\\n        );\\n\\n        LocalMintVars memory localMintVars = LocalMintVars({\\n            expiry: _getBlockTimestamp() + ttl,\\n            length: _params.length,\\n            metadataId: metadataId\\n        });\\n        \\n        for (uint256 i = 0; i < localMintVars.length; ++i) {\\n            ++localMintVars.metadataId;\\n\\n            metadata[localMintVars.metadataId] = Metadata({\\n                destinationId: _params[i].destinationId,\\n                token: _params[i].token,\\n                expiry: localMintVars.expiry,\\n                amount: _params[i].amount\\n            });\\n\\n            _mint(_params[i].owner, localMintVars.metadataId);\\n\\n            emit DonationMinted(\\n                localMintVars.metadataId,\\n                _params[i].destinationId,\\n                groupId,\\n                _params[i].token,\\n                localMintVars.expiry,\\n                _params[i].amount,\\n                _params[i].owner,\\n                _params[i].donationId,\\n                _params[i].vault\\n            );\\n        }\\n\\n        metadataId = localMintVars.metadataId;\\n\\n        processedDonationsGroups[groupId] = true;\\n    }\\n\\n    /**\\n     * Burns the NFT and sets the amount donated to be transferred to the charity.\\n     *\\n     * @param _id ID of the NFT.\\n     */\\n    function burn(uint256 _id, string calldata donationId) external {\\n        bool isOwner = ownerOf(_id) == _msgSender();\\n\\n        Metadata storage data = metadata[_id];\\n\\n        bool expired = data.expiry < _getBlockTimestamp();\\n\\n        require(isOwner || expired, \\\"Donations: not allowed\\\");\\n\\n        transferableAmounts[data.token][data.destinationId] += data.amount;\\n\\n        _burn(_id);\\n\\n        emit DonationBurned(_id, donationId);\\n    }\\n\\n    /**\\n     * Basically similar to the above burn() method but is called on an array of _ids\\n     * Expected to be called by the backend to burn a bunch of NFTs when they expire\\n     *\\n     * @param _ids IDs of the NFTs.\\n     */\\n    function burnBatch(uint256[] calldata _ids, string[] calldata donationIds)\\n        external\\n    {\\n        uint256 _id;\\n        Metadata storage data;\\n        bool expired;\\n\\n        uint256 timestamp = _getBlockTimestamp();\\n\\n        uint256 idsLen = _ids.length;\\n        for (uint256 i = 0; i < idsLen; ++i) {\\n            _id = _ids[i];\\n            data = metadata[_id];\\n\\n            expired = data.expiry < timestamp;\\n\\n            // used an if statement instead of require so that the method will keep on running for the other ids and not stop execution\\n            if (expired) {\\n                transferableAmounts[data.token][data.destinationId] += data\\n                    .amount;\\n\\n                _burn(_id);\\n\\n                emit DonationBurned(_id, donationIds[i]);\\n            }\\n        }\\n    }\\n\\n    function _getBlockTimestamp() private view returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControl, ERC721)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"versionPragma\":\"=0.8.10\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x2ee05Bc6dECfbA7bbF60051D87DbA21C473C5681","bytecode":"0x6080604052600980546001600160401b03191662ed4e001790553480156200002657600080fd5b506040516200304a3803806200304a8339810160408190526200004991620002a3565b604080518082018252601281527129b0b73231b637b1b5902237b730ba34b7b760711b602080830191825283518085019094526009845268446f6e6174696f6e7360b81b908401528151919291620000a491600091620001fd565b508051620000ba906001906020840190620001fd565b5050506001600160a01b038116620001185760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a206f776e65722063616e6e6f7420626520307830000000000000604482015260640160405180910390fd5b6200012560008262000158565b620001517ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc78262000158565b5062000312565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620001f95760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001b83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b8280546200020b90620002d5565b90600052602060002090601f0160209004810192826200022f57600085556200027a565b82601f106200024a57805160ff19168380011785556200027a565b828001600101855582156200027a579182015b828111156200027a5782518255916020019190600101906200025d565b50620002889291506200028c565b5090565b5b808211156200028857600081556001016200028d565b600060208284031215620002b657600080fd5b81516001600160a01b0381168114620002ce57600080fd5b9392505050565b600181811c90821680620002ea57607f821691505b602082108114156200030c57634e487b7160e01b600052602260045260246000fd5b50919050565b612d2880620003226000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063a46053d2116100a2578063d824891011610071578063d824891014610464578063e253abdf14610477578063e3684e391461048a578063e985e9c51461051f57600080fd5b8063a46053d214610418578063b88d4fde1461042b578063c87b56dd1461043e578063d547741f1461045157600080fd5b806395d89b41116100de57806395d89b41146103ca57806398831192146103d2578063a217fddf146103fd578063a22cb4651461040557600080fd5b806370a082311461036b5780637641e6f31461037e57806391d148541461039157600080fd5b8063248a9ca31161017157806342842e0e1161014b57806342842e0e146102f15780634e8b1dd514610304578063634252dc146103315780636352211e1461035857600080fd5b8063248a9ca31461029a5780632f2ff15d146102cb57806336568abe146102de57600080fd5b8063081812fc116101ad578063081812fc14610226578063095ea7b31461025157806323b872dd146102645780632408ee801461027757600080fd5b806301ffc9a7146101d457806306f2a6be146101fc57806306fdde0314610211575b600080fd5b6101e76101e2366004612489565b61055b565b60405190151581526020015b60405180910390f35b61020f61020a3660046124f2565b61056c565b005b6102196106a2565b6040516101f391906125b6565b6102396102343660046125c9565b610734565b6040516001600160a01b0390911681526020016101f3565b61020f61025f3660046125f7565b61075b565b61020f610272366004612623565b610892565b6101e76102853660046125c9565b600a6020526000908152604090205460ff1681565b6102bd6102a83660046125c9565b60009081526006602052604090206001015490565b6040519081526020016101f3565b61020f6102d9366004612664565b610909565b61020f6102ec366004612664565b61092e565b61020f6102ff366004612623565b6109ba565b6009546103189067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101f3565b6102bd7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc781565b6102396103663660046125c9565b6109d5565b6102bd610379366004612694565b610a3a565b61020f61038c3660046126b1565b610ad4565b6101e761039f366004612664565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610219610c04565b6102bd6103e0366004612749565b600b60209081526000928352604080842090915290825290205481565b6102bd600081565b61020f61041336600461278c565b610c13565b61020f6104263660046127ba565b610c1e565b61020f610439366004612817565b61108a565b61021961044c3660046125c9565b611108565b61020f61045f366004612664565b61117c565b61020f6104723660046128f7565b6111a1565b61020f610485366004612940565b6112c6565b6104de6104983660046125c9565b6008602052600090815260409020805460018201546002909201546001600160801b03821692600160801b90920467ffffffffffffffff16916001600160a01b03169084565b604080516001600160801b03909516855267ffffffffffffffff90931660208501526001600160a01b039091169183019190915260608201526080016101f3565b6101e761052d36600461296a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600061056682611328565b92915050565b6000808067ffffffffffffffff421686825b818110156106965789898281811061059857610598612998565b602090810292909201356000818152600890935260409092208054929850965050600160801b900467ffffffffffffffff1683119350831561068657600285015460018601546001600160a01b03166000908152600b6020908152604080832089546001600160801b031684529091528120805490919061061a9084906129c4565b90915550610629905086611366565b857f6874c596aaaff0aa80bb2fa847845de413cb824db72206cecb813fdbffcb7cc889898481811061065d5761065d612998565b905060200281019061066f91906129dc565b60405161067d929190612a4c565b60405180910390a25b61068f81612a60565b905061057e565b50505050505050505050565b6060600080546106b190612a7b565b80601f01602080910402602001604051908101604052809291908181526020018280546106dd90612a7b565b801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b5050505050905090565b600061073f82611409565b506000908152600460205260409020546001600160a01b031690565b6000610766826109d5565b9050806001600160a01b0316836001600160a01b031614156107f55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806108115750610811813361052d565b6108835760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107ec565b61088d8383611470565b505050565b61089c33826114de565b6108fe5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016107ec565b61088d83838361155d565b60008281526006602052604090206001015461092481611763565b61088d838361176d565b6001600160a01b03811633146109ac5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107ec565b6109b6828261180f565b5050565b61088d8383836040518060200160405280600081525061108a565b6000818152600260205260408120546001600160a01b0316806105665760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107ec565b60006001600160a01b038216610ab85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016107ec565b506001600160a01b031660009081526003602052604090205490565b600033610ae0856109d5565b600086815260086020526040902080546001600160a01b039290921692909214925067ffffffffffffffff428116600160801b90920416108280610b215750805b610b6d5760405162461bcd60e51b815260206004820152601660248201527f446f6e6174696f6e733a206e6f7420616c6c6f7765640000000000000000000060448201526064016107ec565b600282015460018301546001600160a01b03166000908152600b6020908152604080832086546001600160801b0316845290915281208054909190610bb39084906129c4565b90915550610bc2905086611366565b857f6874c596aaaff0aa80bb2fa847845de413cb824db72206cecb813fdbffcb7cc88686604051610bf4929190612a4c565b60405180910390a2505050505050565b6060600180546106b190612a7b565b6109b6338383611892565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc7610c4881611763565b604080516020808201889052818301879052825180830384018152606090920183528151918101919091206000818152600a9092529190205460ff1615610cd15760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a20616c72656164792070726f6365737365640000000060448201526064016107ec565b6040805160608101909152600954600091908190610cf99067ffffffffffffffff1642612ab6565b67ffffffffffffffff16815260208101869052600754604090910152905060005b816020015181101561106257816040018051610d3590612a60565b9052604080516080810190915280878784818110610d5557610d55612998565b9050602002810190610d679190612ae2565b610d75906020810190612b02565b6001600160801b03168152835167ffffffffffffffff166020820152604001878784818110610da657610da6612998565b9050602002810190610db89190612ae2565b610dc9906060810190604001612694565b6001600160a01b03168152602001878784818110610de957610de9612998565b9050602002810190610dfb9190612ae2565b60609081013590915260408085015160009081526008602090815290829020845181549286015167ffffffffffffffff16600160801b027fffffffffffffffff0000000000000000000000000000000000000000000000009093166001600160801b0390911617919091178155908301516001820180546001600160a01b039092166001600160a01b0319909216919091179055910151600290910155610eda868683818110610ead57610ead612998565b9050602002810190610ebf9190612ae2565b610ed0906040810190602001612694565b8360400151611961565b82868683818110610eed57610eed612998565b9050602002810190610eff9190612ae2565b610f0d906020810190612b02565b6001600160801b031683604001517f222d24236c73041703a1bbe05ba167906050aade2b4b24db7fc213221cb47908898986818110610f4e57610f4e612998565b9050602002810190610f609190612ae2565b610f71906060810190604001612694565b86518b8b88818110610f8557610f85612998565b9050602002810190610f979190612ae2565b606001358c8c89818110610fad57610fad612998565b9050602002810190610fbf9190612ae2565b610fd0906040810190602001612694565b8d8d8a818110610fe257610fe2612998565b9050602002810190610ff49190612ae2565b6110029060808101906129dc565b8f8f8c81811061101457611014612998565b90506020028101906110269190612ae2565b6110379060c081019060a001612694565b60405161104a9796959493929190612b1d565b60405180910390a461105b81612a60565b9050610d1a565b506040908101516007556000918252600a6020529020805460ff191660011790555050505050565b61109433836114de565b6110f65760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016107ec565b61110284848484611afa565b50505050565b606061111382611409565b600061112a60408051602081019091526000815290565b9050600081511161114a5760405180602001604052806000815250611175565b8061115484611b83565b604051602001611165929190612b76565b6040516020818303038152906040525b9392505050565b60008281526006602052604090206001015461119781611763565b61088d838361180f565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc76111cb81611763565b6001600160a01b0383166000908152600b602090815260408083206001600160801b0388168452909152902054806112455760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a206e6f7468696e6720746f20646f6e6174650000000060448201526064016107ec565b6001600160a01b038481166000818152600b602090815260408083206001600160801b038b168085529083528184209390935551858152938716937f27c209b93a7fe87531993c3ce2ab9e352e1e022adb1088729759d043daa08757910160405180910390a46112bf6001600160a01b0385168483611c2d565b5050505050565b60006112d181611763565b6009805467ffffffffffffffff191667ffffffffffffffff84169081179091556040519081527f54578ea9dcb2f1fc35e2b4ff6947b808dfa81adf38483eaec4cde6d083cbcf519060200160405180910390a15050565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610566575061056682611cad565b6000611371826109d5565b9050611381816000846001611d48565b61138a826109d5565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000818152600260205260409020546001600160a01b031661146d5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107ec565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906114a5826109d5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806114ea836109d5565b9050806001600160a01b0316846001600160a01b0316148061153157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806115555750836001600160a01b031661154a84610734565b6001600160a01b0316145b949350505050565b826001600160a01b0316611570826109d5565b6001600160a01b0316146115d45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016107ec565b6001600160a01b03821661164f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107ec565b61165c8383836001611d48565b826001600160a01b031661166f826109d5565b6001600160a01b0316146116d35760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016107ec565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61146d8133611dd0565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166109b65760008281526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117cb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16156109b65760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b031614156118f45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107ec565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0382166119b75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107ec565b6000818152600260205260409020546001600160a01b031615611a1c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107ec565b611a2a600083836001611d48565b6000818152600260205260409020546001600160a01b031615611a8f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107ec565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b611b0584848461155d565b611b1184848484611e45565b6111025760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107ec565b60606000611b9083611f99565b600101905060008167ffffffffffffffff811115611bb057611bb0612801565b6040519080825280601f01601f191660200182016040528015611bda576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611c2057611c25565b611be4565b509392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261088d90849061207b565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480611d1057506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061056657507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610566565b6001811115611102576001600160a01b03841615611d8e576001600160a01b03841660009081526003602052604081208054839290611d88908490612b9c565b90915550505b6001600160a01b03831615611102576001600160a01b03831660009081526003602052604081208054839290611dc59084906129c4565b909155505050505050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166109b657611e0381612160565b611e0e836020612172565b604051602001611e1f929190612bb3565b60408051601f198184030181529082905262461bcd60e51b82526107ec916004016125b6565b60006001600160a01b0384163b15611f8e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611e89903390899088908890600401612c34565b6020604051808303816000875af1925050508015611ec4575060408051601f3d908101601f19168201909252611ec191810190612c70565b60015b611f74573d808015611ef2576040519150601f19603f3d011682016040523d82523d6000602084013e611ef7565b606091505b508051611f6c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107ec565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611555565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611fe2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061200e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061202c57662386f26fc10000830492506010015b6305f5e1008310612044576305f5e100830492506008015b612710831061205857612710830492506004015b6064831061206a576064830492506002015b600a83106105665760010192915050565b60006120d0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123539092919063ffffffff16565b80519091501561088d57808060200190518101906120ee9190612c8d565b61088d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107ec565b60606105666001600160a01b03831660145b60606000612181836002612caa565b61218c9060026129c4565b67ffffffffffffffff8111156121a4576121a4612801565b6040519080825280601f01601f1916602001820160405280156121ce576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061220557612205612998565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061225057612250612998565b60200101906001600160f81b031916908160001a9053506000612274846002612caa565b61227f9060016129c4565b90505b6001811115612304577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106122c0576122c0612998565b1a60f81b8282815181106122d6576122d6612998565b60200101906001600160f81b031916908160001a90535060049490941c936122fd81612cc9565b9050612282565b5083156111755760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107ec565b6060611555848460008585600080866001600160a01b0316858760405161237a9190612ce0565b60006040518083038185875af1925050503d80600081146123b7576040519150601f19603f3d011682016040523d82523d6000602084013e6123bc565b606091505b50915091506123cd878383876123d8565b979650505050505050565b6060831561244457825161243d576001600160a01b0385163b61243d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ec565b5081611555565b61155583838151156124595781518083602001fd5b8060405162461bcd60e51b81526004016107ec91906125b6565b6001600160e01b03198116811461146d57600080fd5b60006020828403121561249b57600080fd5b813561117581612473565b60008083601f8401126124b857600080fd5b50813567ffffffffffffffff8111156124d057600080fd5b6020830191508360208260051b85010111156124eb57600080fd5b9250929050565b6000806000806040858703121561250857600080fd5b843567ffffffffffffffff8082111561252057600080fd5b61252c888389016124a6565b9096509450602087013591508082111561254557600080fd5b50612552878288016124a6565b95989497509550505050565b60005b83811015612579578181015183820152602001612561565b838111156111025750506000910152565b600081518084526125a281602086016020860161255e565b601f01601f19169290920160200192915050565b602081526000611175602083018461258a565b6000602082840312156125db57600080fd5b5035919050565b6001600160a01b038116811461146d57600080fd5b6000806040838503121561260a57600080fd5b8235612615816125e2565b946020939093013593505050565b60008060006060848603121561263857600080fd5b8335612643816125e2565b92506020840135612653816125e2565b929592945050506040919091013590565b6000806040838503121561267757600080fd5b823591506020830135612689816125e2565b809150509250929050565b6000602082840312156126a657600080fd5b8135611175816125e2565b6000806000604084860312156126c657600080fd5b83359250602084013567ffffffffffffffff808211156126e557600080fd5b818601915086601f8301126126f957600080fd5b81358181111561270857600080fd5b87602082850101111561271a57600080fd5b6020830194508093505050509250925092565b80356001600160801b038116811461274457600080fd5b919050565b6000806040838503121561275c57600080fd5b8235612767816125e2565b91506127756020840161272d565b90509250929050565b801515811461146d57600080fd5b6000806040838503121561279f57600080fd5b82356127aa816125e2565b915060208301356126898161277e565b600080600080606085870312156127d057600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156127f557600080fd5b612552878288016124a6565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561282d57600080fd5b8435612838816125e2565b93506020850135612848816125e2565b925060408501359150606085013567ffffffffffffffff8082111561286c57600080fd5b818701915087601f83011261288057600080fd5b81358181111561289257612892612801565b604051601f8201601f19908116603f011681019083821181831017156128ba576128ba612801565b816040528281528a60208487010111156128d357600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561290c57600080fd5b6129158461272d565b92506020840135612925816125e2565b91506040840135612935816125e2565b809150509250925092565b60006020828403121561295257600080fd5b813567ffffffffffffffff8116811461117557600080fd5b6000806040838503121561297d57600080fd5b8235612988816125e2565b91506020830135612689816125e2565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156129d7576129d76129ae565b500190565b6000808335601e198436030181126129f357600080fd5b83018035915067ffffffffffffffff821115612a0e57600080fd5b6020019150368190038213156124eb57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611555602083018486612a23565b6000600019821415612a7457612a746129ae565b5060010190565b600181811c90821680612a8f57607f821691505b60208210811415612ab057634e487b7160e01b600052602260045260246000fd5b50919050565b600067ffffffffffffffff808316818516808303821115612ad957612ad96129ae565b01949350505050565b6000823560be19833603018112612af857600080fd5b9190910192915050565b600060208284031215612b1457600080fd5b6111758261272d565b60006001600160a01b03808a16835267ffffffffffffffff89166020840152876040840152808716606084015260c06080840152612b5f60c084018688612a23565b915080841660a08401525098975050505050505050565b60008351612b8881846020880161255e565b835190830190612ad981836020880161255e565b600082821015612bae57612bae6129ae565b500390565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612beb81601785016020880161255e565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612c2881602884016020880161255e565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612c66608083018461258a565b9695505050505050565b600060208284031215612c8257600080fd5b815161117581612473565b600060208284031215612c9f57600080fd5b81516111758161277e565b6000816000190483118215151615612cc457612cc46129ae565b500290565b600081612cd857612cd86129ae565b506000190190565b60008251612af881846020870161255e56fea2646970667358221220e6724cfd1986c5147b67b8e5a477bf9025599e0e12fd28986248d28d6f2aec9264736f6c634300080a0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063a46053d2116100a2578063d824891011610071578063d824891014610464578063e253abdf14610477578063e3684e391461048a578063e985e9c51461051f57600080fd5b8063a46053d214610418578063b88d4fde1461042b578063c87b56dd1461043e578063d547741f1461045157600080fd5b806395d89b41116100de57806395d89b41146103ca57806398831192146103d2578063a217fddf146103fd578063a22cb4651461040557600080fd5b806370a082311461036b5780637641e6f31461037e57806391d148541461039157600080fd5b8063248a9ca31161017157806342842e0e1161014b57806342842e0e146102f15780634e8b1dd514610304578063634252dc146103315780636352211e1461035857600080fd5b8063248a9ca31461029a5780632f2ff15d146102cb57806336568abe146102de57600080fd5b8063081812fc116101ad578063081812fc14610226578063095ea7b31461025157806323b872dd146102645780632408ee801461027757600080fd5b806301ffc9a7146101d457806306f2a6be146101fc57806306fdde0314610211575b600080fd5b6101e76101e2366004612489565b61055b565b60405190151581526020015b60405180910390f35b61020f61020a3660046124f2565b61056c565b005b6102196106a2565b6040516101f391906125b6565b6102396102343660046125c9565b610734565b6040516001600160a01b0390911681526020016101f3565b61020f61025f3660046125f7565b61075b565b61020f610272366004612623565b610892565b6101e76102853660046125c9565b600a6020526000908152604090205460ff1681565b6102bd6102a83660046125c9565b60009081526006602052604090206001015490565b6040519081526020016101f3565b61020f6102d9366004612664565b610909565b61020f6102ec366004612664565b61092e565b61020f6102ff366004612623565b6109ba565b6009546103189067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101f3565b6102bd7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc781565b6102396103663660046125c9565b6109d5565b6102bd610379366004612694565b610a3a565b61020f61038c3660046126b1565b610ad4565b6101e761039f366004612664565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610219610c04565b6102bd6103e0366004612749565b600b60209081526000928352604080842090915290825290205481565b6102bd600081565b61020f61041336600461278c565b610c13565b61020f6104263660046127ba565b610c1e565b61020f610439366004612817565b61108a565b61021961044c3660046125c9565b611108565b61020f61045f366004612664565b61117c565b61020f6104723660046128f7565b6111a1565b61020f610485366004612940565b6112c6565b6104de6104983660046125c9565b6008602052600090815260409020805460018201546002909201546001600160801b03821692600160801b90920467ffffffffffffffff16916001600160a01b03169084565b604080516001600160801b03909516855267ffffffffffffffff90931660208501526001600160a01b039091169183019190915260608201526080016101f3565b6101e761052d36600461296a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600061056682611328565b92915050565b6000808067ffffffffffffffff421686825b818110156106965789898281811061059857610598612998565b602090810292909201356000818152600890935260409092208054929850965050600160801b900467ffffffffffffffff1683119350831561068657600285015460018601546001600160a01b03166000908152600b6020908152604080832089546001600160801b031684529091528120805490919061061a9084906129c4565b90915550610629905086611366565b857f6874c596aaaff0aa80bb2fa847845de413cb824db72206cecb813fdbffcb7cc889898481811061065d5761065d612998565b905060200281019061066f91906129dc565b60405161067d929190612a4c565b60405180910390a25b61068f81612a60565b905061057e565b50505050505050505050565b6060600080546106b190612a7b565b80601f01602080910402602001604051908101604052809291908181526020018280546106dd90612a7b565b801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b5050505050905090565b600061073f82611409565b506000908152600460205260409020546001600160a01b031690565b6000610766826109d5565b9050806001600160a01b0316836001600160a01b031614156107f55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806108115750610811813361052d565b6108835760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107ec565b61088d8383611470565b505050565b61089c33826114de565b6108fe5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016107ec565b61088d83838361155d565b60008281526006602052604090206001015461092481611763565b61088d838361176d565b6001600160a01b03811633146109ac5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107ec565b6109b6828261180f565b5050565b61088d8383836040518060200160405280600081525061108a565b6000818152600260205260408120546001600160a01b0316806105665760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107ec565b60006001600160a01b038216610ab85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016107ec565b506001600160a01b031660009081526003602052604090205490565b600033610ae0856109d5565b600086815260086020526040902080546001600160a01b039290921692909214925067ffffffffffffffff428116600160801b90920416108280610b215750805b610b6d5760405162461bcd60e51b815260206004820152601660248201527f446f6e6174696f6e733a206e6f7420616c6c6f7765640000000000000000000060448201526064016107ec565b600282015460018301546001600160a01b03166000908152600b6020908152604080832086546001600160801b0316845290915281208054909190610bb39084906129c4565b90915550610bc2905086611366565b857f6874c596aaaff0aa80bb2fa847845de413cb824db72206cecb813fdbffcb7cc88686604051610bf4929190612a4c565b60405180910390a2505050505050565b6060600180546106b190612a7b565b6109b6338383611892565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc7610c4881611763565b604080516020808201889052818301879052825180830384018152606090920183528151918101919091206000818152600a9092529190205460ff1615610cd15760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a20616c72656164792070726f6365737365640000000060448201526064016107ec565b6040805160608101909152600954600091908190610cf99067ffffffffffffffff1642612ab6565b67ffffffffffffffff16815260208101869052600754604090910152905060005b816020015181101561106257816040018051610d3590612a60565b9052604080516080810190915280878784818110610d5557610d55612998565b9050602002810190610d679190612ae2565b610d75906020810190612b02565b6001600160801b03168152835167ffffffffffffffff166020820152604001878784818110610da657610da6612998565b9050602002810190610db89190612ae2565b610dc9906060810190604001612694565b6001600160a01b03168152602001878784818110610de957610de9612998565b9050602002810190610dfb9190612ae2565b60609081013590915260408085015160009081526008602090815290829020845181549286015167ffffffffffffffff16600160801b027fffffffffffffffff0000000000000000000000000000000000000000000000009093166001600160801b0390911617919091178155908301516001820180546001600160a01b039092166001600160a01b0319909216919091179055910151600290910155610eda868683818110610ead57610ead612998565b9050602002810190610ebf9190612ae2565b610ed0906040810190602001612694565b8360400151611961565b82868683818110610eed57610eed612998565b9050602002810190610eff9190612ae2565b610f0d906020810190612b02565b6001600160801b031683604001517f222d24236c73041703a1bbe05ba167906050aade2b4b24db7fc213221cb47908898986818110610f4e57610f4e612998565b9050602002810190610f609190612ae2565b610f71906060810190604001612694565b86518b8b88818110610f8557610f85612998565b9050602002810190610f979190612ae2565b606001358c8c89818110610fad57610fad612998565b9050602002810190610fbf9190612ae2565b610fd0906040810190602001612694565b8d8d8a818110610fe257610fe2612998565b9050602002810190610ff49190612ae2565b6110029060808101906129dc565b8f8f8c81811061101457611014612998565b90506020028101906110269190612ae2565b6110379060c081019060a001612694565b60405161104a9796959493929190612b1d565b60405180910390a461105b81612a60565b9050610d1a565b506040908101516007556000918252600a6020529020805460ff191660011790555050505050565b61109433836114de565b6110f65760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016107ec565b61110284848484611afa565b50505050565b606061111382611409565b600061112a60408051602081019091526000815290565b9050600081511161114a5760405180602001604052806000815250611175565b8061115484611b83565b604051602001611165929190612b76565b6040516020818303038152906040525b9392505050565b60008281526006602052604090206001015461119781611763565b61088d838361180f565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc76111cb81611763565b6001600160a01b0383166000908152600b602090815260408083206001600160801b0388168452909152902054806112455760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a206e6f7468696e6720746f20646f6e6174650000000060448201526064016107ec565b6001600160a01b038481166000818152600b602090815260408083206001600160801b038b168085529083528184209390935551858152938716937f27c209b93a7fe87531993c3ce2ab9e352e1e022adb1088729759d043daa08757910160405180910390a46112bf6001600160a01b0385168483611c2d565b5050505050565b60006112d181611763565b6009805467ffffffffffffffff191667ffffffffffffffff84169081179091556040519081527f54578ea9dcb2f1fc35e2b4ff6947b808dfa81adf38483eaec4cde6d083cbcf519060200160405180910390a15050565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610566575061056682611cad565b6000611371826109d5565b9050611381816000846001611d48565b61138a826109d5565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000818152600260205260409020546001600160a01b031661146d5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107ec565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906114a5826109d5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806114ea836109d5565b9050806001600160a01b0316846001600160a01b0316148061153157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806115555750836001600160a01b031661154a84610734565b6001600160a01b0316145b949350505050565b826001600160a01b0316611570826109d5565b6001600160a01b0316146115d45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016107ec565b6001600160a01b03821661164f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107ec565b61165c8383836001611d48565b826001600160a01b031661166f826109d5565b6001600160a01b0316146116d35760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016107ec565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61146d8133611dd0565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166109b65760008281526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117cb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16156109b65760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b031614156118f45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107ec565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0382166119b75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107ec565b6000818152600260205260409020546001600160a01b031615611a1c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107ec565b611a2a600083836001611d48565b6000818152600260205260409020546001600160a01b031615611a8f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107ec565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b611b0584848461155d565b611b1184848484611e45565b6111025760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107ec565b60606000611b9083611f99565b600101905060008167ffffffffffffffff811115611bb057611bb0612801565b6040519080825280601f01601f191660200182016040528015611bda576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611c2057611c25565b611be4565b509392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261088d90849061207b565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480611d1057506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061056657507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610566565b6001811115611102576001600160a01b03841615611d8e576001600160a01b03841660009081526003602052604081208054839290611d88908490612b9c565b90915550505b6001600160a01b03831615611102576001600160a01b03831660009081526003602052604081208054839290611dc59084906129c4565b909155505050505050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166109b657611e0381612160565b611e0e836020612172565b604051602001611e1f929190612bb3565b60408051601f198184030181529082905262461bcd60e51b82526107ec916004016125b6565b60006001600160a01b0384163b15611f8e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611e89903390899088908890600401612c34565b6020604051808303816000875af1925050508015611ec4575060408051601f3d908101601f19168201909252611ec191810190612c70565b60015b611f74573d808015611ef2576040519150601f19603f3d011682016040523d82523d6000602084013e611ef7565b606091505b508051611f6c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107ec565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611555565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611fe2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061200e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061202c57662386f26fc10000830492506010015b6305f5e1008310612044576305f5e100830492506008015b612710831061205857612710830492506004015b6064831061206a576064830492506002015b600a83106105665760010192915050565b60006120d0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123539092919063ffffffff16565b80519091501561088d57808060200190518101906120ee9190612c8d565b61088d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107ec565b60606105666001600160a01b03831660145b60606000612181836002612caa565b61218c9060026129c4565b67ffffffffffffffff8111156121a4576121a4612801565b6040519080825280601f01601f1916602001820160405280156121ce576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061220557612205612998565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061225057612250612998565b60200101906001600160f81b031916908160001a9053506000612274846002612caa565b61227f9060016129c4565b90505b6001811115612304577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106122c0576122c0612998565b1a60f81b8282815181106122d6576122d6612998565b60200101906001600160f81b031916908160001a90535060049490941c936122fd81612cc9565b9050612282565b5083156111755760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107ec565b6060611555848460008585600080866001600160a01b0316858760405161237a9190612ce0565b60006040518083038185875af1925050503d80600081146123b7576040519150601f19603f3d011682016040523d82523d6000602084013e6123bc565b606091505b50915091506123cd878383876123d8565b979650505050505050565b6060831561244457825161243d576001600160a01b0385163b61243d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ec565b5081611555565b61155583838151156124595781518083602001fd5b8060405162461bcd60e51b81526004016107ec91906125b6565b6001600160e01b03198116811461146d57600080fd5b60006020828403121561249b57600080fd5b813561117581612473565b60008083601f8401126124b857600080fd5b50813567ffffffffffffffff8111156124d057600080fd5b6020830191508360208260051b85010111156124eb57600080fd5b9250929050565b6000806000806040858703121561250857600080fd5b843567ffffffffffffffff8082111561252057600080fd5b61252c888389016124a6565b9096509450602087013591508082111561254557600080fd5b50612552878288016124a6565b95989497509550505050565b60005b83811015612579578181015183820152602001612561565b838111156111025750506000910152565b600081518084526125a281602086016020860161255e565b601f01601f19169290920160200192915050565b602081526000611175602083018461258a565b6000602082840312156125db57600080fd5b5035919050565b6001600160a01b038116811461146d57600080fd5b6000806040838503121561260a57600080fd5b8235612615816125e2565b946020939093013593505050565b60008060006060848603121561263857600080fd5b8335612643816125e2565b92506020840135612653816125e2565b929592945050506040919091013590565b6000806040838503121561267757600080fd5b823591506020830135612689816125e2565b809150509250929050565b6000602082840312156126a657600080fd5b8135611175816125e2565b6000806000604084860312156126c657600080fd5b83359250602084013567ffffffffffffffff808211156126e557600080fd5b818601915086601f8301126126f957600080fd5b81358181111561270857600080fd5b87602082850101111561271a57600080fd5b6020830194508093505050509250925092565b80356001600160801b038116811461274457600080fd5b919050565b6000806040838503121561275c57600080fd5b8235612767816125e2565b91506127756020840161272d565b90509250929050565b801515811461146d57600080fd5b6000806040838503121561279f57600080fd5b82356127aa816125e2565b915060208301356126898161277e565b600080600080606085870312156127d057600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156127f557600080fd5b612552878288016124a6565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561282d57600080fd5b8435612838816125e2565b93506020850135612848816125e2565b925060408501359150606085013567ffffffffffffffff8082111561286c57600080fd5b818701915087601f83011261288057600080fd5b81358181111561289257612892612801565b604051601f8201601f19908116603f011681019083821181831017156128ba576128ba612801565b816040528281528a60208487010111156128d357600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561290c57600080fd5b6129158461272d565b92506020840135612925816125e2565b91506040840135612935816125e2565b809150509250925092565b60006020828403121561295257600080fd5b813567ffffffffffffffff8116811461117557600080fd5b6000806040838503121561297d57600080fd5b8235612988816125e2565b91506020830135612689816125e2565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156129d7576129d76129ae565b500190565b6000808335601e198436030181126129f357600080fd5b83018035915067ffffffffffffffff821115612a0e57600080fd5b6020019150368190038213156124eb57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611555602083018486612a23565b6000600019821415612a7457612a746129ae565b5060010190565b600181811c90821680612a8f57607f821691505b60208210811415612ab057634e487b7160e01b600052602260045260246000fd5b50919050565b600067ffffffffffffffff808316818516808303821115612ad957612ad96129ae565b01949350505050565b6000823560be19833603018112612af857600080fd5b9190910192915050565b600060208284031215612b1457600080fd5b6111758261272d565b60006001600160a01b03808a16835267ffffffffffffffff89166020840152876040840152808716606084015260c06080840152612b5f60c084018688612a23565b915080841660a08401525098975050505050505050565b60008351612b8881846020880161255e565b835190830190612ad981836020880161255e565b600082821015612bae57612bae6129ae565b500390565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612beb81601785016020880161255e565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612c2881602884016020880161255e565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612c66608083018461258a565b9695505050505050565b600060208284031215612c8257600080fd5b815161117581612473565b600060208284031215612c9f57600080fd5b81516111758161277e565b6000816000190483118215151615612cc457612cc46129ae565b500290565b600081612cd857612cd86129ae565b506000190190565b60008251612af881846020870161255e56fea2646970667358221220e6724cfd1986c5147b67b8e5a477bf9025599e0e12fd28986248d28d6f2aec9264736f6c634300080a0033","abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"string","name":"donationId","type":"string"}],"name":"DonationBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"uint128","name":"destinationId","type":"uint128"},{"indexed":true,"internalType":"bytes32","name":"groupId","type":"bytes32"},{"indexed":false,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"expiry","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"string","name":"donationId","type":"string"},{"indexed":false,"internalType":"address","name":"vault","type":"address"}],"name":"DonationMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint128","name":"destinationId","type":"uint128"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"DonationsSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"TTLUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WORKER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"donationId","type":"string"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"string[]","name":"donationIds","type":"string[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint128","name":"_destinationId","type":"uint128"},{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"donate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"metadata","outputs":[{"internalType":"uint128","name":"destinationId","type":"uint128"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"uint256","name":"_batchNr","type":"uint256"},{"components":[{"internalType":"uint128","name":"destinationId","type":"uint128"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"string","name":"donationId","type":"string"},{"internalType":"address","name":"vault","type":"address"}],"internalType":"struct Donations.DonationParams[]","name":"_params","type":"tuple[]"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"processedDonationsGroups","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_ttl","type":"uint64"}],"name":"setTTL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"","type":"address"},{"internalType":"uint128","name":"","type":"uint128"}],"name":"transferableAmounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ttl","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}]}