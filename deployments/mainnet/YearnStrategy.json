{
  "address": "0x4C09E88594635393DBfD4fda6C842a051573c32C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "StrategyAdminCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyAmountZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyCallerNotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyCallerNotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyCallerNotSettings",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyCannotTransferAdminRightsToSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyMaxLossOnWithdrawTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNoUnderlying",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotEnoughShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotIVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotRunning",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyUnderlyingCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyYearnVaultCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAmountDoesNotMatchParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAmountLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotComputeSharesWithoutPrincipal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotDeposit0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotDepositWhenClaimerInDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotDepositWhenYieldNegative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotSponsor0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotTransferOwnershipToSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotWithdrawMoreThanAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultCannotWithdrawWhenYieldNegative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultClaimPercentageCannotBe0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultClaimerCannotBe0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultClaimsDontAddUp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultDepositLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultDepositNameTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultDestinationCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidInvestpct",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidLockPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidLossTolerance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidMinLockPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidPerformanceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultInvalidVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNoPerformanceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNoYieldToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotEnoughToRebalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotOwnerOfDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotSponsor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNothingToDo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultOwnerCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultSenderNotOwnerOfGroupId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultStrategyHasInvestedFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultStrategyNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultTreasuryCannotBe0Address",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultUnderlyingCannotBe0Address",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StrategyInvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        }
      ],
      "name": "StrategyMaxLossOnWithdrawChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StrategyWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTINGS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conversionMultiplier",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSync",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLossOnWithdraw",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_maxLoss",
          "type": "uint128"
        }
      ],
      "name": "setMaxLossOnWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdminRights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yVault",
      "outputs": [
        {
          "internalType": "contract IYearnVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb95621b9aa3e934d1abc6d9818fb257500a1c0b4438912f7170981e01f11abfb",
  "receipt": {
    "to": null,
    "from": "0x84f67f75DAf6D57Aef500E0c85C77B7b3bBc92A9",
    "contractAddress": "0x4C09E88594635393DBfD4fda6C842a051573c32C",
    "transactionIndex": 121,
    "gasUsed": "1549294",
    "logsBloom": "0x00000004000000000000800000080000000000000000000000000000000000000000000000000000000000000000000000000200000000001000000000200000000000000020000000000000000000000040000000000000000000001000000000000000020000000004000000000800000000000000000000000000000012000000000000000010000200200000000000000000010000000000000000080000020100000000000000000000000000000000004000000000001040000000000000000000000000000000020000400000000000000000000100000000000020000010000000400001000000000000000000000000000000000000000000002000",
    "blockHash": "0x62d8b3479be4b21ee549aeabd94f3900fabc7aa711083b682190e4599927fdb9",
    "transactionHash": "0xb95621b9aa3e934d1abc6d9818fb257500a1c0b4438912f7170981e01f11abfb",
    "logs": [
      {
        "transactionIndex": 121,
        "blockNumber": 15302311,
        "transactionHash": "0xb95621b9aa3e934d1abc6d9818fb257500a1c0b4438912f7170981e01f11abfb",
        "address": "0x4C09E88594635393DBfD4fda6C842a051573c32C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084f67f75daf6d57aef500e0c85c77b7b3bbc92a9",
          "0x00000000000000000000000084f67f75daf6d57aef500e0c85c77b7b3bbc92a9"
        ],
        "data": "0x",
        "logIndex": 257,
        "blockHash": "0x62d8b3479be4b21ee549aeabd94f3900fabc7aa711083b682190e4599927fdb9"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15302311,
        "transactionHash": "0xb95621b9aa3e934d1abc6d9818fb257500a1c0b4438912f7170981e01f11abfb",
        "address": "0x4C09E88594635393DBfD4fda6C842a051573c32C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf603095",
          "0x00000000000000000000000084f67f75daf6d57aef500e0c85c77b7b3bbc92a9",
          "0x00000000000000000000000084f67f75daf6d57aef500e0c85c77b7b3bbc92a9"
        ],
        "data": "0x",
        "logIndex": 258,
        "blockHash": "0x62d8b3479be4b21ee549aeabd94f3900fabc7aa711083b682190e4599927fdb9"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15302311,
        "transactionHash": "0xb95621b9aa3e934d1abc6d9818fb257500a1c0b4438912f7170981e01f11abfb",
        "address": "0x4C09E88594635393DBfD4fda6C842a051573c32C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x000000000000000000000000bbb08bba6fc4f5c17ef001e508fb72912916820e",
          "0x00000000000000000000000084f67f75daf6d57aef500e0c85c77b7b3bbc92a9"
        ],
        "data": "0x",
        "logIndex": 259,
        "blockHash": "0x62d8b3479be4b21ee549aeabd94f3900fabc7aa711083b682190e4599927fdb9"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15302311,
        "transactionHash": "0xb95621b9aa3e934d1abc6d9818fb257500a1c0b4438912f7170981e01f11abfb",
        "address": "0x5f98805A4E8be255a32880FDeC7F6728C6568bA0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004c09e88594635393dbfd4fda6c842a051573c32c",
          "0x000000000000000000000000378cb52b00f9d0921cb46dfc099cff73b42419dc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 260,
        "blockHash": "0x62d8b3479be4b21ee549aeabd94f3900fabc7aa711083b682190e4599927fdb9"
      }
    ],
    "blockNumber": 15302311,
    "cumulativeGasUsed": "14761963",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBBB08bba6fc4F5C17EF001e508FB72912916820E",
    "0x84f67f75DAf6D57Aef500E0c85C77B7b3bBc92A9",
    "0x378cb52b00F9D0921cb46dFc099CFf73b42419dC",
    "0x5f98805A4E8be255a32880FDeC7F6728C6568bA0"
  ],
  "numDeployments": 1,
  "solcInputHash": "80fd616d15f4adcdc5382c968b375311",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"StrategyAdminCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyAmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyCallerNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyCallerNotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyCallerNotSettings\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyCannotTransferAdminRightsToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyMaxLossOnWithdrawTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNoUnderlying\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotEnoughShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotIVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotRunning\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyUnderlyingCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyYearnVaultCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAmountDoesNotMatchParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAmountLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotComputeSharesWithoutPrincipal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotDeposit0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotDepositWhenClaimerInDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotDepositWhenYieldNegative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotSponsor0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotTransferOwnershipToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotWithdrawMoreThanAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultCannotWithdrawWhenYieldNegative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultClaimPercentageCannotBe0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultClaimerCannotBe0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultClaimsDontAddUp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultDepositLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultDepositNameTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultDestinationCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidInvestpct\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidLockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidLossTolerance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidMinLockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidPerformanceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvalidVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNoPerformanceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNoYieldToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotEnoughToRebalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotOwnerOfDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotSponsor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNothingToDo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultOwnerCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultSenderNotOwnerOfGroupId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultStrategyHasInvestedFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultStrategyNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultTreasuryCannotBe0Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultUnderlyingCannotBe0Address\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StrategyInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"}],\"name\":\"StrategyMaxLossOnWithdrawChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StrategyWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTINGS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conversionMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSync\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLossOnWithdraw\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_maxLoss\",\"type\":\"uint128\"}],\"name\":\"setMaxLossOnWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yVault\",\"outputs\":[{\"internalType\":\"contract IYearnVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"StrategyMaxLossOnWithdrawChanged(uint256)\":{\"params\":{\"maxLoss\":\"new value for max loss withdraw param\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_admin\":\"address of the administrator account for this strategy\",\"_underlying\":\"address of the underlying token\",\"_vault\":\"address of the vault that will use this strategy\",\"_yVault\":\"address of the yearn vault that this strategy is using\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasAssets()\":{\"returns\":{\"_0\":\"true if assets invested, false if nothing invested.\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"investedAssets()\":{\"returns\":{\"_0\":\"The total amount of underlying\"}},\"isSync()\":{\"returns\":{\"_0\":\"true always\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setMaxLossOnWithdraw(uint128)\":{\"params\":{\"_maxLoss\":\"The max loss percentage to use when withdrawing from the Yearn vault. Value of 1 equals 0.01% loss.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdminRights(address)\":{\"params\":{\"_newAdmin\":\"The new Strategy admin account.\"}},\"withdrawToVault(uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\"}}},\"stateVariables\":{\"vault\":{\"return\":\"The vault's address\",\"returns\":{\"_0\":\"The vault's address\"}}},\"version\":1},\"userdoc\":{\"events\":{\"StrategyInvested(uint256)\":{\"notice\":\"Emmited when funds are invested by the strategy.\"},\"StrategyMaxLossOnWithdrawChanged(uint256)\":{\"notice\":\"Emmited when the maxLossOnWithdraw (from Yearn vault) is changed.\"},\"StrategyWithdrawn(uint256)\":{\"notice\":\"Emmited when funds are withdrawn (disinvested) by the strategy.\"}},\"kind\":\"user\",\"methods\":{\"MANAGER_ROLE()\":{\"notice\":\"role allowed to invest/withdraw from yearn vault\"},\"SETTINGS_ROLE()\":{\"notice\":\"role allowed to change settings such as max loss on withdraw from yearn vault\"},\"hasAssets()\":{\"notice\":\"Indicates if assets are invested into strategy or not.this will be used when removing the strategy from the vault\"},\"invest()\":{\"notice\":\"Deposits of all the available underlying into the yield generating protocol.\"},\"investedAssets()\":{\"notice\":\"Amount of the underlying currency currently invested by the strategy.both held and invested amounts are included here, using the latest known exchange rates to the underlying currency\"},\"isSync()\":{\"notice\":\"Yearn strategy is synchronous meaning it supports immediate withdrawals.\"},\"setMaxLossOnWithdraw(uint128)\":{\"notice\":\"Sets the max loss percentage used when withdrawing from the Yearn vault.Can only be called by the account with settings role.\"},\"transferAdminRights(address)\":{\"notice\":\"Transfers administrator rights for the Strategy to another account, revoking current admin roles and setting up the roles for the new admin.Can only be called by the account with the ADMIN role.\"},\"vault()\":{\"notice\":\"The vault linked to this strategy.\"},\"withdrawToVault(uint256)\":{\"notice\":\"Withdraws the specified amount back to the vault (disinvests)\"}},\"notice\":\"YearnStrategy generates yield by investing into a Yearn vault.This strategy is syncrhonous (supports immediate withdrawals).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategy/yearn/YearnStrategy.sol\":\"YearnStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/CustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface CustomErrors {\\n    //\\n    // Vault Errors\\n    //\\n\\n    // Vault: sender is not the owner of the group id\\n    error VaultSenderNotOwnerOfGroupId();\\n\\n    // Vault: invalid investPct\\n    error VaultInvalidInvestpct();\\n\\n    // Vault: invalid performance fee\\n    error VaultInvalidPerformanceFee();\\n\\n    // Vault: no performance fee\\n    error VaultNoPerformanceFee();\\n\\n    // Vault: invalid investment fee\\n    error VaultInvalidLossTolerance();\\n\\n    // Vault: underlying cannot be 0x0\\n    error VaultUnderlyingCannotBe0Address();\\n\\n    // Vault: treasury cannot be 0x0\\n    error VaultTreasuryCannotBe0Address();\\n\\n    // Vault: owner cannot be 0x0\\n    error VaultOwnerCannotBe0Address();\\n\\n    // Vault: cannot transfer ownership to self\\n    error VaultCannotTransferOwnershipToSelf();\\n\\n    // Vault: destination address is 0x\\n    error VaultDestinationCannotBe0Address();\\n\\n    // Vault: strategy is not set\\n    error VaultStrategyNotSet();\\n\\n    // Vault: invalid minLockPeriod\\n    error VaultInvalidMinLockPeriod();\\n\\n    // Vault: invalid lock period\\n    error VaultInvalidLockPeriod();\\n\\n    // Vault: cannot deposit 0\\n    error VaultCannotDeposit0();\\n\\n    // Vault: cannot sponsor 0\\n    error VaultCannotSponsor0();\\n\\n    // Vault: cannot deposit when yield is negative\\n    error VaultCannotDepositWhenYieldNegative();\\n\\n    // Vault: cannot deposit when the claimer is in debt\\n    error VaultCannotDepositWhenClaimerInDebt();\\n\\n    // Vault: cannot deposit when yield is negative\\n    error VaultCannotWithdrawWhenYieldNegative();\\n\\n    // Vault: nothing to do\\n    error VaultNothingToDo();\\n\\n    // Vault: not enough to rebalance\\n    error VaultNotEnoughToRebalance();\\n\\n    // Vault: invalid vault\\n    error VaultInvalidVault();\\n\\n    // Vault: strategy has invested funds\\n    error VaultStrategyHasInvestedFunds();\\n\\n    // Vault: not enough funds\\n    error VaultNotEnoughFunds();\\n\\n    // Vault: you are not allowed\\n    error VaultNotAllowed();\\n\\n    // Vault: amount is locked\\n    error VaultAmountLocked();\\n\\n    // Vault: deposit is locked\\n    error VaultDepositLocked();\\n\\n    // Vault: token id is not a sponsor\\n    error VaultNotSponsor();\\n\\n    // Vault: token id is not a deposit\\n    error VaultNotDeposit();\\n\\n    // Vault: claim percentage cannot be 0\\n    error VaultClaimPercentageCannotBe0();\\n\\n    // Vault: claimer cannot be address 0\\n    error VaultClaimerCannotBe0();\\n\\n    // Vault: claims don't add up to 100%\\n    error VaultClaimsDontAddUp();\\n\\n    // Vault: you are not the owner of a deposit\\n    error VaultNotOwnerOfDeposit();\\n\\n    // Vault: cannot withdraw more than the available amount\\n    error VaultCannotWithdrawMoreThanAvailable();\\n\\n    // Vault: amount received does not match params\\n    error VaultAmountDoesNotMatchParams();\\n\\n    // Vault: cannot compute shares when there's no principal\\n    error VaultCannotComputeSharesWithoutPrincipal();\\n\\n    // Vault: deposit name for MetaVault too short\\n    error VaultDepositNameTooShort();\\n\\n    // Vault: no yield to claim\\n    error VaultNoYieldToClaim();\\n\\n    //\\n    // Strategy Errors\\n    //\\n\\n    // Strategy: admin is 0x\\n    error StrategyAdminCannotBe0Address();\\n\\n    // Strategy: cannot transfer admin rights to self\\n    error StrategyCannotTransferAdminRightsToSelf();\\n\\n    // Strategy: underlying is 0x\\n    error StrategyUnderlyingCannotBe0Address();\\n\\n    // Strategy: not an IVault\\n    error StrategyNotIVault();\\n\\n    // Strategy: caller is not manager\\n    error StrategyCallerNotManager();\\n\\n    // Strategy: caller has no settings role\\n    error StrategyCallerNotSettings();\\n\\n    // Strategy: caller is not admin\\n    error StrategyCallerNotAdmin();\\n\\n    // Strategy: amount is 0\\n    error StrategyAmountZero();\\n\\n    // Strategy: not running\\n    error StrategyNotRunning();\\n\\n    // Not Enough Underlying Balance in Strategy contract\\n    error StrategyNoUnderlying();\\n\\n    // Not Enough Shares in Strategy Contract\\n    error StrategyNotEnoughShares();\\n}\\n\",\"keccak256\":\"0x1965c88a58145d96da991c0a987e2e27f392b9bdfc1d172a0cd6049dc676e811\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/yearn/IYearnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\ninterface IYearnVault {\\n    function deposit(uint256 amount, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function withdraw(\\n        uint256 maxShares,\\n        address recipient,\\n        uint256 maxLoss\\n    ) external returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x26b7952639ac779a2fa2b648e08342650c48c6de7c2cc7d5fbd7aeaece91639a\",\"license\":\"MIT\"},\"contracts/lib/ERC165Query.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary ERC165Query {\\n    bytes4 constant InvalidID = 0xffffffff;\\n    bytes4 constant ERC165ID = 0x01ffc9a7;\\n\\n    function doesContractImplementInterface(\\n        address _contract,\\n        bytes4 _interfaceId\\n    ) internal view returns (bool) {\\n        uint256 success;\\n        uint256 result;\\n\\n        (success, result) = noThrowCall(_contract, ERC165ID);\\n        if ((success == 0) || (result == 0)) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, InvalidID);\\n        if ((success == 0) || (result != 0)) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, _interfaceId);\\n        if ((success == 1) && (result == 1)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function noThrowCall(address _contract, bytes4 _interfaceId)\\n        internal\\n        view\\n        returns (uint256 success, uint256 result)\\n    {\\n        bytes4 erc165ID = ERC165ID;\\n\\n        assembly {\\n            let x := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(x, erc165ID) // Place signature at beginning of empty storage\\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\\n\\n            success := staticcall(\\n                30000, // 30k gas\\n                _contract, // To addr\\n                x, // Inputs are stored at location x\\n                0x24, // Inputs are 36 bytes long\\n                x, // Store output over input (saves space)\\n                0x20\\n            ) // Outputs are 32 bytes long\\n\\n            result := mload(x) // Load the result\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5708f7337680bcc564930d94b19938d22ba4ebfce638479da27dfb5026a7cf27\",\"license\":\"UNLICENSED\"},\"contracts/lib/PercentMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary PercentMath {\\n    // Divisor used for representing percentages\\n    uint256 public constant PCT_DIVISOR = 10000;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PCT_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPct(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PCT_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PCT_DIVISOR as the denominator\\n     */\\n    function pctOf(uint256 _amount, uint16 _fracNum)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount * _fracNum) / PCT_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Checks if a given number corresponds to 100%\\n     * @param _perc Percentage value to check, with PCT_DIVISOR\\n     */\\n    function is100Pct(uint256 _perc) internal pure returns (bool) {\\n        return _perc == PCT_DIVISOR;\\n    }\\n}\\n\",\"keccak256\":\"0x32815072f9bb38e6dfec91d348c3248a970f143bb98362df4f4d4fabe33baac6\",\"license\":\"UNLICENSED\"},\"contracts/strategy/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * IStrategy defines the interface for pluggable contracts used by vaults to invest funds and generate yield.\\n *\\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault.\\n *\\n * @notice It's up to the vault to decide how much to invest/disinvest from the total pool.\\n */\\ninterface IStrategy {\\n    /**\\n     * Emmited when funds are invested by the strategy.\\n     *\\n     *@param amount amount invested\\n     */\\n    event StrategyInvested(uint256 amount);\\n    /**\\n     * Emmited when funds are withdrawn (disinvested) by the strategy.\\n     *\\n     *@param amount amount withdrawn\\n     */\\n    event StrategyWithdrawn(uint256 amount);\\n\\n    /**\\n     * Provides information about wether the strategy is synchronous or asynchronous.\\n     *\\n     * @notice Synchronous strategies support instant withdrawals,\\n     * while asynchronous strategies impose a delay before withdrawals can be made.\\n     *\\n     * @return true if the strategy is synchronous, false otherwise\\n     */\\n    function isSync() external view returns (bool);\\n\\n    /**\\n     * The vault linked to this strategy.\\n     *\\n     * @return The vault's address\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * Withdraws the specified amount back to the vault (disinvests)\\n     *\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawToVault(uint256 amount) external;\\n\\n    /**\\n     * Amount of the underlying currency currently invested by the strategy.\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets() external view returns (uint256);\\n\\n    /**\\n     * Indicates if assets are invested into strategy or not.\\n     *\\n     * @notice this will be used when removing the strategy from the vault\\n     * @return true if assets invested, false if nothing invested.\\n     */\\n    function hasAssets() external view returns (bool);\\n\\n    /**\\n     * Deposits of all the available underlying into the yield generating protocol.\\n     */\\n    function invest() external;\\n}\\n\",\"keccak256\":\"0x2630556d42e2b4dc93d0aec3da0c94f27140dc3d01571c7cf32c1e672123733a\",\"license\":\"UNLICENSED\"},\"contracts/strategy/yearn/YearnStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport {PercentMath} from \\\"../../lib/PercentMath.sol\\\";\\nimport {ERC165Query} from \\\"../../lib/ERC165Query.sol\\\";\\nimport {IStrategy} from \\\"../IStrategy.sol\\\";\\nimport {CustomErrors} from \\\"../../interfaces/CustomErrors.sol\\\";\\nimport {IYearnVault} from \\\"../../interfaces/yearn/IYearnVault.sol\\\";\\nimport {IVault} from \\\"../../vault/IVault.sol\\\";\\n\\n/**\\n * YearnStrategy generates yield by investing into a Yearn vault.\\n *\\n * @notice This strategy is syncrhonous (supports immediate withdrawals).\\n */\\ncontract YearnStrategy is IStrategy, AccessControl, CustomErrors {\\n    using SafeERC20 for IERC20;\\n    using PercentMath for uint256;\\n    using ERC165Query for address;\\n\\n    /**\\n     * Emmited when the maxLossOnWithdraw (from Yearn vault) is changed.\\n     *\\n     * @param maxLoss new value for max loss withdraw param\\n     */\\n    event StrategyMaxLossOnWithdrawChanged(uint256 maxLoss);\\n\\n    // yearn vault is 0x\\n    error StrategyYearnVaultCannotBe0Address();\\n    // max loss on withdraw from yearn > 100%\\n    error StrategyMaxLossOnWithdrawTooLarge();\\n\\n    /// role allowed to invest/withdraw from yearn vault\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    /// role allowed to change settings such as max loss on withdraw from yearn vault\\n    bytes32 public constant SETTINGS_ROLE = keccak256(\\\"SETTINGS_ROLE\\\");\\n    // underlying ERC20 token\\n    IERC20 public immutable underlying;\\n    /// @inheritdoc IStrategy\\n    address public immutable override(IStrategy) vault;\\n    // yearn vault that this strategy is interacting with\\n    IYearnVault public immutable yVault;\\n    // multiplier for underlying convertion to shares\\n    uint128 public immutable conversionMultiplier;\\n    // used when withdrawing from yearn vault, 1 = 0.01%\\n    uint128 public maxLossOnWithdraw = 1;\\n\\n    /**\\n     * @param _vault address of the vault that will use this strategy\\n     * @param _admin address of the administrator account for this strategy\\n     * @param _yVault address of the yearn vault that this strategy is using\\n     * @param _underlying address of the underlying token\\n     */\\n    constructor(\\n        address _vault,\\n        address _admin,\\n        address _yVault,\\n        address _underlying\\n    ) {\\n        if (_admin == address(0)) revert StrategyAdminCannotBe0Address();\\n        if (_yVault == address(0)) revert StrategyYearnVaultCannotBe0Address();\\n        if (_underlying == address(0))\\n            revert StrategyUnderlyingCannotBe0Address();\\n\\n        if (!_vault.doesContractImplementInterface(type(IVault).interfaceId))\\n            revert StrategyNotIVault();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(SETTINGS_ROLE, _admin);\\n        _setupRole(MANAGER_ROLE, _vault);\\n\\n        vault = _vault;\\n        yVault = IYearnVault(_yVault);\\n        conversionMultiplier = uint128(10**yVault.decimals());\\n\\n        underlying = IERC20(_underlying);\\n\\n        underlying.approve(_yVault, type(uint256).max);\\n    }\\n\\n    //\\n    // Modifiers\\n    //\\n\\n    modifier onlyManager() {\\n        if (!hasRole(MANAGER_ROLE, msg.sender))\\n            revert StrategyCallerNotManager();\\n        _;\\n    }\\n\\n    modifier onlySettings() {\\n        if (!hasRole(SETTINGS_ROLE, msg.sender))\\n            revert StrategyCallerNotSettings();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender))\\n            revert StrategyCallerNotAdmin();\\n        _;\\n    }\\n\\n    /**\\n     * Transfers administrator rights for the Strategy to another account,\\n     * revoking current admin roles and setting up the roles for the new admin.\\n     *\\n     * @notice Can only be called by the account with the ADMIN role.\\n     *\\n     * @param _newAdmin The new Strategy admin account.\\n     */\\n    function transferAdminRights(address _newAdmin) external onlyAdmin {\\n        if (_newAdmin == address(0x0)) revert StrategyAdminCannotBe0Address();\\n        if (_newAdmin == msg.sender)\\n            revert StrategyCannotTransferAdminRightsToSelf();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _newAdmin);\\n        _setupRole(SETTINGS_ROLE, _newAdmin);\\n\\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _revokeRole(SETTINGS_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * Yearn strategy is synchronous meaning it supports immediate withdrawals.\\n     *\\n     * @return true always\\n     */\\n    function isSync() external pure override(IStrategy) returns (bool) {\\n        return true;\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function hasAssets()\\n        external\\n        view\\n        virtual\\n        override(IStrategy)\\n        returns (bool)\\n    {\\n        return _getShares() != 0;\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function investedAssets()\\n        external\\n        view\\n        virtual\\n        override(IStrategy)\\n        returns (uint256)\\n    {\\n        return _sharesToUnderlying(_getShares()) + _getUnderlyingBalance();\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function invest() external virtual override(IStrategy) onlyManager {\\n        uint256 beforeBalance = _getUnderlyingBalance();\\n        if (beforeBalance == 0) revert StrategyNoUnderlying();\\n\\n        yVault.deposit(type(uint256).max, address(this));\\n\\n        uint256 afterBalance = _getUnderlyingBalance();\\n\\n        emit StrategyInvested(beforeBalance - afterBalance);\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function withdrawToVault(uint256 _amount)\\n        external\\n        virtual\\n        override(IStrategy)\\n        onlyManager\\n    {\\n        if (_amount == 0) revert StrategyAmountZero();\\n        uint256 uninvestedUnderlying = _getUnderlyingBalance();\\n\\n        if (_amount > uninvestedUnderlying) {\\n            uint256 sharesToWithdraw = _underlyingToShares(\\n                _amount - uninvestedUnderlying\\n            );\\n\\n            if (sharesToWithdraw > _getShares())\\n                revert StrategyNotEnoughShares();\\n\\n            // burn shares and withdraw required underlying to strategy\\n            uint256 withdrawnFromYearn = yVault.withdraw(\\n                sharesToWithdraw,\\n                address(this),\\n                maxLossOnWithdraw\\n            );\\n\\n            _amount = uninvestedUnderlying + withdrawnFromYearn;\\n        }\\n\\n        // transfer underlying to vault\\n        underlying.safeTransfer(vault, _amount);\\n\\n        emit StrategyWithdrawn(_amount);\\n    }\\n\\n    /**\\n     * Sets the max loss percentage used when withdrawing from the Yearn vault.\\n     *\\n     * @notice Can only be called by the account with settings role.\\n     *\\n     * @param _maxLoss The max loss percentage to use when withdrawing from the Yearn vault. Value of 1 equals 0.01% loss.\\n     */\\n    function setMaxLossOnWithdraw(uint128 _maxLoss) external onlySettings {\\n        if (_maxLoss > 10000) revert StrategyMaxLossOnWithdrawTooLarge();\\n\\n        maxLossOnWithdraw = _maxLoss;\\n\\n        emit StrategyMaxLossOnWithdrawChanged(_maxLoss);\\n    }\\n\\n    /**\\n     * Get the underlying balance of the strategy.\\n     *\\n     * @return underlying balance of the strategy\\n     */\\n    function _getUnderlyingBalance() internal view returns (uint256) {\\n        return underlying.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * Get the number of yearn vault shares owned by the strategy.\\n     *\\n     * @return shares owned by the strategy\\n     */\\n    function _getShares() internal view returns (uint256) {\\n        return yVault.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * Calculates the value of yearn vault shares in underlying.\\n     *\\n     * @param _shares number of yearn vault shares\\n     *\\n     * @return underlying value of yearn vault shares\\n     */\\n    function _sharesToUnderlying(uint256 _shares)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (_shares * yVault.pricePerShare()) / conversionMultiplier;\\n    }\\n\\n    /**\\n     * Calculates the amount of underlying in number of yearn vault shares.\\n     *\\n     * @param _underlying amount of underlying\\n     *\\n     * @return number of yearn vault shares\\n     */\\n    function _underlyingToShares(uint256 _underlying)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (_underlying * conversionMultiplier) / yVault.pricePerShare();\\n    }\\n}\\n\",\"keccak256\":\"0x16ba64d62b1923e00321e7a5bcea03447142755b07bff43d8cc8fa2cf448430f\",\"license\":\"MIT\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVault {\\n    //\\n    // Structs\\n    //\\n\\n    struct ClaimParams {\\n        uint16 pct;\\n        address beneficiary;\\n        bytes data;\\n    }\\n\\n    struct DepositParams {\\n        address inputToken;\\n        uint64 lockDuration;\\n        uint256 amount;\\n        ClaimParams[] claims;\\n        string name;\\n        uint256 slippage;\\n    }\\n\\n    struct Deposit {\\n        /// amount of the deposit\\n        uint256 amount;\\n        /// wallet of the owner\\n        address owner;\\n        /// wallet of the claimer\\n        address claimerId;\\n        /// when can the deposit be withdrawn\\n        uint256 lockedUntil;\\n    }\\n\\n    struct Claimer {\\n        uint256 totalPrincipal;\\n        uint256 totalShares;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    event DepositMinted(\\n        uint256 indexed id,\\n        uint256 groupId,\\n        uint256 amount,\\n        uint256 shares,\\n        address indexed depositor,\\n        address indexed claimer,\\n        address claimerId,\\n        uint64 lockedUntil,\\n        bytes data,\\n        string name\\n    );\\n\\n    event DepositWithdrawn(\\n        uint256 indexed id,\\n        uint256 shares,\\n        uint256 amount,\\n        address indexed to,\\n        bool burned\\n    );\\n\\n    event Invested(uint256 amount);\\n\\n    event Disinvested(uint256 amount);\\n\\n    event YieldClaimed(\\n        address claimerId,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 burnedShares,\\n        uint256 perfFee,\\n        uint256 totalUnderlying,\\n        uint256 totalShares\\n    );\\n\\n    event FeeWithdrawn(uint256 amount);\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Update the invested amount;\\n     */\\n    function updateInvested() external;\\n\\n    /**\\n     * Calculate maximum investable amount and already invested amount\\n     *\\n     * @return maxInvestableAmount maximum investable amount\\n     * @return alreadyInvested already invested amount\\n     */\\n    function investState()\\n        external\\n        view\\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested);\\n\\n    /**\\n     * Percentage of the total underlying to invest in the strategy\\n     */\\n    function investPct() external view returns (uint16);\\n\\n    /**\\n     * Underlying ERC20 token accepted by the vault\\n     */\\n    function underlying() external view returns (IERC20Metadata);\\n\\n    /**\\n     * Minimum lock period for each deposit\\n     */\\n    function minLockPeriod() external view returns (uint64);\\n\\n    /**\\n     * Total amount of underlying currently controlled by the\\n     * vault and the its strategy.\\n     */\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /**\\n     * Total amount of shares\\n     */\\n    function totalShares() external view returns (uint256);\\n\\n    /**\\n     * Computes the amount of yield available for an an address.\\n     *\\n     * @param _to address to consider.\\n     *\\n     * @return claimable yield for @param _to, share of generated yield by @param _to,\\n     *      and performance fee from generated yield\\n     */\\n    function yieldFor(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * Accumulate performance fee and transfers rest yield generated for the caller to\\n     *\\n     * @param _to Address that will receive the yield.\\n     */\\n    function claimYield(address _to) external;\\n\\n    /**\\n     * Creates a new deposit using the specified group id\\n     *\\n     * @param _groupId The group id for the new deposit\\n     * @param _params Deposit params\\n     */\\n    function depositForGroupId(uint256 _groupId, DepositParams calldata _params)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * Creates a new deposit\\n     *\\n     * @param _params Deposit params\\n     */\\n    function deposit(DepositParams calldata _params)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the expected amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function withdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * When the vault is underperforming it withdraws the funds with a loss.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function forceWithdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws any pending performance fee amount back to the treasury\\n     */\\n    function withdrawPerformanceFee() external;\\n}\\n\",\"keccak256\":\"0xcd5c52bd62f916048891497ead2f90cbc8cf2869c6b0bf5415a16e2c05b49dc6\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x610100604052600180546001600160801b031916811790553480156200002457600080fd5b5060405162001ec238038062001ec2833981016040819052620000479162000438565b6001600160a01b0383166200006f57604051638f6e893360e01b815260040160405180910390fd5b6001600160a01b0382166200009757604051631d97a8dd60e31b815260040160405180910390fd5b6001600160a01b038116620000bf576040516301010feb60e61b815260040160405180910390fd5b620000e96321d982ed60e01b856001600160a01b03166200028460201b62000b801790919060201c565b620001075760405163d7e681d160e01b815260040160405180910390fd5b6200011460008462000337565b620001407ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf6030958462000337565b6200016c7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b088562000337565b6001600160a01b0380851660a052821660c08190526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa158015620001bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e3919062000495565b620001f090600a620005c2565b6001600160801b031660e0526001600160a01b03818116608081905260405163095ea7b360e01b8152918416600483015260001960248301529063095ea7b3906044016020604051808303816000875af115801562000253573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002799190620005d7565b5050505050620005fb565b600080806200029b856301ffc9a760e01b62000347565b9092509050811580620002ac575080155b15620002be5760009250505062000331565b620002d2856001600160e01b031962000347565b9092509050811580620002e457508015155b15620002f65760009250505062000331565b62000302858562000347565b9092509050600182148015620003185750806001145b156200032a5760019250505062000331565b6000925050505b92915050565b6200034382826200037b565b5050565b6040516301ffc9a760e01b8082526004820183905260009182919060208160248189617530fa905190969095509350505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000343576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003d73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200043357600080fd5b919050565b600080600080608085870312156200044f57600080fd5b6200045a856200041b565b93506200046a602086016200041b565b92506200047a604086016200041b565b91506200048a606086016200041b565b905092959194509250565b600060208284031215620004a857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000506578160001904821115620004ea57620004ea620004af565b80851615620004f857918102915b93841c9390800290620004ca565b509250929050565b6000826200051f5750600162000331565b816200052e5750600062000331565b8160018114620005475760028114620005525762000572565b600191505062000331565b60ff841115620005665762000566620004af565b50506001821b62000331565b5060208310610133831016604e8410600b841016171562000597575081810a62000331565b620005a38383620004c5565b8060001904821115620005ba57620005ba620004af565b029392505050565b6000620005d083836200050e565b9392505050565b600060208284031215620005ea57600080fd5b81518015158114620005d057600080fd5b60805160a05160c05160e0516118476200067b6000396000818161032201528181610e280152610f810152600081816101ef015281816107ad01528181610ac501528181610ded01528181610e520152610ef40152600081816103b20152610862015260008181610251015281816108400152610d6101526118476000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c8063a217fddf116100d8578063d9c83fb51161008c578063ec87621c11610066578063ec87621c1461035f578063f628988714610386578063fbfa77cf146103ad57600080fd5b8063d9c83fb51461031d578063df5fffc814610344578063e8b5e51f1461035757600080fd5b8063b5106add116100bd578063b5106add146102e4578063ce8c42e8146102f7578063d547741f1461030a57600080fd5b8063a217fddf146102b1578063b09820ad146102b957600080fd5b80634ad0b6841161012f5780636f307dc3116101145780636f307dc31461024c57806391d14854146102735780639af2e635146102aa57600080fd5b80634ad0b6841461023c5780635be9b2d31461024457600080fd5b80632f2ff15d116101605780632f2ff15d146101d557806333303f8e146101ea57806336568abe1461022957600080fd5b806301ffc9a71461017c578063248a9ca3146101a4575b600080fd5b61018f61018a36600461153e565b6103d4565b60405190151581526020015b60405180910390f35b6101c76101b2366004611568565b60009081526020819052604090206001015490565b60405190815260200161019b565b6101e86101e336600461159d565b610424565b005b6102117f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161019b565b6101e861023736600461159d565b61044e565b6101c76104df565b61018f610508565b6102117f000000000000000000000000000000000000000000000000000000000000000081565b61018f61028136600461159d565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600161018f565b6101c7600081565b6001546102cc906001600160801b031681565b6040516001600160801b03909116815260200161019b565b6101e86102f23660046115c9565b610519565b6101e8610305366004611568565b610671565b6101e861031836600461159d565b6108bf565b6102cc7f000000000000000000000000000000000000000000000000000000000000000081565b6101e86103523660046115e4565b6108e4565b6101e86109fd565b6101c77f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b6101c77ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309581565b6102117f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061041e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461043f81610c22565b6104498383610c2c565b505050565b6001600160a01b03811633146104d15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6104db8282610cca565b5050565b60006104e9610d49565b6104f96104f4610dd5565b610e24565b6105039190611623565b905090565b6000610512610dd5565b1515919050565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff16610581576040517ff0e8368a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166105c1576040517f8f6e893300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116331415610604576040517f8fbf788d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61060f600082610ee6565b6106397ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309582610ee6565b610644600033610cca565b61066e7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309533610cca565b50565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166106c057604051634cc2cd3760e11b815260040160405180910390fd5b806106f7576040517fd45ab8b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610701610d49565b90508082111561083357600061071f61071a838561163b565b610ef0565b9050610729610dd5565b811115610762576040517f8396942200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517fe63697c8000000000000000000000000000000000000000000000000000000008152600481018390523060248201526001600160801b0390911660448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e63697c8906064016020604051808303816000875af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190611652565b905061082e8184611623565b935050505b6108876001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084610fa7565b6040518281527f35c4c11317fd96ffa30da51e0a4b85219c4b0f56c1507c3afefe79de0c47ef54906020015b60405180910390a15050565b6000828152602081905260409020600101546108da81610c22565b6104498383610cca565b3360009081527f36fe723da0d85a4c7acef11a805a080284ea91d0f6591ba1fc9b9c7ef3840adc602052604090205460ff1661094c576040517f70c4ee8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710816001600160801b03161115610991576040517f4368b5c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001600160801b0383169081179091556040519081527f3e529cb895baac79fb1aebca59e62bff108d38e35b216da22bf64844fcb81c559060200160405180910390a150565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff16610a4c57604051634cc2cd3760e11b815260040160405180910390fd5b6000610a56610d49565b905080610a8f576040517f378a16c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6e553f6500000000000000000000000000000000000000000000000000000000815260001960048201523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303816000875af1158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190611652565b506000610b45610d49565b90507fc68748140896ba027a48ebf3a24735d0afb4ab835f92c4815ddb34f9d6dfd18a610b72828461163b565b6040519081526020016108b3565b60008080610b95856301ffc9a760e01b611027565b9092509050811580610ba5575080155b15610bb55760009250505061041e565b610bc7856001600160e01b0319611027565b9092509050811580610bd857508015155b15610be85760009250505061041e565b610bf28585611027565b9092509050600182148015610c075750806001145b15610c175760019250505061041e565b506000949350505050565b61066e813361105b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166104db576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610c863390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156104db576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105039190611652565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401610d94565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160801b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed29190611652565b610edc908461166b565b61041e919061168a565b6104db8282610c2c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f749190611652565b610edc6001600160801b037f0000000000000000000000000000000000000000000000000000000000000000168461166b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526104499084906110d9565b6040516301ffc9a760e01b8082526004820183905260009182919060208160248189617530fa905190969095509350505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166104db57611097816001600160a01b031660146111be565b6110a28360206111be565b6040516020016110b39291906116dc565b60408051601f198184030181529082905262461bcd60e51b82526104c89160040161175d565b600061112e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113a69092919063ffffffff16565b805190915015610449578080602001905181019061114c9190611790565b6104495760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104c8565b606060006111cd83600261166b565b6111d8906002611623565b67ffffffffffffffff8111156111f0576111f06117b2565b6040519080825280601f01601f19166020018201604052801561121a576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611251576112516117c8565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061129c5761129c6117c8565b60200101906001600160f81b031916908160001a90535060006112c084600261166b565b6112cb906001611623565b90505b6001811115611350577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061130c5761130c6117c8565b1a60f81b828281518110611322576113226117c8565b60200101906001600160f81b031916908160001a90535060049490941c93611349816117de565b90506112ce565b50831561139f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104c8565b9392505050565b60606113b584846000856113bd565b949350505050565b6060824710156114355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104c8565b6001600160a01b0385163b61148c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c8565b600080866001600160a01b031685876040516114a891906117f5565b60006040518083038185875af1925050503d80600081146114e5576040519150601f19603f3d011682016040523d82523d6000602084013e6114ea565b606091505b50915091506114fa828286611505565b979650505050505050565b6060831561151457508161139f565b8251156115245782518084602001fd5b8160405162461bcd60e51b81526004016104c8919061175d565b60006020828403121561155057600080fd5b81356001600160e01b03198116811461139f57600080fd5b60006020828403121561157a57600080fd5b5035919050565b80356001600160a01b038116811461159857600080fd5b919050565b600080604083850312156115b057600080fd5b823591506115c060208401611581565b90509250929050565b6000602082840312156115db57600080fd5b61139f82611581565b6000602082840312156115f657600080fd5b81356001600160801b038116811461139f57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156116365761163661160d565b500190565b60008282101561164d5761164d61160d565b500390565b60006020828403121561166457600080fd5b5051919050565b60008160001904831182151516156116855761168561160d565b500290565b6000826116a757634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156116c75781810151838201526020016116af565b838111156116d6576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516117148160178501602088016116ac565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516117518160288401602088016116ac565b01602801949350505050565b602081526000825180602084015261177c8160408501602087016116ac565b601f01601f19169190910160400192915050565b6000602082840312156117a257600080fd5b8151801515811461139f57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816117ed576117ed61160d565b506000190190565b600082516118078184602087016116ac565b919091019291505056fea26469706673582212207bc98105d816e8427dcb0b7e8c265fad882ec04abf53afaa3412d8b5bd00f0ac64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c8063a217fddf116100d8578063d9c83fb51161008c578063ec87621c11610066578063ec87621c1461035f578063f628988714610386578063fbfa77cf146103ad57600080fd5b8063d9c83fb51461031d578063df5fffc814610344578063e8b5e51f1461035757600080fd5b8063b5106add116100bd578063b5106add146102e4578063ce8c42e8146102f7578063d547741f1461030a57600080fd5b8063a217fddf146102b1578063b09820ad146102b957600080fd5b80634ad0b6841161012f5780636f307dc3116101145780636f307dc31461024c57806391d14854146102735780639af2e635146102aa57600080fd5b80634ad0b6841461023c5780635be9b2d31461024457600080fd5b80632f2ff15d116101605780632f2ff15d146101d557806333303f8e146101ea57806336568abe1461022957600080fd5b806301ffc9a71461017c578063248a9ca3146101a4575b600080fd5b61018f61018a36600461153e565b6103d4565b60405190151581526020015b60405180910390f35b6101c76101b2366004611568565b60009081526020819052604090206001015490565b60405190815260200161019b565b6101e86101e336600461159d565b610424565b005b6102117f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161019b565b6101e861023736600461159d565b61044e565b6101c76104df565b61018f610508565b6102117f000000000000000000000000000000000000000000000000000000000000000081565b61018f61028136600461159d565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600161018f565b6101c7600081565b6001546102cc906001600160801b031681565b6040516001600160801b03909116815260200161019b565b6101e86102f23660046115c9565b610519565b6101e8610305366004611568565b610671565b6101e861031836600461159d565b6108bf565b6102cc7f000000000000000000000000000000000000000000000000000000000000000081565b6101e86103523660046115e4565b6108e4565b6101e86109fd565b6101c77f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b6101c77ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309581565b6102117f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061041e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461043f81610c22565b6104498383610c2c565b505050565b6001600160a01b03811633146104d15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6104db8282610cca565b5050565b60006104e9610d49565b6104f96104f4610dd5565b610e24565b6105039190611623565b905090565b6000610512610dd5565b1515919050565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff16610581576040517ff0e8368a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166105c1576040517f8f6e893300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116331415610604576040517f8fbf788d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61060f600082610ee6565b6106397ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309582610ee6565b610644600033610cca565b61066e7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309533610cca565b50565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166106c057604051634cc2cd3760e11b815260040160405180910390fd5b806106f7576040517fd45ab8b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610701610d49565b90508082111561083357600061071f61071a838561163b565b610ef0565b9050610729610dd5565b811115610762576040517f8396942200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517fe63697c8000000000000000000000000000000000000000000000000000000008152600481018390523060248201526001600160801b0390911660448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e63697c8906064016020604051808303816000875af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190611652565b905061082e8184611623565b935050505b6108876001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084610fa7565b6040518281527f35c4c11317fd96ffa30da51e0a4b85219c4b0f56c1507c3afefe79de0c47ef54906020015b60405180910390a15050565b6000828152602081905260409020600101546108da81610c22565b6104498383610cca565b3360009081527f36fe723da0d85a4c7acef11a805a080284ea91d0f6591ba1fc9b9c7ef3840adc602052604090205460ff1661094c576040517f70c4ee8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710816001600160801b03161115610991576040517f4368b5c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001600160801b0383169081179091556040519081527f3e529cb895baac79fb1aebca59e62bff108d38e35b216da22bf64844fcb81c559060200160405180910390a150565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff16610a4c57604051634cc2cd3760e11b815260040160405180910390fd5b6000610a56610d49565b905080610a8f576040517f378a16c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6e553f6500000000000000000000000000000000000000000000000000000000815260001960048201523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303816000875af1158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190611652565b506000610b45610d49565b90507fc68748140896ba027a48ebf3a24735d0afb4ab835f92c4815ddb34f9d6dfd18a610b72828461163b565b6040519081526020016108b3565b60008080610b95856301ffc9a760e01b611027565b9092509050811580610ba5575080155b15610bb55760009250505061041e565b610bc7856001600160e01b0319611027565b9092509050811580610bd857508015155b15610be85760009250505061041e565b610bf28585611027565b9092509050600182148015610c075750806001145b15610c175760019250505061041e565b506000949350505050565b61066e813361105b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166104db576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610c863390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156104db576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105039190611652565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401610d94565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160801b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed29190611652565b610edc908461166b565b61041e919061168a565b6104db8282610c2c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f749190611652565b610edc6001600160801b037f0000000000000000000000000000000000000000000000000000000000000000168461166b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526104499084906110d9565b6040516301ffc9a760e01b8082526004820183905260009182919060208160248189617530fa905190969095509350505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166104db57611097816001600160a01b031660146111be565b6110a28360206111be565b6040516020016110b39291906116dc565b60408051601f198184030181529082905262461bcd60e51b82526104c89160040161175d565b600061112e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113a69092919063ffffffff16565b805190915015610449578080602001905181019061114c9190611790565b6104495760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104c8565b606060006111cd83600261166b565b6111d8906002611623565b67ffffffffffffffff8111156111f0576111f06117b2565b6040519080825280601f01601f19166020018201604052801561121a576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611251576112516117c8565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061129c5761129c6117c8565b60200101906001600160f81b031916908160001a90535060006112c084600261166b565b6112cb906001611623565b90505b6001811115611350577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061130c5761130c6117c8565b1a60f81b828281518110611322576113226117c8565b60200101906001600160f81b031916908160001a90535060049490941c93611349816117de565b90506112ce565b50831561139f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104c8565b9392505050565b60606113b584846000856113bd565b949350505050565b6060824710156114355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104c8565b6001600160a01b0385163b61148c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c8565b600080866001600160a01b031685876040516114a891906117f5565b60006040518083038185875af1925050503d80600081146114e5576040519150601f19603f3d011682016040523d82523d6000602084013e6114ea565b606091505b50915091506114fa828286611505565b979650505050505050565b6060831561151457508161139f565b8251156115245782518084602001fd5b8160405162461bcd60e51b81526004016104c8919061175d565b60006020828403121561155057600080fd5b81356001600160e01b03198116811461139f57600080fd5b60006020828403121561157a57600080fd5b5035919050565b80356001600160a01b038116811461159857600080fd5b919050565b600080604083850312156115b057600080fd5b823591506115c060208401611581565b90509250929050565b6000602082840312156115db57600080fd5b61139f82611581565b6000602082840312156115f657600080fd5b81356001600160801b038116811461139f57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156116365761163661160d565b500190565b60008282101561164d5761164d61160d565b500390565b60006020828403121561166457600080fd5b5051919050565b60008160001904831182151516156116855761168561160d565b500290565b6000826116a757634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156116c75781810151838201526020016116af565b838111156116d6576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516117148160178501602088016116ac565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516117518160288401602088016116ac565b01602801949350505050565b602081526000825180602084015261177c8160408501602087016116ac565b601f01601f19169190910160400192915050565b6000602082840312156117a257600080fd5b8151801515811461139f57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816117ed576117ed61160d565b506000190190565b600082516118078184602087016116ac565b919091019291505056fea26469706673582212207bc98105d816e8427dcb0b7e8c265fad882ec04abf53afaa3412d8b5bd00f0ac64736f6c634300080a0033",
  "devdoc": {
    "events": {
      "StrategyMaxLossOnWithdrawChanged(uint256)": {
        "params": {
          "maxLoss": "new value for max loss withdraw param"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_admin": "address of the administrator account for this strategy",
          "_underlying": "address of the underlying token",
          "_vault": "address of the vault that will use this strategy",
          "_yVault": "address of the yearn vault that this strategy is using"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasAssets()": {
        "returns": {
          "_0": "true if assets invested, false if nothing invested."
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "investedAssets()": {
        "returns": {
          "_0": "The total amount of underlying"
        }
      },
      "isSync()": {
        "returns": {
          "_0": "true always"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setMaxLossOnWithdraw(uint128)": {
        "params": {
          "_maxLoss": "The max loss percentage to use when withdrawing from the Yearn vault. Value of 1 equals 0.01% loss."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdminRights(address)": {
        "params": {
          "_newAdmin": "The new Strategy admin account."
        }
      },
      "withdrawToVault(uint256)": {
        "params": {
          "amount": "Amount to withdraw"
        }
      }
    },
    "stateVariables": {
      "vault": {
        "return": "The vault's address",
        "returns": {
          "_0": "The vault's address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "StrategyInvested(uint256)": {
        "notice": "Emmited when funds are invested by the strategy."
      },
      "StrategyMaxLossOnWithdrawChanged(uint256)": {
        "notice": "Emmited when the maxLossOnWithdraw (from Yearn vault) is changed."
      },
      "StrategyWithdrawn(uint256)": {
        "notice": "Emmited when funds are withdrawn (disinvested) by the strategy."
      }
    },
    "kind": "user",
    "methods": {
      "MANAGER_ROLE()": {
        "notice": "role allowed to invest/withdraw from yearn vault"
      },
      "SETTINGS_ROLE()": {
        "notice": "role allowed to change settings such as max loss on withdraw from yearn vault"
      },
      "hasAssets()": {
        "notice": "Indicates if assets are invested into strategy or not.this will be used when removing the strategy from the vault"
      },
      "invest()": {
        "notice": "Deposits of all the available underlying into the yield generating protocol."
      },
      "investedAssets()": {
        "notice": "Amount of the underlying currency currently invested by the strategy.both held and invested amounts are included here, using the latest known exchange rates to the underlying currency"
      },
      "isSync()": {
        "notice": "Yearn strategy is synchronous meaning it supports immediate withdrawals."
      },
      "setMaxLossOnWithdraw(uint128)": {
        "notice": "Sets the max loss percentage used when withdrawing from the Yearn vault.Can only be called by the account with settings role."
      },
      "transferAdminRights(address)": {
        "notice": "Transfers administrator rights for the Strategy to another account, revoking current admin roles and setting up the roles for the new admin.Can only be called by the account with the ADMIN role."
      },
      "vault()": {
        "notice": "The vault linked to this strategy."
      },
      "withdrawToVault(uint256)": {
        "notice": "Withdraws the specified amount back to the vault (disinvests)"
      }
    },
    "notice": "YearnStrategy generates yield by investing into a Yearn vault.This strategy is syncrhonous (supports immediate withdrawals).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/strategy/yearn/YearnStrategy.sol:YearnStrategy",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 11654,
        "contract": "contracts/strategy/yearn/YearnStrategy.sol:YearnStrategy",
        "label": "maxLossOnWithdraw",
        "offset": 0,
        "slot": "1",
        "type": "t_uint128"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/strategy/yearn/YearnStrategy.sol:YearnStrategy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/strategy/yearn/YearnStrategy.sol:YearnStrategy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      }
    }
  }
}