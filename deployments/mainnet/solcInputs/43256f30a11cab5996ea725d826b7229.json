{
  "language": "Solidity",
  "sources": {
    "contracts/Donations.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * A contract to store donations before they are transferred to the charities.\n */\ncontract Donations is ERC721, AccessControl {\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant WORKER_ROLE = keccak256(\"WORKER_ROLE\");\n\n    struct DonationParams {\n        uint128 destinationId;\n        address owner;\n        IERC20 token;\n        uint256 amount;\n        string donationId;\n    }\n\n    struct Metadata {\n        uint128 destinationId;\n        uint64 expiry;\n        IERC20 token;\n        uint256 amount;\n    }\n\n    event DonationMinted(\n        uint256 indexed id,\n        uint128 indexed destinationId,\n        bytes32 indexed groupId,\n        IERC20 token,\n        uint256 expiry,\n        uint256 amount,\n        address owner,\n        string donationId\n    );\n\n    event DonationBurned(uint256 indexed id, string donationId);\n\n    event DonationsSent(\n        uint128 indexed destinationId,\n        IERC20 indexed token,\n        address indexed to,\n        uint256 amount\n    );\n\n    event TTLUpdated(uint64 ttl);\n\n    uint256 private metadataId;\n    mapping(uint256 => Metadata) public metadata;\n\n    /// Duration of the expiration date for new donations.\n    uint64 public ttl = 180 days;\n\n    /// Used to indicate whether a group of donations identified by the key has been processed or not.\n    mapping(bytes32 => bool) public processedDonationsGroups;\n\n    /// Stores how much should be transferred to each charity in each coin.\n    mapping(IERC20 => mapping(uint128 => uint256)) public transferableAmounts;\n\n    /**\n     * @param _owner Account that will receive the admin role.\n     */\n    constructor(address _owner) ERC721(\"Sandclock Donation\", \"Donations\") {\n        require(_owner != address(0x0), \"Vault: owner cannot be 0x0\");\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n        _setupRole(WORKER_ROLE, _owner);\n    }\n\n    /**\n     * Changes the TTL for new donations.\n     *\n     * @param _ttl the new TTL.\n     */\n    function setTTL(uint64 _ttl) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        ttl = _ttl;\n\n        emit TTLUpdated(_ttl);\n    }\n\n    /**\n     * Transfers the donated funds in the currency @param _token to the charity with the id @param _destinationId.\n     *\n     * @param _destinationId ID of the charity.\n     * @param _token Currency to transfer the funds from.\n     * @param _to Address of the charity.\n     */\n    function donate(\n        uint128 _destinationId,\n        IERC20 _token,\n        address _to\n    ) external onlyRole(WORKER_ROLE) {\n        uint256 amount = transferableAmounts[_token][_destinationId];\n        require(amount != 0, \"Donations: nothing to donate\");\n\n        transferableAmounts[_token][_destinationId] = 0;\n\n        emit DonationsSent(_destinationId, _token, _to, amount);\n\n        _token.safeTransfer(_to, amount);\n    }\n\n    /**\n     * Mints an NFT for every donation in @param _params.\n     * The @param _txHash and @param _batchNr uniquely identify a group of donations.\n     *\n     * @param _txHash The hash of the transaction where the yield for these donations was claimed.\n     * @param _batchNr When there are too many donations in a claim, we break them into batches to not reach the gas limit.\n     * @param _params Donation params.\n     */\n    function mint(\n        bytes32 _txHash,\n        uint256 _batchNr,\n        DonationParams[] calldata _params\n    ) external onlyRole(WORKER_ROLE) {\n        bytes32 groupId = keccak256(abi.encodePacked(_txHash, _batchNr));\n\n        require(\n            !processedDonationsGroups[groupId],\n            \"Donations: already processed\"\n        );\n\n        uint64 expiry = _getBlockTimestamp() + ttl;\n        uint256 length = _params.length;\n        uint256 _metadataId = metadataId;\n\n        for (uint256 i = 0; i < length; ++i) {\n            ++_metadataId;\n\n            metadata[_metadataId] = Metadata({\n                destinationId: _params[i].destinationId,\n                token: _params[i].token,\n                expiry: expiry,\n                amount: _params[i].amount\n            });\n\n            _mint(_params[i].owner, _metadataId);\n\n            emit DonationMinted(\n                _metadataId,\n                _params[i].destinationId,\n                groupId,\n                _params[i].token,\n                expiry,\n                _params[i].amount,\n                _params[i].owner,\n                _params[i].donationId\n            );\n        }\n\n        metadataId = _metadataId;\n\n        processedDonationsGroups[groupId] = true;\n    }\n\n    /**\n     * Burns the NFT and sets the amount donated to be transferred to the charity.\n     *\n     * @param _id ID of the NFT.\n     */\n    function burn(uint256 _id, string calldata donationId) external {\n        bool isOwner = ownerOf(_id) == _msgSender();\n\n        Metadata storage data = metadata[_id];\n\n        bool expired = data.expiry < _getBlockTimestamp();\n\n        require(isOwner || expired, \"Donations: not allowed\");\n\n        transferableAmounts[data.token][data.destinationId] += data.amount;\n\n        _burn(_id);\n\n        emit DonationBurned(_id, donationId);\n    }\n\n    /**\n     * Basically similar to the above burn() method but is called on an array of _ids\n     * Expected to be called by the backend to burn a bunch of NFTs when they expire\n     *\n     * @param _ids IDs of the NFTs.\n     */\n    function burnBatch(uint256[] calldata _ids, string[] calldata donationIds)\n        external\n    {\n        uint256 _id;\n        Metadata storage data;\n        bool expired;\n\n        uint256 timestamp = _getBlockTimestamp();\n\n        uint256 idsLen = _ids.length;\n        for (uint256 i = 0; i < idsLen; ++i) {\n            _id = _ids[i];\n            data = metadata[_id];\n\n            expired = data.expiry < timestamp;\n\n            // used an if statement instead of require so that the method will keep on running for the other ids and not stop execution\n            if (expired) {\n                transferableAmounts[data.token][data.destinationId] += data\n                    .amount;\n\n                _burn(_id);\n\n                emit DonationBurned(_id, donationIds[i]);\n            }\n        }\n    }\n\n    function _getBlockTimestamp() private view returns (uint64) {\n        return uint64(block.timestamp);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControl, ERC721)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/echidna/Echidna_Donation.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\nimport \"./Helper.sol\";\nimport {Donations} from \"../Donations.sol\";\nimport {ERC721Holder} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\ncontract Echidna_Donation is Helper, ERC721Holder {\n\n    Donations donations;\n    MockDAI dai;\n\n    bytes32 TX = 0x5bdfd14fcc917abc2f02a30721d152a6f147f09e8cbaad4e0d5405d646c5c3e1;\n    uint256 ID = 1;\n\n    address[] owners = [carol, alice, bob, address(this)];\n\n    constructor () {\n        donations = new Donations(address(this));\n        dai = new MockDAI(0);\n    }\n\n    // mint with valid params should never revert\n    function mint_should_succeed(Donations.DonationParams[] memory _params) public {\n\n        uint16 length = uint16(_params.length);\n        require(length > 0);\n        uint256 total = 0;\n        for (uint16 i = 0; i < length; i++) {\n            _params[i].destinationId = 1;\n            _params[i].amount = Helper.one_to_max_uint64(_params[i].amount);\n            total += _params[i].amount;\n            _params[i].owner = owners[i % 4];\n            _params[i].token = dai;\n        }\n        \n        dai.mint(address(donations), total);\n        emit Log(\"total\", total);\n\n        uint256 balance_donations_before = dai.balanceOf(address(donations));\n        emit Log(\"balance of donations before\", balance_donations_before);\n\n        try donations.mint(TX, ID, _params) {\n            assert(true);\n        } catch {\n            assert(false);\n        }\n\n        ID += 1;\n    }\n}\n"
    },
    "contracts/echidna/Helper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\nimport \"./Addresses.sol\";\n\ncontract Helper is Addresses {\n    event Log(string reason, uint256 amount);\n    event LogAddress(string reason, address a);\n\n    function mint_helper(address recip, uint256 amount) internal {\n        underlying.mint(recip, amount);\n        underlying.approve(address(vault), amount);\n    }\n\n    function one_to_max_uint64(uint256 random) internal pure returns (uint256) {\n        return 1 + (random % (type(uint64).max - 1));\n    }\n\n    function populate_claims(\n        uint16 pctTotal,\n        IVault.ClaimParams[] memory _claims\n    ) internal {\n        uint16 length = uint16(_claims.length);\n        uint16 left = pctTotal;\n        for (uint16 i = length; i > 1; --i) {\n            _claims[i - 1].pct = 1 + (_claims[i - 1].pct % (left - i - 1));\n            left -= _claims[i - 1].pct;\n            _claims[i - 1].beneficiary = bob;\n            emit Log(\"pct\", _claims[i - 1].pct);\n        }\n        _claims[0].pct = left;\n        _claims[0].beneficiary = address(this);\n        emit Log(\"pct\", _claims[0].pct);\n    }\n\n    function withdraw_should_revert(address recipient, uint256[] memory _ids)\n        internal\n    {\n        try vault.withdraw(recipient, _ids) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n\n    function withdraw_should_succeed(address recipient, uint256[] memory _ids)\n        internal\n    {\n        (bool success, ) = address(vault).call(\n            abi.encodeWithSignature(\n                \"withdraw(address,uint256[])\",\n                recipient,\n                _ids\n            )\n        );\n        if (!success) {\n            assert(false);\n            return;\n        }\n    }\n\n    function deposit_should_revert(IVault.DepositParams memory _params)\n        internal\n    {\n        try vault.deposit(_params) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n\n    function deposit_should_succeed(IVault.DepositParams memory _params)\n        internal\n    {\n        try vault.deposit(_params) {\n            assert(true);\n        } catch {\n            assert(false);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/echidna/Addresses.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"../Vault.sol\";\nimport \"../mock/MockERC20.sol\";\nimport \"../mock/anchor/MockAnchorStrategy.sol\";\n\ncontract Addresses {\n    Vault vault = Vault(0xE86bB98fcF9BFf3512C74589B78Fb168200CC546);\n    MockAnchorStrategy strategy =\n        MockAnchorStrategy(0xDc688D29394a3f1E6f1E5100862776691afAf3d2);\n    MockUST underlying = MockUST(0x48BaCB9266a570d521063EF5dD96e61686DbE788);\n    address alice = 0x6Ecbe1DB9EF729CBe972C83Fb886247691Fb6beb;\n    address bob = 0xE36Ea790bc9d7AB70C55260C66D52b1eca985f84;\n    address carol = 0xE834EC434DABA538cd1b9Fe1582052B880BD7e63;\n}\n"
    },
    "contracts/Vault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {Counters} from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IVault} from \"./vault/IVault.sol\";\nimport {IVaultSponsoring} from \"./vault/IVaultSponsoring.sol\";\nimport {IVaultSettings} from \"./vault/IVaultSettings.sol\";\nimport {CurveSwapper} from \"./vault/CurveSwapper.sol\";\nimport {PercentMath} from \"./lib/PercentMath.sol\";\nimport {ExitPausable} from \"./lib/ExitPausable.sol\";\nimport {IStrategy} from \"./strategy/IStrategy.sol\";\nimport {CustomErrors} from \"./interfaces/CustomErrors.sol\";\n\n/**\n * A vault where other accounts can deposit an underlying token\n * currency and set distribution params for their principal and yield\n *\n * @notice The underlying token can be automatically swapped from any configured ERC20 token via {CurveSwapper}\n */\ncontract Vault is\n    IVault,\n    IVaultSponsoring,\n    IVaultSettings,\n    CurveSwapper,\n    Context,\n    ERC165,\n    AccessControl,\n    ReentrancyGuard,\n    Pausable,\n    ExitPausable,\n    Ownable,\n    CustomErrors\n{\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Metadata;\n    using PercentMath for uint256;\n    using PercentMath for uint16;\n    using Counters for Counters.Counter;\n\n    //\n    // Constants\n    //\n\n    /// Role allowed to invest/desinvest from strategy\n    bytes32 public constant INVESTOR_ROLE = keccak256(\"INVESTOR_ROLE\");\n\n    /// Role allowed to change settings such as performance fee and investment fee\n    bytes32 public constant SETTINGS_ROLE = keccak256(\"SETTINGS_ROLE\");\n\n    /// Role for sponsors allowed to call sponsor/unsponsor\n    bytes32 public constant SPONSOR_ROLE = keccak256(\"SPONSOR_ROLE\");\n\n    /// Minimum lock for each sponsor\n    uint64 public constant MIN_SPONSOR_LOCK_DURATION = 2 weeks;\n\n    /// Maximum lock for each sponsor\n    uint64 public constant MAX_SPONSOR_LOCK_DURATION = 24 weeks;\n\n    /// Maximum lock for each deposit\n    uint64 public constant MAX_DEPOSIT_LOCK_DURATION = 24 weeks;\n\n    /// Helper constant for computing shares without losing precision\n    uint256 public constant SHARES_MULTIPLIER = 1e18;\n\n    //\n    // State\n    //\n\n    /// @inheritdoc IVault\n    IERC20Metadata public override(IVault) underlying;\n\n    /// @inheritdoc IVault\n    uint16 public override(IVault) investPct;\n\n    /// @inheritdoc IVault\n    uint64 public immutable override(IVault) minLockPeriod;\n\n    /// @inheritdoc IVaultSponsoring\n    uint256 public override(IVaultSponsoring) totalSponsored;\n\n    /// @inheritdoc IVault\n    uint256 public override(IVault) totalShares;\n\n    /// The investment strategy\n    IStrategy public strategy;\n\n    /// Unique IDs to correlate donations that belong to the same foundation\n    uint256 private _depositGroupIds;\n    mapping(uint256 => address) public depositGroupIdOwner;\n\n    /// deposit ID => deposit data\n    mapping(uint256 => Deposit) public deposits;\n\n    /// Counter for deposit ids\n    Counters.Counter private _depositTokenIds;\n\n    /// claimer address => claimer data\n    mapping(address => Claimer) public claimer;\n\n    /// The total of principal deposited\n    uint256 public totalPrincipal;\n\n    /// Treasury address to collect performance fee\n    address public treasury;\n\n    /// Performance fee percentage\n    uint16 public perfFeePct;\n\n    /// Current accumulated performance fee;\n    uint256 public accumulatedPerfFee;\n\n    /// Loss tolerance pct\n    uint16 public lossTolerancePct;\n\n    /// Rebalance minimum\n    uint256 private immutable rebalanceMinimum;\n\n    /**\n     * @param _underlying Underlying ERC20 token to use.\n     * @param _minLockPeriod Minimum lock period to deposit\n     * @param _investPct Percentage of the total underlying to invest in the strategy\n     * @param _treasury Treasury address to collect performance fee\n     * @param _owner Vault admin address\n     * @param _perfFeePct Performance fee percentage\n     * @param _lossTolerancePct Loss tolerance when investing through the strategy\n     * @param _swapPools Swap pools used to automatically convert tokens to underlying\n     */\n    constructor(\n        IERC20Metadata _underlying,\n        uint64 _minLockPeriod,\n        uint16 _investPct,\n        address _treasury,\n        address _owner,\n        uint16 _perfFeePct,\n        uint16 _lossTolerancePct,\n        SwapPoolParam[] memory _swapPools\n    ) {\n        if (!_investPct.validPct()) revert VaultInvalidInvestpct();\n        if (!_perfFeePct.validPct()) revert VaultInvalidPerformanceFee();\n        if (!_lossTolerancePct.validPct()) revert VaultInvalidLossTolerance();\n        if (address(_underlying) == address(0x0))\n            revert VaultUnderlyingCannotBe0Address();\n        if (_treasury == address(0x0)) revert VaultTreasuryCannotBe0Address();\n        if (_owner == address(0x0)) revert VaultOwnerCannotBe0Address();\n        if (_minLockPeriod == 0 || _minLockPeriod > MAX_DEPOSIT_LOCK_DURATION)\n            revert VaultInvalidMinLockPeriod();\n\n        _transferOwnership(_owner);\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n        _setupRole(INVESTOR_ROLE, _owner);\n        _setupRole(SETTINGS_ROLE, _owner);\n        _setupRole(SPONSOR_ROLE, _owner);\n\n        investPct = _investPct;\n        underlying = _underlying;\n        treasury = _treasury;\n        minLockPeriod = _minLockPeriod;\n        perfFeePct = _perfFeePct;\n        lossTolerancePct = _lossTolerancePct;\n\n        rebalanceMinimum = 10 * 10**underlying.decimals();\n\n        _addPools(_swapPools);\n\n        emit TreasuryUpdated(_treasury);\n    }\n\n    //\n    // Ownable\n    //\n\n    /**\n     * Transfers ownership of the Vault to another account,\n     * revoking all of previous owner's roles and setting them up for the new owner.\n     *\n     * @notice Can only be called by the current owner.\n     *\n     * @param _newOwner The new owner of the contract.\n     */\n    function transferOwnership(address _newOwner)\n        public\n        override(Ownable)\n        onlyOwner\n    {\n        if (_newOwner == address(0x0)) revert VaultOwnerCannotBe0Address();\n        if (_newOwner == msg.sender)\n            revert VaultCannotTransferOwnershipToSelf();\n\n        _transferOwnership(_newOwner);\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _newOwner);\n        _setupRole(INVESTOR_ROLE, _newOwner);\n        _setupRole(SETTINGS_ROLE, _newOwner);\n        _setupRole(SPONSOR_ROLE, _newOwner);\n\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _revokeRole(INVESTOR_ROLE, msg.sender);\n        _revokeRole(SETTINGS_ROLE, msg.sender);\n        _revokeRole(SPONSOR_ROLE, msg.sender);\n    }\n\n    //\n    // IVault\n    //\n\n    /// @inheritdoc IVault\n    function totalUnderlying() public view override(IVault) returns (uint256) {\n        if (address(strategy) != address(0)) {\n            return\n                underlying.balanceOf(address(this)) + strategy.investedAssets();\n        }\n\n        return underlying.balanceOf(address(this));\n    }\n\n    /// @inheritdoc IVault\n    function yieldFor(address _to)\n        public\n        view\n        override(IVault)\n        returns (\n            uint256 claimableYield,\n            uint256 shares,\n            uint256 perfFee\n        )\n    {\n        uint256 claimerPrincipal = claimer[_to].totalPrincipal;\n        uint256 claimerShares = claimer[_to].totalShares;\n\n        uint256 currentClaimerPrincipal = _computeAmount(\n            claimerShares,\n            totalShares,\n            totalUnderlyingMinusSponsored()\n        );\n\n        if (currentClaimerPrincipal <= claimerPrincipal) {\n            return (0, 0, 0);\n        }\n\n        uint256 yieldWithPerfFee = currentClaimerPrincipal - claimerPrincipal;\n\n        shares = _computeShares(\n            yieldWithPerfFee,\n            totalShares,\n            totalUnderlyingMinusSponsored()\n        );\n        uint256 sharesAmount = _computeAmount(\n            shares,\n            totalShares,\n            totalUnderlyingMinusSponsored()\n        );\n\n        perfFee = sharesAmount.pctOf(perfFeePct);\n        claimableYield = sharesAmount - perfFee;\n    }\n\n    /// @inheritdoc IVault\n    function depositForGroupId(uint256 _groupId, DepositParams calldata _params)\n        external\n        nonReentrant\n        whenNotPaused\n        returns (uint256[] memory depositIds)\n    {\n        if (depositGroupIdOwner[_groupId] != msg.sender)\n            revert VaultSenderNotOwnerOfGroupId();\n\n        depositIds = _doDeposit(_groupId, _params);\n    }\n\n    /// @inheritdoc IVault\n    function deposit(DepositParams calldata _params)\n        external\n        nonReentrant\n        whenNotPaused\n        returns (uint256[] memory depositIds)\n    {\n        uint256 depositGroupId = _depositGroupIds;\n        _depositGroupIds = depositGroupId + 1;\n\n        depositGroupIdOwner[depositGroupId] = msg.sender;\n        depositIds = _doDeposit(depositGroupId, _params);\n    }\n\n    function _doDeposit(uint256 _groupId, DepositParams calldata _params)\n        internal\n        returns (uint256[] memory depositIds)\n    {\n        if (_params.amount == 0) revert VaultCannotDeposit0();\n        if (\n            _params.lockDuration < minLockPeriod ||\n            _params.lockDuration > MAX_DEPOSIT_LOCK_DURATION\n        ) revert VaultInvalidLockPeriod();\n        if (bytes(_params.name).length < 3) revert VaultDepositNameTooShort();\n\n        uint256 principalMinusStrategyFee = _applyLossTolerance(totalPrincipal);\n        uint256 previousTotalUnderlying = totalUnderlyingMinusSponsored();\n        if (principalMinusStrategyFee > previousTotalUnderlying)\n            revert VaultCannotDepositWhenYieldNegative();\n\n        _transferAndCheckInputToken(\n            msg.sender,\n            _params.inputToken,\n            _params.amount\n        );\n        uint256 newUnderlyingAmount = _swapIntoUnderlying(\n            _params.inputToken,\n            _params.amount,\n            _params.slippage\n        );\n\n        uint64 lockedUntil = _params.lockDuration + _blockTimestamp();\n\n        depositIds = _createDeposit(\n            previousTotalUnderlying,\n            newUnderlyingAmount,\n            lockedUntil,\n            _params.claims,\n            _params.name,\n            _groupId\n        );\n    }\n\n    /// @inheritdoc IVault\n    function claimYield(address _to)\n        external\n        override(IVault)\n        nonReentrant\n        whenNotExitPaused\n    {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        (uint256 yield, uint256 shares, uint256 fee) = yieldFor(msg.sender);\n\n        if (yield == 0) revert VaultNoYieldToClaim();\n\n        uint256 _totalUnderlyingMinusSponsored = totalUnderlyingMinusSponsored();\n        uint256 _totalShares = totalShares;\n\n        accumulatedPerfFee += fee;\n\n        _rebalanceBeforeWithdrawing(yield);\n\n        underlying.safeTransfer(_to, yield);\n\n        claimer[msg.sender].totalShares -= shares;\n        totalShares -= shares;\n\n        emit YieldClaimed(\n            msg.sender,\n            _to,\n            yield,\n            shares,\n            fee,\n            _totalUnderlyingMinusSponsored,\n            _totalShares\n        );\n    }\n\n    /// @inheritdoc IVault\n    function withdraw(address _to, uint256[] calldata _ids)\n        external\n        override(IVault)\n        nonReentrant\n        whenNotExitPaused\n    {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        if (totalPrincipal > totalUnderlyingMinusSponsored())\n            revert VaultCannotWithdrawWhenYieldNegative();\n\n        _withdrawAll(_to, _ids, false);\n    }\n\n    /// @inheritdoc IVault\n    function forceWithdraw(address _to, uint256[] calldata _ids)\n        external\n        nonReentrant\n        whenNotExitPaused\n    {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        _withdrawAll(_to, _ids, true);\n    }\n\n    function partialWithdraw(\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts\n    ) external nonReentrant whenNotExitPaused {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        _withdrawPartial(_to, _ids, _amounts);\n    }\n\n    /// @inheritdoc IVault\n    function investState()\n        public\n        view\n        override(IVault)\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested)\n    {\n        if (address(strategy) == address(0)) {\n            return (0, 0);\n        }\n\n        maxInvestableAmount = totalUnderlying().pctOf(investPct);\n        alreadyInvested = strategy.investedAssets();\n    }\n\n    /// @inheritdoc IVault\n    function updateInvested()\n        external\n        override(IVault)\n        onlyRole(INVESTOR_ROLE)\n    {\n        if (address(strategy) == address(0)) revert VaultStrategyNotSet();\n\n        (uint256 maxInvestableAmount, uint256 alreadyInvested) = investState();\n\n        if (maxInvestableAmount == alreadyInvested) revert VaultNothingToDo();\n\n        // disinvest\n        if (alreadyInvested > maxInvestableAmount) {\n            uint256 disinvestAmount = alreadyInvested - maxInvestableAmount;\n\n            if (disinvestAmount < rebalanceMinimum)\n                revert VaultNotEnoughToRebalance();\n\n            strategy.withdrawToVault(disinvestAmount);\n\n            emit Disinvested(disinvestAmount);\n\n            return;\n        }\n\n        // invest\n        uint256 investAmount = maxInvestableAmount - alreadyInvested;\n\n        if (investAmount < rebalanceMinimum) revert VaultNotEnoughToRebalance();\n\n        underlying.safeTransfer(address(strategy), investAmount);\n\n        strategy.invest();\n\n        emit Invested(investAmount);\n    }\n\n    /// @inheritdoc IVault\n    function withdrawPerformanceFee()\n        external\n        override(IVault)\n        onlyRole(INVESTOR_ROLE)\n    {\n        uint256 _perfFee = accumulatedPerfFee;\n        if (_perfFee == 0) revert VaultNoPerformanceFee();\n\n        accumulatedPerfFee = 0;\n        _rebalanceBeforeWithdrawing(_perfFee);\n\n        emit FeeWithdrawn(_perfFee);\n        underlying.safeTransfer(treasury, _perfFee);\n    }\n\n    //\n    // IVaultSponsoring\n    //\n\n    /// @inheritdoc IVaultSponsoring\n    function sponsor(\n        address _inputToken,\n        uint256 _amount,\n        uint256 _lockDuration,\n        uint256 _slippage\n    )\n        external\n        override(IVaultSponsoring)\n        nonReentrant\n        onlyRole(SPONSOR_ROLE)\n        whenNotPaused\n    {\n        if (_amount == 0) revert VaultCannotSponsor0();\n\n        if (\n            _lockDuration < MIN_SPONSOR_LOCK_DURATION ||\n            _lockDuration > MAX_SPONSOR_LOCK_DURATION\n        ) revert VaultInvalidLockPeriod();\n\n        uint256 lockedUntil = _lockDuration + block.timestamp;\n        _depositTokenIds.increment();\n        uint256 tokenId = _depositTokenIds.current();\n\n        _transferAndCheckInputToken(msg.sender, _inputToken, _amount);\n        uint256 underlyingAmount = _swapIntoUnderlying(\n            _inputToken,\n            _amount,\n            _slippage\n        );\n\n        deposits[tokenId] = Deposit(\n            underlyingAmount,\n            msg.sender,\n            address(0),\n            lockedUntil\n        );\n        totalSponsored += underlyingAmount;\n\n        emit Sponsored(tokenId, underlyingAmount, msg.sender, lockedUntil);\n    }\n\n    /// @inheritdoc IVaultSponsoring\n    function unsponsor(address _to, uint256[] calldata _ids)\n        external\n        nonReentrant\n        whenNotExitPaused\n    {\n        if (_to == address(0)) revert VaultDestinationCannotBe0Address();\n\n        _unsponsor(_to, _ids);\n    }\n\n    //\n    // CurveSwapper\n    //\n\n    /// @inheritdoc CurveSwapper\n    function getUnderlying()\n        public\n        view\n        override(CurveSwapper)\n        returns (address)\n    {\n        return address(underlying);\n    }\n\n    /// Adds a new curve swap pool from an input token to {underlying}\n    ///\n    /// @param _param Swap pool params\n    function addPool(SwapPoolParam memory _param)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _addPool(_param);\n    }\n\n    /// Removes an existing swap pool, and the ability to deposit the given token as underlying\n    ///\n    /// @param _inputToken the token to remove\n    function removePool(address _inputToken)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _removePool(_inputToken);\n    }\n\n    //\n    // Admin functions\n    //\n\n    /// @inheritdoc IVaultSettings\n    function setInvestPct(uint16 _investPct)\n        external\n        override(IVaultSettings)\n        onlyRole(SETTINGS_ROLE)\n    {\n        if (!PercentMath.validPct(_investPct)) revert VaultInvalidInvestpct();\n\n        emit InvestPctUpdated(_investPct);\n\n        investPct = _investPct;\n    }\n\n    /// @inheritdoc IVaultSettings\n    function setTreasury(address _treasury)\n        external\n        override(IVaultSettings)\n        onlyRole(SETTINGS_ROLE)\n    {\n        if (address(_treasury) == address(0x0))\n            revert VaultTreasuryCannotBe0Address();\n        treasury = _treasury;\n        emit TreasuryUpdated(_treasury);\n    }\n\n    /// @inheritdoc IVaultSettings\n    function setPerfFeePct(uint16 _perfFeePct)\n        external\n        override(IVaultSettings)\n        onlyRole(SETTINGS_ROLE)\n    {\n        if (!PercentMath.validPct(_perfFeePct))\n            revert VaultInvalidPerformanceFee();\n        perfFeePct = _perfFeePct;\n        emit PerfFeePctUpdated(_perfFeePct);\n    }\n\n    /// @inheritdoc IVaultSettings\n    function setStrategy(address _strategy)\n        external\n        override(IVaultSettings)\n        onlyRole(SETTINGS_ROLE)\n    {\n        if (_strategy == address(0)) revert VaultStrategyNotSet();\n        if (IStrategy(_strategy).vault() != address(this))\n            revert VaultInvalidVault();\n        if (address(strategy) != address(0) && strategy.hasAssets())\n            revert VaultStrategyHasInvestedFunds();\n\n        strategy = IStrategy(_strategy);\n\n        emit StrategyUpdated(_strategy);\n    }\n\n    /// @inheritdoc IVaultSettings\n    function setLossTolerancePct(uint16 pct)\n        external\n        override(IVaultSettings)\n        onlyRole(SETTINGS_ROLE)\n    {\n        if (!pct.validPct()) revert VaultInvalidLossTolerance();\n\n        lossTolerancePct = pct;\n        emit LossTolerancePctUpdated(pct);\n    }\n\n    //\n    // Public API\n    //\n\n    /**\n     * Computes the total amount of principal + yield currently controlled by the\n     * vault and the strategy. The principal + yield is the total amount\n     * of underlying that can be claimed or withdrawn, excluding the sponsored amount and performance fee.\n     *\n     * @return Total amount of principal and yield help by the vault (not including sponsored amount and performance fee).\n     */\n    function totalUnderlyingMinusSponsored() public view returns (uint256) {\n        uint256 _totalUnderlying = totalUnderlying();\n        uint256 deductAmount = totalSponsored + accumulatedPerfFee;\n        if (deductAmount > _totalUnderlying) {\n            return 0;\n        }\n\n        return _totalUnderlying - deductAmount;\n    }\n\n    //\n    // ERC165\n    //\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, AccessControl)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IVault).interfaceId ||\n            interfaceId == type(IVaultSponsoring).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    //\n    // Internal API\n    //\n\n    /**\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\n     *\n     * @notice the NFTs of the deposits will be burned.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     * @param _force Boolean to specify if the action should be perfomed when there's loss.\n     */\n    function _withdrawAll(\n        address _to,\n        uint256[] calldata _ids,\n        bool _force\n    ) internal {\n        uint256 localTotalShares = totalShares;\n        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();\n        uint256 amount;\n        uint256 idsLen = _ids.length;\n\n        for (uint256 i = 0; i < idsLen; ++i) {\n            uint256 depositAmount = deposits[_ids[i]].amount;\n\n            amount += _withdrawSingle(\n                _ids[i],\n                localTotalShares,\n                localTotalPrincipal,\n                _to,\n                _force,\n                depositAmount\n            );\n        }\n\n        _rebalanceBeforeWithdrawing(amount);\n\n        underlying.safeTransfer(_to, amount);\n    }\n\n    function _withdrawPartial(\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts\n    ) internal {\n        uint256 localTotalShares = totalShares;\n        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();\n        uint256 amount;\n        uint256 idsLen = _ids.length;\n\n        for (uint256 i = 0; i < idsLen; ++i) {\n            amount += _withdrawSingle(\n                _ids[i],\n                localTotalShares,\n                localTotalPrincipal,\n                _to,\n                false,\n                _amounts[i]\n            );\n        }\n\n        _rebalanceBeforeWithdrawing(amount);\n\n        underlying.safeTransfer(_to, amount);\n    }\n\n    /**\n     * Rebalances the vault's funds to cover the transfer of funds from the vault\n     * by disinvesting from the strategy. After the rebalance the vault is left\n     * with a set percentage (100% - invest%) of the total underlying as reserves.\n     *\n     * @notice this will have effect only for sync strategies.\n     *\n     * @param _amount Funds to be transferred from the vault.\n     */\n    function _rebalanceBeforeWithdrawing(uint256 _amount) internal {\n        uint256 vaultBalance = underlying.balanceOf(address(this));\n\n        if (_amount <= vaultBalance) return;\n        if (!strategy.isSync()) revert VaultNotEnoughFunds();\n\n        uint256 expectedReserves = (totalUnderlying() - _amount).pctOf(\n            10000 - investPct\n        );\n\n        // we want to withdraw the from the strategy only what is needed\n        // to cover the transfer and leave the vault with the expected reserves\n        uint256 needed = _amount + expectedReserves - vaultBalance;\n\n        strategy.withdrawToVault(needed);\n\n        emit Disinvested(needed);\n    }\n\n    /**\n     * Withdraws the sponsored amount for the deposits with the ids provided\n     * in @param _ids and sends it to @param _to.\n     *\n     * @notice the NFTs of the deposits will be burned.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function _unsponsor(address _to, uint256[] calldata _ids) internal {\n        uint256 sponsorAmount;\n        uint256 idsLen = _ids.length;\n\n        for (uint8 i; i < idsLen; ++i) {\n            uint256 tokenId = _ids[i];\n\n            Deposit memory _deposit = deposits[tokenId];\n            uint256 lockedUntil = _deposit.lockedUntil;\n            address claimerId = _deposit.claimerId;\n\n            address owner = _deposit.owner;\n            uint256 amount = _deposit.amount;\n\n            if (owner != msg.sender) revert VaultNotAllowed();\n            if (lockedUntil > block.timestamp) revert VaultAmountLocked();\n            if (claimerId != address(0)) revert VaultNotSponsor();\n\n            sponsorAmount += amount;\n\n            delete deposits[tokenId];\n\n            emit Unsponsored(tokenId);\n        }\n\n        if (sponsorAmount > totalUnderlying()) revert VaultNotEnoughFunds();\n\n        totalSponsored -= sponsorAmount;\n\n        _rebalanceBeforeWithdrawing(sponsorAmount);\n\n        underlying.safeTransfer(_to, sponsorAmount);\n    }\n\n    /**\n     * @dev `_createDeposit` declares too many locals\n     * We move some of them to this struct to fix the problem\n     */\n    struct CreateDepositLocals {\n        uint256 totalShares;\n        uint256 totalUnderlying;\n        uint16 accumulatedPct;\n        uint256 accumulatedAmount;\n        uint256 claimsLen;\n    }\n\n    /**\n     * Creates a deposit with the given amount of underlying and claim\n     * structure. The deposit is locked until the timestamp specified in @param _lockedUntil.\n     * @notice This function assumes underlying will be transfered elsewhere in\n     * the transaction.\n     *\n     * @notice Underlying must be transfered *after* this function, in order to\n     * correctly calculate shares.\n     *\n     * @notice claims must add up to 100%.\n     *\n     * @param _amount Amount of underlying to consider @param claims claim\n     * @param _lockedUntil Timestamp at which the deposit unlocks\n     * @param claims Claim params\n     * params.\n     */\n    function _createDeposit(\n        uint256 _previousTotalUnderlying,\n        uint256 _amount,\n        uint64 _lockedUntil,\n        ClaimParams[] calldata claims,\n        string calldata _name,\n        uint256 _groupId\n    ) internal returns (uint256[] memory) {\n        CreateDepositLocals memory locals = CreateDepositLocals({\n            totalShares: totalShares,\n            totalUnderlying: _previousTotalUnderlying,\n            accumulatedPct: 0,\n            accumulatedAmount: 0,\n            claimsLen: claims.length\n        });\n\n        uint256[] memory result = new uint256[](locals.claimsLen);\n\n        for (uint256 i = 0; i < locals.claimsLen; ++i) {\n            ClaimParams memory data = claims[i];\n            if (data.pct == 0) revert VaultClaimPercentageCannotBe0();\n            if (data.beneficiary == address(0)) revert VaultClaimerCannotBe0();\n            // if it's the last claim, just grab all remaining amount, instead\n            // of relying on percentages\n            uint256 localAmount = i == locals.claimsLen - 1\n                ? _amount - locals.accumulatedAmount\n                : _amount.pctOf(data.pct);\n\n            result[i] = _createClaim(\n                _groupId,\n                localAmount,\n                _lockedUntil,\n                data,\n                locals.totalShares,\n                locals.totalUnderlying,\n                _name\n            );\n            locals.accumulatedPct += data.pct;\n            locals.accumulatedAmount += localAmount;\n        }\n\n        if (!locals.accumulatedPct.is100Pct()) revert VaultClaimsDontAddUp();\n\n        return result;\n    }\n\n    /**\n     * @dev `_createClaim` declares too many locals\n     * We move some of them to this struct to fix the problem\n     */\n    struct CreateClaimLocals {\n        uint256 newShares;\n        address claimerId;\n        uint256 tokenId;\n    }\n\n    function _createClaim(\n        uint256 _depositGroupId,\n        uint256 _amount,\n        uint64 _lockedUntil,\n        ClaimParams memory _claim,\n        uint256 _localTotalShares,\n        uint256 _localTotalPrincipal,\n        string calldata _name\n    ) internal returns (uint256) {\n        _depositTokenIds.increment();\n        CreateClaimLocals memory locals = CreateClaimLocals({\n            newShares: _computeShares(\n                _amount,\n                _localTotalShares,\n                _localTotalPrincipal\n            ),\n            claimerId: _claim.beneficiary,\n            tokenId: _depositTokenIds.current()\n        });\n\n        // Checks if the user is not already in debt\n        if (\n            _computeShares(\n                _applyLossTolerance(claimer[locals.claimerId].totalPrincipal),\n                _localTotalShares,\n                _localTotalPrincipal\n            ) > claimer[locals.claimerId].totalShares\n        ) revert VaultCannotDepositWhenClaimerInDebt();\n\n        claimer[locals.claimerId].totalShares += locals.newShares;\n        claimer[locals.claimerId].totalPrincipal += _amount;\n\n        totalShares += locals.newShares;\n        totalPrincipal += _amount;\n\n        deposits[locals.tokenId] = Deposit(\n            _amount,\n            msg.sender,\n            locals.claimerId,\n            _lockedUntil\n        );\n\n        emit DepositMinted(\n            locals.tokenId,\n            _depositGroupId,\n            _amount,\n            locals.newShares,\n            msg.sender,\n            _claim.beneficiary,\n            locals.claimerId,\n            _lockedUntil,\n            _claim.data,\n            _name\n        );\n\n        return locals.tokenId;\n    }\n\n    /**\n     * Burns a deposit NFT and reduces the principal and shares of the claimer.\n     * If there were any yield to be claimed, the claimer will also keep shares to withdraw later on.\n     *\n     * @notice This function doesn't transfer any funds, it only updates the state.\n     *\n     * @notice Only the owner of the deposit may call this function.\n     *\n     * @param _tokenId The deposit ID to withdraw from.\n     * @param _totalShares The total shares to consider for the withdraw.\n     * @param _totalUnderlyingMinusSponsored The total underlying to consider for the withdraw.\n     * @param _to Where the funds will be sent\n     * @param _force If the withdraw should still withdraw if there are not enough funds in the vault.\n     *\n     * @return the amount to withdraw.\n     */\n    function _withdrawSingle(\n        uint256 _tokenId,\n        uint256 _totalShares,\n        uint256 _totalUnderlyingMinusSponsored,\n        address _to,\n        bool _force,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (deposits[_tokenId].owner != msg.sender)\n            revert VaultNotOwnerOfDeposit();\n\n        // memoizing saves warm sloads\n        Deposit memory _deposit = deposits[_tokenId];\n        Claimer memory _claim = claimer[_deposit.claimerId];\n\n        if (_deposit.lockedUntil > block.timestamp) revert VaultDepositLocked();\n        if (_deposit.claimerId == address(0)) revert VaultNotDeposit();\n        if (_deposit.amount < _amount)\n            revert VaultCannotWithdrawMoreThanAvailable();\n\n        // Amount of shares the _amount is worth\n        uint256 amountShares = _computeShares(\n            _amount,\n            _totalShares,\n            _totalUnderlyingMinusSponsored\n        );\n\n        // Amount of shares the _amount is worth taking in the claimer's\n        // totalShares and totalPrincipal\n        uint256 claimerShares = (_amount * _claim.totalShares) /\n            _claim.totalPrincipal;\n\n        if (!_force && amountShares > claimerShares)\n            revert VaultCannotWithdrawMoreThanAvailable();\n\n        uint256 sharesToBurn = amountShares;\n\n        if (_force && amountShares > claimerShares)\n            sharesToBurn = claimerShares;\n\n        claimer[_deposit.claimerId].totalShares -= sharesToBurn;\n        claimer[_deposit.claimerId].totalPrincipal -= _amount;\n\n        totalShares -= sharesToBurn;\n        totalPrincipal -= _amount;\n\n        bool isFull = _deposit.amount == _amount;\n\n        if (isFull) {\n            delete deposits[_tokenId];\n        } else {\n            deposits[_tokenId].amount -= _amount;\n        }\n\n        uint256 amount = _computeAmount(\n            sharesToBurn,\n            _totalShares,\n            _totalUnderlyingMinusSponsored\n        );\n\n        emit DepositWithdrawn(_tokenId, sharesToBurn, amount, _to, isFull);\n\n        return amount;\n    }\n\n    function _transferAndCheckInputToken(\n        address _from,\n        address _token,\n        uint256 _amount\n    ) internal {\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\n\n        if (balanceAfter != balanceBefore + _amount)\n            revert VaultAmountDoesNotMatchParams();\n    }\n\n    function _blockTimestamp() internal view returns (uint64) {\n        return uint64(block.timestamp);\n    }\n\n    /**\n     * Computes amount of shares that will be received for a given deposit amount\n     *\n     * @param _amount Amount of deposit to consider.\n     * @param _totalShares Amount of existing shares to consider.\n     * @param _totalUnderlyingMinusSponsored Amount of existing underlying to consider.\n     * @return Amount of shares the deposit will receive.\n     */\n    function _computeShares(\n        uint256 _amount,\n        uint256 _totalShares,\n        uint256 _totalUnderlyingMinusSponsored\n    ) internal pure returns (uint256) {\n        if (_amount == 0) return 0;\n        if (_totalShares == 0) return _amount * SHARES_MULTIPLIER;\n        if (_totalUnderlyingMinusSponsored == 0)\n            revert VaultCannotComputeSharesWithoutPrincipal();\n\n        return (_amount * _totalShares) / _totalUnderlyingMinusSponsored;\n    }\n\n    /**\n     * Computes the amount of underlying from a given number of shares\n     *\n     * @param _shares Number of shares.\n     * @param _totalShares Amount of existing shares to consider.\n     * @param _totalUnderlyingMinusSponsored Amounf of existing underlying to consider.\n     * @return Amount that corresponds to the number of shares.\n     */\n    function _computeAmount(\n        uint256 _shares,\n        uint256 _totalShares,\n        uint256 _totalUnderlyingMinusSponsored\n    ) internal pure returns (uint256) {\n        if (\n            _shares == 0 ||\n            _totalShares == 0 ||\n            _totalUnderlyingMinusSponsored == 0\n        ) {\n            return 0;\n        }\n\n        return ((_totalUnderlyingMinusSponsored * _shares) / _totalShares);\n    }\n\n    /**\n     * Applies a loss tolerance to the given @param _amount.\n     *\n     * This function is used to prevent the vault from entering loss mode when funds are lost due to fees in the strategy.\n     * For instance, the fees taken by Anchor.\n     *\n     * @param _amount Amount to apply the fees to.\n     *\n     * @return Amount with the fees applied.\n     */\n    function _applyLossTolerance(uint256 _amount)\n        internal\n        view\n        returns (uint256)\n    {\n        return _amount - _amount.pctOf(lossTolerancePct);\n    }\n\n    function sharesOf(address claimerId) external view returns (uint256) {\n        return claimer[claimerId].totalShares;\n    }\n\n    function principalOf(address claimerId) external view returns (uint256) {\n        return claimer[claimerId].totalPrincipal;\n    }\n\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    function exitPause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _exitPause();\n    }\n\n    function exitUnpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _exitUnpause();\n    }\n}\n"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20 {\n    uint8 private decimals_;\n\n    uint256 private fee;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        uint256 _totalSupply\n    ) ERC20(_name, _symbol) {\n        fee = 0;\n        decimals_ = _decimals;\n        _mint(msg.sender, _totalSupply);\n    }\n\n    function decimals() public view override(ERC20) returns (uint8) {\n        return decimals_;\n    }\n\n    function updateDecimals(uint8 _decimals) external {\n        decimals_ = _decimals;\n    }\n\n    function mint(address _user, uint256 _amount) public {\n        _mint(_user, _amount);\n    }\n\n    function burn(address _user, uint256 _amount) public {\n        _burn(_user, _amount);\n    }\n\n    function setFee(uint256 _fee) public {\n        fee = _fee;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20) {\n        super._transfer(from, to, (amount * (10000 - fee)) / 10000);\n    }\n}\n\ncontract MockDAI is MockERC20 {\n    constructor(uint256 supply) MockERC20(\"Mock DAI\", \"mockDAI\", 18, supply) {}\n}\n\ncontract MockUSDC is MockERC20 {\n    constructor(uint256 supply) MockERC20(\"Mock USDC\", \"mockUSDC\", 6, supply) {}\n}\n\ncontract MockUST is MockERC20 {\n    constructor(uint256 supply) MockERC20(\"Mock UST\", \"mockUST\", 18, supply) {}\n}\n\ncontract MockAUST is MockERC20 {\n    constructor(uint256 supply)\n        MockERC20(\"Mock aUST\", \"mockaUST\", 18, supply)\n    {}\n}\n\ncontract MockLUSD is MockERC20 {\n    constructor(uint256 supply)\n        MockERC20(\"Mock LUSD\", \"mockLUSD\", 18, supply)\n    {}\n}\n"
    },
    "contracts/mock/anchor/MockAnchorStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {AnchorStrategy} from \"./AnchorStrategy.sol\";\n\ncontract MockAnchorStrategy is AnchorStrategy {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _vault,\n        address _ethAnchorRouter,\n        AggregatorV3Interface _aUstToUstFeed,\n        IERC20 _ustToken,\n        IERC20 _aUstToken\n    )\n        AnchorStrategy(\n            _vault,\n            _ethAnchorRouter,\n            _aUstToUstFeed,\n            _ustToken,\n            _aUstToken,\n            msg.sender\n        )\n    {}\n\n    function invest() external override(AnchorStrategy) onlyManager {}\n\n    function withdrawToVault(uint256 amount) external override onlyManager {\n        ustToken.safeTransfer(vault, amount);\n    }\n\n    function investedAssets() external view override returns (uint256) {\n        uint256 underlyingBalance = _getUnderlyingBalance() + pendingDeposits;\n\n        return underlyingBalance + _estimateAUstBalanceInUst();\n    }\n\n    function setAllRedeemed(bool __allRedeemed) external {\n        _allRedeemed = __allRedeemed;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/vault/IVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IVault {\n    //\n    // Structs\n    //\n\n    struct ClaimParams {\n        uint16 pct;\n        address beneficiary;\n        bytes data;\n    }\n\n    struct DepositParams {\n        address inputToken;\n        uint64 lockDuration;\n        uint256 amount;\n        ClaimParams[] claims;\n        string name;\n        uint256 slippage;\n    }\n\n    struct Deposit {\n        /// amount of the deposit\n        uint256 amount;\n        /// wallet of the owner\n        address owner;\n        /// wallet of the claimer\n        address claimerId;\n        /// when can the deposit be withdrawn\n        uint256 lockedUntil;\n    }\n\n    struct Claimer {\n        uint256 totalPrincipal;\n        uint256 totalShares;\n    }\n\n    //\n    // Events\n    //\n\n    event DepositMinted(\n        uint256 indexed id,\n        uint256 groupId,\n        uint256 amount,\n        uint256 shares,\n        address indexed depositor,\n        address indexed claimer,\n        address claimerId,\n        uint64 lockedUntil,\n        bytes data,\n        string name\n    );\n\n    event DepositWithdrawn(\n        uint256 indexed id,\n        uint256 shares,\n        uint256 amount,\n        address indexed to,\n        bool burned\n    );\n\n    event Invested(uint256 amount);\n\n    event Disinvested(uint256 amount);\n\n    event YieldClaimed(\n        address claimerId,\n        address indexed to,\n        uint256 amount,\n        uint256 burnedShares,\n        uint256 perfFee,\n        uint256 totalUnderlying,\n        uint256 totalShares\n    );\n\n    event FeeWithdrawn(uint256 amount);\n\n    //\n    // Public API\n    //\n\n    /**\n     * Update the invested amount;\n     */\n    function updateInvested() external;\n\n    /**\n     * Calculate maximum investable amount and already invested amount\n     *\n     * @return maxInvestableAmount maximum investable amount\n     * @return alreadyInvested already invested amount\n     */\n    function investState()\n        external\n        view\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested);\n\n    /**\n     * Percentage of the total underlying to invest in the strategy\n     */\n    function investPct() external view returns (uint16);\n\n    /**\n     * Underlying ERC20 token accepted by the vault\n     */\n    function underlying() external view returns (IERC20Metadata);\n\n    /**\n     * Minimum lock period for each deposit\n     */\n    function minLockPeriod() external view returns (uint64);\n\n    /**\n     * Total amount of underlying currently controlled by the\n     * vault and the its strategy.\n     */\n    function totalUnderlying() external view returns (uint256);\n\n    /**\n     * Total amount of shares\n     */\n    function totalShares() external view returns (uint256);\n\n    /**\n     * Computes the amount of yield available for an an address.\n     *\n     * @param _to address to consider.\n     *\n     * @return claimable yield for @param _to, share of generated yield by @param _to,\n     *      and performance fee from generated yield\n     */\n    function yieldFor(address _to)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /**\n     * Accumulate performance fee and transfers rest yield generated for the caller to\n     *\n     * @param _to Address that will receive the yield.\n     */\n    function claimYield(address _to) external;\n\n    /**\n     * Creates a new deposit using the specified group id\n     *\n     * @param _groupId The group id for the new deposit\n     * @param _params Deposit params\n     */\n    function depositForGroupId(uint256 _groupId, DepositParams calldata _params)\n        external\n        returns (uint256[] memory);\n\n    /**\n     * Creates a new deposit\n     *\n     * @param _params Deposit params\n     */\n    function deposit(DepositParams calldata _params)\n        external\n        returns (uint256[] memory);\n\n    /**\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\n     *\n     * It fails if the vault is underperforming and there are not enough funds\n     * to withdraw the expected amount.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function withdraw(address _to, uint256[] calldata _ids) external;\n\n    /**\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\n     *\n     * When the vault is underperforming it withdraws the funds with a loss.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function forceWithdraw(address _to, uint256[] calldata _ids) external;\n\n    /**\n     * Withdraws any pending performance fee amount back to the treasury\n     */\n    function withdrawPerformanceFee() external;\n}\n"
    },
    "contracts/vault/IVaultSponsoring.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface IVaultSponsoring {\n    //\n    // Events\n    //\n\n    /// Emitted when a new sponsor deposit is created\n    event Sponsored(\n        uint256 indexed id,\n        uint256 amount,\n        address indexed depositor,\n        uint256 lockedUntil\n    );\n\n    /// Emitted when an existing sponsor withdraws\n    event Unsponsored(uint256 indexed id);\n\n    /**\n     * Total amount currently sponsored\n     */\n    function totalSponsored() external view returns (uint256);\n\n    /**\n     * Creates a sponsored deposit with the amount provided in @param _amount.\n     * Sponsored amounts will be invested like deposits, but unlike deposits\n     * there are no claimers and the yield generated is donated to the vault.\n     * The amount is locked until the timestamp specified in @param _lockedUntil.\n     *\n     * @param _inputToken The input token to deposit.\n     * @param _amount Amount to sponsor.\n     * @param _lockedUntil When the sponsor can unsponsor the amount.\n     */\n    function sponsor(\n        address _inputToken,\n        uint256 _amount,\n        uint256 _lockedUntil,\n        uint256 _slippage\n    ) external;\n\n    /**\n     * Withdraws the sponsored amount for the deposits with the ids provided\n     * in @param _ids and sends it to @param _to.\n     *\n     * It fails if the vault is underperforming and there are not enough funds\n     * to withdraw the sponsored amount.\n     *\n     * @param _to Address that will receive the funds.\n     * @param _ids Array with the ids of the deposits.\n     */\n    function unsponsor(address _to, uint256[] memory _ids) external;\n}\n"
    },
    "contracts/vault/IVaultSettings.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface IVaultSettings {\n    //\n    // Events\n    //\n\n    event InvestPctUpdated(uint256 percentage);\n    event TreasuryUpdated(address indexed treasury);\n    event PerfFeePctUpdated(uint16 pct);\n    event StrategyUpdated(address indexed strategy);\n    event LossTolerancePctUpdated(uint16 pct);\n\n    /**\n     * Update invest percentage\n     *\n     * Emits {InvestPercentageUpdated} event\n     *\n     * @param _investPct the new invest percentage\n     */\n    function setInvestPct(uint16 _investPct) external;\n\n    /**\n     * Changes the treasury used by the vault.\n     *\n     * @param _treasury the new strategy's address.\n     */\n    function setTreasury(address _treasury) external;\n\n    /**\n     * Changes the performance fee used by the vault.\n     *\n     * @param _perfFeePct the new performance fee.\n     */\n    function setPerfFeePct(uint16 _perfFeePct) external;\n\n    /**\n     * Changes the strategy used by the vault.\n     *\n     * @notice if there is invested funds in previous strategy, it is not allowed to set new strategy.\n     * @param _strategy the new strategy's address.\n     */\n    function setStrategy(address _strategy) external;\n\n    /**\n     * Changes the estimated investment fee used by the strategy.\n     *\n     * @param _pct the new investment fee estimated percentage.\n     */\n    function setLossTolerancePct(uint16 _pct) external;\n}\n"
    },
    "contracts/vault/CurveSwapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {ICurve} from \"../interfaces/curve/ICurve.sol\";\n\n/// Helper abstract contract to manage curve swaps\nabstract contract CurveSwapper {\n    using SafeERC20 for IERC20;\n\n    //\n    // Structs\n    //\n\n    struct Swapper {\n        /// Curve pool instance\n        ICurve pool;\n        /// decimals in token\n        uint8 tokenDecimals;\n        /// decimals in underlying\n        uint8 underlyingDecimals;\n        /// index of the deposit token we want to exchange to/from underlying\n        int128 tokenI;\n        /// index of underlying used by the vault (presumably always UST)\n        int128 underlyingI;\n    }\n\n    struct SwapPoolParam {\n        address token;\n        address pool;\n        int128 tokenI;\n        int128 underlyingI;\n    }\n\n    //\n    // Events\n    //\n\n    /// Emitted when a new swap pool is added\n    event CurveSwapPoolAdded(\n        address indexed token,\n        address indexed pool,\n        int128 tokenI,\n        int128 underlyingI\n    );\n\n    /// Emitted when a swap pool is removed\n    event CurveSwapPoolRemoved(address indexed token);\n\n    /// Emitted after every swap\n    event Swap(\n        address indexed fromToken,\n        address indexed toToken,\n        uint256 fromAmount,\n        uint256 toAmount\n    );\n\n    //\n    // State\n    //\n\n    /// token => curve pool (for trading token/underlying)\n    mapping(address => Swapper) public swappers;\n\n    /// @return The address of the vault's main underlying token\n    function getUnderlying() public view virtual returns (address);\n\n    /// Swaps a given amount of\n    /// Only works if the pool has previously been inserted into the contract\n    ///\n    /// @param _token The token we want to swap into\n    /// @param _amount The amount of underlying we want to swap\n    function _swapIntoUnderlying(\n        address _token,\n        uint256 _amount,\n        uint256 _slippage\n    ) internal returns (uint256 amount) {\n        address underlyingToken = getUnderlying();\n        if (_token == underlyingToken) {\n            // same token, nothing to do\n            return _amount;\n        }\n\n        Swapper storage swapper = swappers[_token];\n        require(\n            address(swapper.pool) != address(0x0),\n            \"non-existing swap pool\"\n        );\n\n        uint256 minAmount = _calcMinDy(\n            _amount,\n            swapper.tokenDecimals,\n            swapper.underlyingDecimals,\n            _slippage\n        );\n\n        amount = swapper.pool.exchange_underlying(\n            swapper.tokenI,\n            swapper.underlyingI,\n            _amount,\n            minAmount\n        );\n\n        emit Swap(_token, underlyingToken, _amount, amount);\n    }\n\n    /// Swaps a given amount of Underlying into a given token\n    /// Only works if the pool has previously been inserted into the contract\n    ///\n    /// @param _token The token we want to swap into\n    /// @param _amount The amount of underlying we want to swap\n    function _swapFromUnderlying(\n        address _token,\n        uint256 _amount,\n        uint256 _slippage\n    ) internal returns (uint256 amount) {\n        if (_token == getUnderlying()) {\n            // same token, nothing to do\n            return _amount;\n        }\n\n        Swapper storage swapper = swappers[_token];\n\n        uint256 minAmount = _calcMinDy(\n            _amount,\n            swapper.underlyingDecimals,\n            swapper.tokenDecimals,\n            _slippage\n        );\n\n        amount = swapper.pool.exchange_underlying(\n            swapper.underlyingI,\n            swapper.tokenI,\n            _amount,\n            minAmount\n        );\n\n        emit Swap(getUnderlying(), _token, _amount, amount);\n    }\n\n    function _calcMinDy(\n        uint256 _amount,\n        uint8 _fromDecimals,\n        uint8 _toDecimals,\n        uint256 _slippage\n    ) internal pure returns (uint256) {\n        return\n            (_amount * _slippage * 10**_toDecimals) / (10**_fromDecimals * 10000);\n    }\n\n    /// This is necessary because some tokens (USDT) force you to approve(0)\n    /// before approving a new amount meaning if we always approved blindly,\n    /// then we could get random failures on the second attempt\n    function _approveIfNecessary(address _token, address _pool) internal {\n        uint256 allowance = IERC20(_token).allowance(address(this), _pool);\n\n        if (allowance == 0) {\n            IERC20(_token).safeApprove(_pool, type(uint256).max);\n        }\n    }\n\n    /// @param _swapPools configs for each swap pool\n    function _addPools(SwapPoolParam[] memory _swapPools) internal {\n        uint256 length = _swapPools.length;\n        for (uint256 i = 0; i < length; ++i) {\n            _addPool(_swapPools[i]);\n        }\n    }\n\n    function _addPool(SwapPoolParam memory _param) internal {\n        require(\n            address(swappers[_param.token].pool) == address(0),\n            \"token already has a swap pool\"\n        );\n        require(\n            ICurve(_param.pool).coins(uint256(uint128(_param.underlyingI))) ==\n                getUnderlying(),\n            \"_underlyingI does not match underlying token\"\n        );\n\n        uint256 tokenDecimals = IERC20Metadata(_param.token).decimals();\n        uint256 underlyingDecimals = IERC20Metadata(getUnderlying()).decimals();\n\n        // TODO check if _token and _underlyingIndex match the pool settings\n        swappers[_param.token] = Swapper(\n            ICurve(_param.pool),\n            uint8(tokenDecimals),\n            uint8(underlyingDecimals),\n            _param.tokenI,\n            _param.underlyingI\n        );\n\n        _approveIfNecessary(getUnderlying(), address(_param.pool));\n        _approveIfNecessary(_param.token, address(_param.pool));\n\n        emit CurveSwapPoolAdded(\n            _param.token,\n            _param.pool,\n            _param.tokenI,\n            _param.underlyingI\n        );\n    }\n\n    function _removePool(address _inputToken) internal {\n        require(\n            address(swappers[_inputToken].pool) != address(0),\n            \"pool does not exist\"\n        );\n        delete swappers[_inputToken];\n\n        emit CurveSwapPoolRemoved(_inputToken);\n    }\n}\n"
    },
    "contracts/lib/PercentMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nlibrary PercentMath {\n    // Divisor used for representing percentages\n    uint256 public constant PCT_DIVISOR = 10000;\n\n    /**\n     * @dev Returns whether an amount is a valid percentage out of PCT_DIVISOR\n     * @param _amount Amount that is supposed to be a percentage\n     */\n    function validPct(uint256 _amount) internal pure returns (bool) {\n        return _amount <= PCT_DIVISOR;\n    }\n\n    /**\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\n     * @param _amount Amount to take the percentage of\n     * @param _fracNum Numerator of fraction representing the percentage with PCT_DIVISOR as the denominator\n     */\n    function pctOf(uint256 _amount, uint16 _fracNum)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (_amount * _fracNum) / PCT_DIVISOR;\n    }\n\n    /**\n     * @dev Checks if a given number corresponds to 100%\n     * @param _perc Percentage value to check, with PCT_DIVISOR\n     */\n    function is100Pct(uint256 _perc) internal pure returns (bool) {\n        return _perc == PCT_DIVISOR;\n    }\n}\n"
    },
    "contracts/lib/ExitPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an exit stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotExitPaused` and `whenExitPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract ExitPausable is Context {\n    /**\n     * @dev Emitted when the exitPause is triggered by `account`.\n     */\n    event ExitPaused(address account);\n\n    /**\n     * @dev Emitted when the exitPause is lifted by `account`.\n     */\n    event ExitUnpaused(address account);\n\n    bool private _exitPaused;\n\n    /**\n     * @dev Initializes the contract in exitUnpaused state.\n     */\n    constructor() {\n        _exitPaused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not exitPaused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be exitPaused.\n     */\n    modifier whenNotExitPaused() {\n        _requireNotExitPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is exitPaused.\n     *\n     * Requirements:\n     *\n     * - The contract must be exitPaused.\n     */\n    modifier whenExitPaused() {\n        _requireExitPaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is exitPaused, and false otherwise.\n     */\n    function exitPaused() public view virtual returns (bool) {\n        return _exitPaused;\n    }\n\n    /**\n     * @dev Throws if the contract is exitPaused.\n     */\n    function _requireNotExitPaused() internal view virtual {\n        require(!exitPaused(), \"Pausable: ExitPaused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not exitPaused.\n     */\n    function _requireExitPaused() internal view virtual {\n        require(exitPaused(), \"Pausable: not ExitPaused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be exitPaused.\n     */\n    function _exitPause() internal virtual whenNotExitPaused {\n        _exitPaused = true;\n        emit ExitPaused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be exitPaused.\n     */\n    function _exitUnpause() internal virtual whenExitPaused {\n        _exitPaused = false;\n        emit ExitUnpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/strategy/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * IStrategy defines the interface for pluggable contracts used by vaults to invest funds and generate yield.\n *\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault.\n *\n * @notice It's up to the vault to decide how much to invest/disinvest from the total pool.\n */\ninterface IStrategy {\n    /**\n     * Emmited when funds are invested by the strategy.\n     *\n     *@param amount amount invested\n     */\n    event StrategyInvested(uint256 amount);\n    /**\n     * Emmited when funds are withdrawn (disinvested) by the strategy.\n     *\n     *@param amount amount withdrawn\n     */\n    event StrategyWithdrawn(uint256 amount);\n\n    /**\n     * Provides information about wether the strategy is synchronous or asynchronous.\n     *\n     * @notice Synchronous strategies support instant withdrawals,\n     * while asynchronous strategies impose a delay before withdrawals can be made.\n     *\n     * @return true if the strategy is synchronous, false otherwise\n     */\n    function isSync() external view returns (bool);\n\n    /**\n     * The vault linked to this strategy.\n     *\n     * @return The vault's address\n     */\n    function vault() external view returns (address);\n\n    /**\n     * Withdraws the specified amount back to the vault (disinvests)\n     *\n     * @param amount Amount to withdraw\n     */\n    function withdrawToVault(uint256 amount) external;\n\n    /**\n     * Amount of the underlying currency currently invested by the strategy.\n     *\n     * @notice both held and invested amounts are included here, using the\n     * latest known exchange rates to the underlying currency\n     *\n     * @return The total amount of underlying\n     */\n    function investedAssets() external view returns (uint256);\n\n    /**\n     * Indicates if assets are invested into strategy or not.\n     *\n     * @notice this will be used when removing the strategy from the vault\n     * @return true if assets invested, false if nothing invested.\n     */\n    function hasAssets() external view returns (bool);\n\n    /**\n     * Deposits of all the available underlying into the yield generating protocol.\n     */\n    function invest() external;\n}\n"
    },
    "contracts/interfaces/CustomErrors.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface CustomErrors {\n    //\n    // Vault Errors\n    //\n\n    // Vault: sender is not the owner of the group id\n    error VaultSenderNotOwnerOfGroupId();\n\n    // Vault: invalid investPct\n    error VaultInvalidInvestpct();\n\n    // Vault: invalid performance fee\n    error VaultInvalidPerformanceFee();\n\n    // Vault: no performance fee\n    error VaultNoPerformanceFee();\n\n    // Vault: invalid investment fee\n    error VaultInvalidLossTolerance();\n\n    // Vault: underlying cannot be 0x0\n    error VaultUnderlyingCannotBe0Address();\n\n    // Vault: treasury cannot be 0x0\n    error VaultTreasuryCannotBe0Address();\n\n    // Vault: owner cannot be 0x0\n    error VaultOwnerCannotBe0Address();\n\n    // Vault: cannot transfer ownership to self\n    error VaultCannotTransferOwnershipToSelf();\n\n    // Vault: destination address is 0x\n    error VaultDestinationCannotBe0Address();\n\n    // Vault: strategy is not set\n    error VaultStrategyNotSet();\n\n    // Vault: invalid minLockPeriod\n    error VaultInvalidMinLockPeriod();\n\n    // Vault: invalid lock period\n    error VaultInvalidLockPeriod();\n\n    // Vault: cannot deposit 0\n    error VaultCannotDeposit0();\n\n    // Vault: cannot sponsor 0\n    error VaultCannotSponsor0();\n\n    // Vault: cannot deposit when yield is negative\n    error VaultCannotDepositWhenYieldNegative();\n\n    // Vault: cannot deposit when the claimer is in debt\n    error VaultCannotDepositWhenClaimerInDebt();\n\n    // Vault: cannot deposit when yield is negative\n    error VaultCannotWithdrawWhenYieldNegative();\n\n    // Vault: nothing to do\n    error VaultNothingToDo();\n\n    // Vault: not enough to rebalance\n    error VaultNotEnoughToRebalance();\n\n    // Vault: invalid vault\n    error VaultInvalidVault();\n\n    // Vault: strategy has invested funds\n    error VaultStrategyHasInvestedFunds();\n\n    // Vault: not enough funds\n    error VaultNotEnoughFunds();\n\n    // Vault: you are not allowed\n    error VaultNotAllowed();\n\n    // Vault: amount is locked\n    error VaultAmountLocked();\n\n    // Vault: deposit is locked\n    error VaultDepositLocked();\n\n    // Vault: token id is not a sponsor\n    error VaultNotSponsor();\n\n    // Vault: token id is not a deposit\n    error VaultNotDeposit();\n\n    // Vault: claim percentage cannot be 0\n    error VaultClaimPercentageCannotBe0();\n\n    // Vault: claimer cannot be address 0\n    error VaultClaimerCannotBe0();\n\n    // Vault: claims don't add up to 100%\n    error VaultClaimsDontAddUp();\n\n    // Vault: you are not the owner of a deposit\n    error VaultNotOwnerOfDeposit();\n\n    // Vault: cannot withdraw more than the available amount\n    error VaultCannotWithdrawMoreThanAvailable();\n\n    // Vault: amount received does not match params\n    error VaultAmountDoesNotMatchParams();\n\n    // Vault: cannot compute shares when there's no principal\n    error VaultCannotComputeSharesWithoutPrincipal();\n\n    // Vault: deposit name for MetaVault too short\n    error VaultDepositNameTooShort();\n\n    // Vault: no yield to claim\n    error VaultNoYieldToClaim();\n\n    //\n    // Strategy Errors\n    //\n\n    // Strategy: admin is 0x\n    error StrategyAdminCannotBe0Address();\n\n    // Strategy: cannot transfer admin rights to self\n    error StrategyCannotTransferAdminRightsToSelf();\n\n    // Strategy: underlying is 0x\n    error StrategyUnderlyingCannotBe0Address();\n\n    // Strategy: not an IVault\n    error StrategyNotIVault();\n\n    // Strategy: caller is not manager\n    error StrategyCallerNotManager();\n\n    // Strategy: caller has no settings role\n    error StrategyCallerNotSettings();\n\n    // Strategy: caller is not admin\n    error StrategyCallerNotAdmin();\n\n    // Strategy: amount is 0\n    error StrategyAmountZero();\n\n    // Strategy: not running\n    error StrategyNotRunning();\n\n    // Not Enough Underlying Balance in Strategy contract\n    error StrategyNoUnderlying();\n\n    // Not Enough Shares in Strategy Contract\n    error StrategyNotEnoughShares();\n}\n"
    },
    "contracts/interfaces/curve/ICurve.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface ICurve {\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external returns (uint256);\n\n    function coins(uint256 i) external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/mock/anchor/AnchorStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nimport {PercentMath} from \"../../lib/PercentMath.sol\";\nimport {ERC165Query} from \"../../lib/ERC165Query.sol\";\nimport {IVault} from \"../../vault/IVault.sol\";\nimport {IAnchorStrategy} from \"./IAnchorStrategy.sol\";\nimport {IStrategy} from \"../../strategy/IStrategy.sol\";\nimport {IEthAnchorRouter} from \"./IEthAnchorRouter.sol\";\nimport {CustomErrors} from \"../../interfaces/CustomErrors.sol\";\n\n/**\n * Base eth anchor strategy that handles UST tokens and invests them via the EthAnchor\n * protocol (https://docs.anchorprotocol.com/ethanchor/ethanchor)\n */\ncontract AnchorStrategy is\n    IAnchorStrategy,\n    IStrategy,\n    AccessControl,\n    CustomErrors\n{\n    using SafeERC20 for IERC20;\n    using PercentMath for uint256;\n    using ERC165Query for address;\n\n    // AnchorStrategy: no ust exist\n    error StrategyNoUST();\n    // AnchorStrategy: no aUST returned\n    error StrategyNoAUSTReturned();\n    // AnchorStrategy: nothing redeemed\n    error StrategyNothingRedeemed();\n    // AnchorStrategy: invalid aUST rate\n    error StrategyInvalidAUSTRate();\n    // AnchorStrategy: router is 0x\n    error StrategyRouterCannotBe0Address();\n    // AnchorStrategy: yield token is 0x\n    error StrategyYieldTokenCannotBe0Address();\n\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n\n    /// @inheritdoc IStrategy\n    address public immutable override(IStrategy) vault;\n\n    // UST token address\n    IERC20 public immutable ustToken;\n\n    // aUST token address (wrapped Anchor UST, received to accrue interest for an Anchor deposit)\n    IERC20 public immutable aUstToken;\n\n    // Router contract to interact with EthAnchor\n    IEthAnchorRouter public ethAnchorRouter;\n\n    // Chainlink aUST / UST price feed\n    AggregatorV3Interface public immutable aUstToUstFeed;\n\n    // amount currently pending in deposits to EthAnchor\n    uint256 public pendingDeposits;\n\n    // amount currently pending redeemption from EthAnchor\n    uint256 public pendingRedeems;\n\n    // deposit operations history\n    Operation[] public depositOperations;\n\n    // redeem operations history\n    Operation[] public redeemOperations;\n\n    // Multiplier of aUST / UST feed\n    uint256 internal _aUstToUstFeedMultiplier;\n\n    bool internal _allRedeemed;\n\n    /**\n     * Constructor of Base Strategy - Initialize required addresses and params\n     *\n     * @notice Vault will be automatically set to Manager Role to handle underlyings\n     *\n     * @param _vault Vault address\n     * @param _ethAnchorRouter EthAnchorRouter address\n     * @param _aUstToUstFeed aUST / UST chainlink feed address\n     * @param _ustToken UST token address\n     * @param _aUstToken aUST token address\n     * @param _admin admin address\n     */\n    constructor(\n        address _vault,\n        address _ethAnchorRouter,\n        AggregatorV3Interface _aUstToUstFeed,\n        IERC20 _ustToken,\n        IERC20 _aUstToken,\n        address _admin\n    ) {\n        if (_admin == address(0)) revert StrategyAdminCannotBe0Address();\n        if (_ethAnchorRouter == address(0))\n            revert StrategyRouterCannotBe0Address();\n        if (address(_ustToken) == address(0))\n            revert StrategyUnderlyingCannotBe0Address();\n        if (address(_aUstToken) == address(0))\n            revert StrategyYieldTokenCannotBe0Address();\n        if (!_vault.doesContractImplementInterface(type(IVault).interfaceId))\n            revert StrategyNotIVault();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n        _setupRole(MANAGER_ROLE, _vault);\n\n        vault = _vault;\n        ethAnchorRouter = IEthAnchorRouter(_ethAnchorRouter);\n        aUstToUstFeed = _aUstToUstFeed;\n        ustToken = _ustToken;\n        aUstToken = _aUstToken;\n\n        _aUstToUstFeedMultiplier = 10**_aUstToUstFeed.decimals();\n        _allRedeemed = true;\n    }\n\n    //\n    // Modifiers\n    //\n\n    modifier onlyManager() {\n        if (!hasRole(MANAGER_ROLE, msg.sender))\n            revert StrategyCallerNotManager();\n        _;\n    }\n\n    //\n    // IStrategy\n    //\n\n    /**\n     * Returns false since strategy is asynchronous.\n     */\n    function isSync() external pure override(IStrategy) returns (bool) {\n        return false;\n    }\n\n    /**\n     * Withdraws a specified amount back to the vault\n     *\n     * @notice since EthAnchor uses an asynchronous model, and there is no underlying amount\n     * in the strategy, this function do nothing at all, However override interface of IStrategy.\n     */\n    function withdrawToVault(uint256 amount)\n        external\n        virtual\n        override(IStrategy)\n        onlyManager\n    {\n        if (amount == 0) revert StrategyAmountZero();\n        uint256 _aUstToWithdraw = _estimateUstAmountInAUst(amount);\n\n        if (pendingRedeems < _aUstToWithdraw) {\n            initRedeemStable(_aUstToWithdraw - pendingRedeems);\n        }\n    }\n\n    /**\n     * Amount, expressed in the underlying currency, currently in the strategy\n     *\n     * @notice both held and invested amounts are included here, using the\n     * latest known exchange rates to the underlying currency.\n     *\n     * @return The total amount of underlying\n     */\n    function investedAssets()\n        external\n        view\n        virtual\n        override(IStrategy)\n        returns (uint256)\n    {\n        return pendingDeposits + _estimateAUstBalanceInUst();\n    }\n\n    /// @inheritdoc IStrategy\n    function invest() external virtual override(IStrategy) onlyManager {\n        uint256 ustBalance = _getUstBalance();\n        if (ustBalance == 0) revert StrategyNoUST();\n        pendingDeposits += ustBalance;\n\n        ustToken.safeIncreaseAllowance(address(ethAnchorRouter), ustBalance);\n        address operator = ethAnchorRouter.initDepositStable(ustBalance);\n        depositOperations.push(\n            Operation({operator: operator, amount: ustBalance})\n        );\n\n        _allRedeemed = false;\n\n        emit InitDepositStable(\n            operator,\n            depositOperations.length - 1,\n            ustBalance,\n            ustBalance\n        );\n    }\n\n    /**\n     * Calls EthAnchor with a pending deposit ID, and attempts to finish it.\n     *\n     * @notice Must be called some time after `_initDepositStable()`. Will only work if\n     * the EthAnchor bridge has finished processing the deposit.\n     *\n     * @param idx Id of the pending deposit operation\n     */\n    function finishDepositStable(uint256 idx) external onlyManager {\n        if (depositOperations.length <= idx) revert StrategyNotRunning();\n        Operation storage operation = depositOperations[idx];\n        address operator = operation.operator;\n        uint256 aUstBalanceBefore = _getAUstBalance();\n\n        ethAnchorRouter.finishDepositStable(operator);\n        uint256 newAUst = _getAUstBalance() - aUstBalanceBefore;\n        if (newAUst == 0) revert StrategyNoAUSTReturned();\n\n        uint256 ustAmount = operation.amount;\n        pendingDeposits -= ustAmount;\n\n        if (idx < depositOperations.length - 1) {\n            Operation memory lastOperation = depositOperations[\n                depositOperations.length - 1\n            ];\n\n            emit RearrangeDepositOperation(\n                lastOperation.operator,\n                operation.operator,\n                idx\n            );\n\n            operation.operator = lastOperation.operator;\n            operation.amount = lastOperation.amount;\n        }\n\n        depositOperations.pop();\n\n        emit FinishDepositStable(operator, ustAmount, newAUst);\n    }\n\n    /**\n     * Initiates a withdrawal of UST from EthAnchor\n     *\n     * @notice since EthAnchor uses an asynchronous model, this function\n     * only starts the redeem process, but does not finish it.\n     *\n     * @param amount Amount of aUST to redeem\n     */\n    function initRedeemStable(uint256 amount) public onlyManager {\n        if (amount == 0) revert StrategyAmountZero();\n        if (pendingDeposits == 0 && _getAUstBalance() == amount) {\n            _allRedeemed = true;\n        }\n        pendingRedeems += amount;\n\n        aUstToken.safeIncreaseAllowance(address(ethAnchorRouter), amount);\n        address operator = ethAnchorRouter.initRedeemStable(amount);\n\n        redeemOperations.push(Operation({operator: operator, amount: amount}));\n\n        emit InitRedeemStable(operator, redeemOperations.length - 1, amount);\n    }\n\n    /**\n     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.\n     *\n     * @notice Must be called some time after `initRedeemStable()`. Will only work if\n     * the EthAnchor bridge has finished processing the deposit.\n     *\n     * @dev division by `aUstBalance` was not deemed worthy of a zero-check\n     *   (https://github.com/code-423n4/2022-01-sandclock-findings/issues/95)\n     *\n     * @param idx Id of the pending redeem operation\n     */\n    function finishRedeemStable(uint256 idx) external virtual onlyManager {\n        if (redeemOperations.length <= idx) revert StrategyNotRunning();\n        Operation storage operation = redeemOperations[idx];\n\n        uint256 aUstAmount = operation.amount;\n        address operator = operation.operator;\n\n        ethAnchorRouter.finishRedeemStable(operator);\n\n        uint256 ustAmount = _getUstBalance();\n        if (ustAmount == 0) revert StrategyNothingRedeemed();\n\n        pendingRedeems -= aUstAmount;\n\n        if (idx < redeemOperations.length - 1) {\n            Operation memory lastOperation = redeemOperations[\n                redeemOperations.length - 1\n            ];\n\n            emit RearrangeRedeemOperation(\n                lastOperation.operator,\n                operation.operator,\n                idx\n            );\n\n            operation.operator = lastOperation.operator;\n            operation.amount = lastOperation.amount;\n        }\n\n        redeemOperations.pop();\n\n        ustToken.safeTransfer(vault, _getUnderlyingBalance());\n\n        emit FinishRedeemStable(operator, aUstAmount, ustAmount, ustAmount);\n    }\n\n    /// @inheritdoc IStrategy\n    function hasAssets() external view override returns (bool) {\n        return _allRedeemed == false || pendingRedeems != 0;\n    }\n\n    //\n    // Internal API\n    //\n\n    /**\n     * @return underlying balance of strategy\n     */\n    function _getUnderlyingBalance() internal view returns (uint256) {\n        return ustToken.balanceOf(address(this));\n    }\n\n    /**\n     * @return UST balance of strategy\n     */\n    function _getUstBalance() internal view returns (uint256) {\n        return ustToken.balanceOf(address(this));\n    }\n\n    /**\n     * @return aUST balance of strategy\n     */\n    function _getAUstBalance() internal view returns (uint256) {\n        return aUstToken.balanceOf(address(this));\n    }\n\n    /**\n     * @return Length of pending deposit operations\n     */\n    function depositOperationLength() external view returns (uint256) {\n        return depositOperations.length;\n    }\n\n    /**\n     * @return Length of pending redeem operations\n     */\n    function redeemOperationLength() external view returns (uint256) {\n        return redeemOperations.length;\n    }\n\n    /**\n     * @return AUST value of UST amount\n     */\n    function _estimateUstAmountInAUst(uint256 ustAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        if (ustAmount == 0) {\n            return 0;\n        }\n\n        uint256 aUstPrice = _aUstToUstExchangeRate();\n\n        return ((_aUstToUstFeedMultiplier * ustAmount) / aUstPrice);\n    }\n\n    /**\n     * @return UST value of current aUST balance (+ pending redeems)\n     */\n    function _estimateAUstBalanceInUst() internal view returns (uint256) {\n        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\n\n        if (aUstBalance == 0) {\n            return 0;\n        }\n\n        uint256 aUstPrice = _aUstToUstExchangeRate();\n\n        return ((aUstPrice * aUstBalance) / _aUstToUstFeedMultiplier);\n    }\n\n    /**\n     * @return aUST / UST exchange rate from chainlink\n     */\n    function _aUstToUstExchangeRate() internal view virtual returns (uint256) {\n        (\n            uint80 roundID,\n            int256 price,\n            ,\n            uint256 updateTime,\n            uint80 answeredInRound\n        ) = aUstToUstFeed.latestRoundData();\n\n        if (price <= 0 || updateTime == 0 || answeredInRound < roundID)\n            revert StrategyInvalidAUSTRate();\n\n        return uint256(price);\n    }\n}\n"
    },
    "contracts/lib/ERC165Query.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nlibrary ERC165Query {\n    bytes4 constant InvalidID = 0xffffffff;\n    bytes4 constant ERC165ID = 0x01ffc9a7;\n\n    function doesContractImplementInterface(\n        address _contract,\n        bytes4 _interfaceId\n    ) internal view returns (bool) {\n        uint256 success;\n        uint256 result;\n\n        (success, result) = noThrowCall(_contract, ERC165ID);\n        if ((success == 0) || (result == 0)) {\n            return false;\n        }\n\n        (success, result) = noThrowCall(_contract, InvalidID);\n        if ((success == 0) || (result != 0)) {\n            return false;\n        }\n\n        (success, result) = noThrowCall(_contract, _interfaceId);\n        if ((success == 1) && (result == 1)) {\n            return true;\n        }\n        return false;\n    }\n\n    function noThrowCall(address _contract, bytes4 _interfaceId)\n        internal\n        view\n        returns (uint256 success, uint256 result)\n    {\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n            let x := mload(0x40) // Find empty storage location using \"free memory pointer\"\n            mstore(x, erc165ID) // Place signature at beginning of empty storage\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n            success := staticcall(\n                30000, // 30k gas\n                _contract, // To addr\n                x, // Inputs are stored at location x\n                0x24, // Inputs are 36 bytes long\n                x, // Store output over input (saves space)\n                0x20\n            ) // Outputs are 32 bytes long\n\n            result := mload(x) // Load the result\n        }\n    }\n}\n"
    },
    "contracts/mock/anchor/IAnchorStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * Strategies can be plugged into vaults to invest and manage their underlying funds\n *\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault\n *\n * @notice It's up to the vault to decide how much to invest from the total pool\n */\ninterface IAnchorStrategy {\n    //\n    // Events\n    //\n\n    event InitDepositStable(\n        address indexed operator,\n        uint256 indexed idx,\n        uint256 underlyingAmount,\n        uint256 ustAmount\n    );\n    event FinishDepositStable(\n        address indexed operator,\n        uint256 ustAmount,\n        uint256 aUstAmount\n    );\n    event RearrangeDepositOperation(\n        address indexed operatorFrom,\n        address indexed operatorTo,\n        uint256 indexed newIdx\n    );\n    event InitRedeemStable(\n        address indexed operator,\n        uint256 indexed idx,\n        uint256 aUstAmount\n    );\n    event FinishRedeemStable(\n        address indexed operator,\n        uint256 aUstAmount,\n        uint256 ustAmount,\n        uint256 underlyingAmount\n    );\n    event RearrangeRedeemOperation(\n        address indexed operatorFrom,\n        address indexed operatorTo,\n        uint256 indexed newIdx\n    );\n\n    //\n    // Structs\n    //\n\n    struct Operation {\n        address operator;\n        uint256 amount;\n    }\n}\n"
    },
    "contracts/mock/anchor/IEthAnchorRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface IEthAnchorRouter {\n    function initDepositStable(uint256 _amount) external returns (address);\n\n    function finishDepositStable(address _operation) external;\n\n    function initRedeemStable(uint256 _amount) external returns (address);\n\n    function finishRedeemStable(address _operation) external;\n}\n"
    },
    "contracts/echidna/Echidna_Sponsor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\nimport \"./Helper.sol\";\nimport {IVault} from \"../vault/IVault.sol\";\nimport {ERC721Holder} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\ncontract Echidna_Sponsor is Helper,ERC721Holder {\n\n    // add sponsor with valid params should never revert\n    function sponsor_should_succeed(uint256 _amount, uint256 _lockDuration) public {\n\n        _lockDuration = 2 weeks + (_lockDuration % (22 weeks));\n        emit Log(\"lockDuration\", _lockDuration);\n\n        _amount = Helper.one_to_max_uint64(_amount);\n        emit Log(\"amount\", _amount);\n\n        Helper.mint_helper(address(this), _amount);\n\n        uint256 balance_this_before = underlying.balanceOf(address(this));\n        uint256 balance_vault_before = vault.totalSponsored();\n        emit Log(\"balance of this before\", balance_this_before);\n        emit Log(\"total sponsored of vault before\", balance_vault_before);\n\n        uint256 totalshares_vault_before = vault.totalShares();\n        emit Log(\"totalShares of vault before\", totalshares_vault_before);\n\n        uint256 totalprincipal_vault_before = vault.totalPrincipal();\n        emit Log(\"totalPrincipal of vault before\", totalprincipal_vault_before);\n\n        uint256 totalunderlying_vault_before = vault.totalUnderlying();\n        emit Log(\"totalUnderlying of vault before\", totalunderlying_vault_before);\n\n        try vault.sponsor(address(underlying), _amount, _lockDuration, 5) {\n            assert(true);\n        } catch {\n            assert(false);\n        }\n\n        uint256 balance_this_after = underlying.balanceOf(address(this));\n        uint256 balance_vault_after = vault.totalSponsored();\n\n        emit Log(\"balance of this after\", balance_this_after);\n        emit Log(\"total sponsored of vault after\", balance_vault_after);\n\n        assert(balance_vault_after == balance_vault_before + _amount);\n        assert(balance_this_after == balance_this_before - _amount);\n\n        emit Log(\"totalShares of vault after\", vault.totalShares());\n        assert(vault.totalShares() == totalshares_vault_before);\n\n        emit Log(\"totalPrincipal of vault after\", vault.totalPrincipal());\n        assert(vault.totalPrincipal() == totalprincipal_vault_before);\n\n        emit Log(\"totalUnderlying of vault after\", vault.totalUnderlying());\n        assert(vault.totalUnderlying() == totalunderlying_vault_before + _amount);\n    }\n\n    // sponsor zero should always revert\n    function sponsor_with_zero_amount(uint256 lockDuration) public {\n        lockDuration = 2 weeks + (lockDuration % (22 weeks));\n        emit Log(\"lockDuration\", lockDuration);\n        emit Log(\"amount\", 0);\n        sponsor_should_revert(0, lockDuration);\n    }\n\n    // sponsor with invalid lockduration should always revert\n    function sponsor_invalid_lockduration_1(uint256 amount, uint256 lockDuration) public {\n\n        lockDuration = (lockDuration % (2 weeks));\n        emit Log(\"lockDuration\", lockDuration);\n\n        amount = Helper.one_to_max_uint64(amount);\n        emit Log(\"amount\", amount);\n\n        Helper.mint_helper(address(this), amount);\n        sponsor_should_revert(amount, lockDuration);\n    }\n\n    // sponsor with invalid lockduration should always revert\n    function sponsor_invalid_lockduration_2(uint256 amount, uint256 lockDuration) public {\n        lockDuration = 1 + 24 weeks + lockDuration;\n        emit Log(\"lockDuration\", lockDuration);\n\n        amount = Helper.one_to_max_uint64(amount);\n        emit Log(\"amount\", amount);\n\n        Helper.mint_helper(address(this), amount);\n        sponsor_should_revert(amount, lockDuration);\n    }\n\n    function sponsor_should_revert(uint256 _amount, uint256 _lockDuration) internal {\n        try vault.sponsor(address(underlying), _amount, _lockDuration, 5) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n}\n"
    },
    "contracts/strategy/yearn/YearnStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport {PercentMath} from \"../../lib/PercentMath.sol\";\nimport {ERC165Query} from \"../../lib/ERC165Query.sol\";\nimport {IStrategy} from \"../IStrategy.sol\";\nimport {CustomErrors} from \"../../interfaces/CustomErrors.sol\";\nimport {IYearnVault} from \"../../interfaces/yearn/IYearnVault.sol\";\nimport {IVault} from \"../../vault/IVault.sol\";\n\n/**\n * YearnStrategy generates yield by investing into a Yearn vault.\n *\n * @notice This strategy is syncrhonous (supports immediate withdrawals).\n */\ncontract YearnStrategy is IStrategy, AccessControl, CustomErrors {\n    using SafeERC20 for IERC20;\n    using PercentMath for uint256;\n    using ERC165Query for address;\n\n    /**\n     * Emmited when the maxLossOnWithdraw (from Yearn vault) is changed.\n     *\n     * @param maxLoss new value for max loss withdraw param\n     */\n    event StrategyMaxLossOnWithdrawChanged(uint256 maxLoss);\n\n    // yearn vault is 0x\n    error StrategyYearnVaultCannotBe0Address();\n    // max loss on withdraw from yearn > 100%\n    error StrategyMaxLossOnWithdrawTooLarge();\n\n    /// role allowed to invest/withdraw from yearn vault\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    /// role allowed to change settings such as max loss on withdraw from yearn vault\n    bytes32 public constant SETTINGS_ROLE = keccak256(\"SETTINGS_ROLE\");\n    // underlying ERC20 token\n    IERC20 public immutable underlying;\n    /// @inheritdoc IStrategy\n    address public immutable override(IStrategy) vault;\n    // yearn vault that this strategy is interacting with\n    IYearnVault public immutable yVault;\n    // multiplier for underlying convertion to shares\n    uint128 public immutable conversionMultiplier;\n    // used when withdrawing from yearn vault, 1 = 0.01%\n    uint128 public maxLossOnWithdraw = 1;\n\n    /**\n     * @param _vault address of the vault that will use this strategy\n     * @param _admin address of the administrator account for this strategy\n     * @param _yVault address of the yearn vault that this strategy is using\n     * @param _underlying address of the underlying token\n     */\n    constructor(\n        address _vault,\n        address _admin,\n        address _yVault,\n        address _underlying\n    ) {\n        if (_admin == address(0)) revert StrategyAdminCannotBe0Address();\n        if (_yVault == address(0)) revert StrategyYearnVaultCannotBe0Address();\n        if (_underlying == address(0))\n            revert StrategyUnderlyingCannotBe0Address();\n\n        if (!_vault.doesContractImplementInterface(type(IVault).interfaceId))\n            revert StrategyNotIVault();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n        _setupRole(SETTINGS_ROLE, _admin);\n        _setupRole(MANAGER_ROLE, _vault);\n\n        vault = _vault;\n        yVault = IYearnVault(_yVault);\n        conversionMultiplier = uint128(10**yVault.decimals());\n\n        underlying = IERC20(_underlying);\n\n        underlying.approve(_yVault, type(uint256).max);\n    }\n\n    //\n    // Modifiers\n    //\n\n    modifier onlyManager() {\n        if (!hasRole(MANAGER_ROLE, msg.sender))\n            revert StrategyCallerNotManager();\n        _;\n    }\n\n    modifier onlySettings() {\n        if (!hasRole(SETTINGS_ROLE, msg.sender))\n            revert StrategyCallerNotSettings();\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender))\n            revert StrategyCallerNotAdmin();\n        _;\n    }\n\n    /**\n     * Transfers administrator rights for the Strategy to another account,\n     * revoking current admin roles and setting up the roles for the new admin.\n     *\n     * @notice Can only be called by the account with the ADMIN role.\n     *\n     * @param _newAdmin The new Strategy admin account.\n     */\n    function transferAdminRights(address _newAdmin) external onlyAdmin {\n        if (_newAdmin == address(0x0)) revert StrategyAdminCannotBe0Address();\n        if (_newAdmin == msg.sender)\n            revert StrategyCannotTransferAdminRightsToSelf();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _newAdmin);\n        _setupRole(SETTINGS_ROLE, _newAdmin);\n\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _revokeRole(SETTINGS_ROLE, msg.sender);\n    }\n\n    /**\n     * Yearn strategy is synchronous meaning it supports immediate withdrawals.\n     *\n     * @return true always\n     */\n    function isSync() external pure override(IStrategy) returns (bool) {\n        return true;\n    }\n\n    /// @inheritdoc IStrategy\n    function hasAssets()\n        external\n        view\n        virtual\n        override(IStrategy)\n        returns (bool)\n    {\n        return _getShares() != 0;\n    }\n\n    /// @inheritdoc IStrategy\n    function investedAssets()\n        external\n        view\n        virtual\n        override(IStrategy)\n        returns (uint256)\n    {\n        return _sharesToUnderlying(_getShares()) + _getUnderlyingBalance();\n    }\n\n    /// @inheritdoc IStrategy\n    function invest() external virtual override(IStrategy) onlyManager {\n        uint256 beforeBalance = _getUnderlyingBalance();\n        if (beforeBalance == 0) revert StrategyNoUnderlying();\n\n        yVault.deposit(type(uint256).max, address(this));\n\n        uint256 afterBalance = _getUnderlyingBalance();\n\n        emit StrategyInvested(beforeBalance - afterBalance);\n    }\n\n    /// @inheritdoc IStrategy\n    function withdrawToVault(uint256 _amount)\n        external\n        virtual\n        override(IStrategy)\n        onlyManager\n    {\n        if (_amount == 0) revert StrategyAmountZero();\n        uint256 uninvestedUnderlying = _getUnderlyingBalance();\n\n        if (_amount > uninvestedUnderlying) {\n            uint256 sharesToWithdraw = _underlyingToShares(\n                _amount - uninvestedUnderlying\n            );\n\n            if (sharesToWithdraw > _getShares())\n                revert StrategyNotEnoughShares();\n\n            // burn shares and withdraw required underlying to strategy\n            uint256 withdrawnFromYearn = yVault.withdraw(\n                sharesToWithdraw,\n                address(this),\n                maxLossOnWithdraw\n            );\n\n            _amount = uninvestedUnderlying + withdrawnFromYearn;\n        }\n\n        // transfer underlying to vault\n        underlying.safeTransfer(vault, _amount);\n\n        emit StrategyWithdrawn(_amount);\n    }\n\n    /**\n     * Sets the max loss percentage used when withdrawing from the Yearn vault.\n     *\n     * @notice Can only be called by the account with settings role.\n     *\n     * @param _maxLoss The max loss percentage to use when withdrawing from the Yearn vault. Value of 1 equals 0.01% loss.\n     */\n    function setMaxLossOnWithdraw(uint128 _maxLoss) external onlySettings {\n        if (_maxLoss > 10000) revert StrategyMaxLossOnWithdrawTooLarge();\n\n        maxLossOnWithdraw = _maxLoss;\n\n        emit StrategyMaxLossOnWithdrawChanged(_maxLoss);\n    }\n\n    /**\n     * Get the underlying balance of the strategy.\n     *\n     * @return underlying balance of the strategy\n     */\n    function _getUnderlyingBalance() internal view returns (uint256) {\n        return underlying.balanceOf(address(this));\n    }\n\n    /**\n     * Get the number of yearn vault shares owned by the strategy.\n     *\n     * @return shares owned by the strategy\n     */\n    function _getShares() internal view returns (uint256) {\n        return yVault.balanceOf(address(this));\n    }\n\n    /**\n     * Calculates the value of yearn vault shares in underlying.\n     *\n     * @param _shares number of yearn vault shares\n     *\n     * @return underlying value of yearn vault shares\n     */\n    function _sharesToUnderlying(uint256 _shares)\n        internal\n        view\n        returns (uint256)\n    {\n        return (_shares * yVault.pricePerShare()) / conversionMultiplier;\n    }\n\n    /**\n     * Calculates the amount of underlying in number of yearn vault shares.\n     *\n     * @param _underlying amount of underlying\n     *\n     * @return number of yearn vault shares\n     */\n    function _underlyingToShares(uint256 _underlying)\n        internal\n        view\n        returns (uint256)\n    {\n        return (_underlying * conversionMultiplier) / yVault.pricePerShare();\n    }\n}\n"
    },
    "contracts/interfaces/yearn/IYearnVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.10;\n\ninterface IYearnVault {\n    function deposit(uint256 amount, address recipient)\n        external\n        returns (uint256);\n\n    function pricePerShare() external view returns (uint256);\n\n    function withdraw(\n        uint256 maxShares,\n        address recipient,\n        uint256 maxLoss\n    ) external returns (uint256);\n\n    function totalAssets() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function decimals() external view returns (uint256);\n}\n"
    },
    "contracts/mock/yearn/MockYearnVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {MockERC20} from \"./../MockERC20.sol\";\n\nimport {IYearnVault} from \"../../interfaces/yearn/IYearnVault.sol\";\n\ncontract MockYearnVault is IYearnVault {\n    using SafeERC20 for ERC20;\n\n    ERC20 immutable underlying;\n    MockERC20 immutable vaultShares;\n\n    uint256 public spyForMaxLossWithdrawParam;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _underlying\n    ) {\n        underlying = ERC20(_underlying);\n        vaultShares = new MockERC20(_name, _symbol, underlying.decimals(), 0);\n    }\n\n    function deposit(uint256 amount, address recipient)\n        public\n        returns (uint256)\n    {\n        require(amount > 0);\n\n        uint256 newAmount = amount;\n\n        if (amount == type(uint256).max)\n            newAmount = underlying.balanceOf(msg.sender);\n\n        underlying.safeTransferFrom(msg.sender, address(this), newAmount);\n\n        return _issueSharesForAmount(recipient, newAmount);\n    }\n\n    function pricePerShare() public view returns (uint256) {\n        uint256 totalSupply = vaultShares.totalSupply();\n        if (totalSupply == 0) return 10**underlying.decimals();\n        return\n            (10**underlying.decimals() * _getUnderlyingBalance()) / totalSupply;\n    }\n\n    function withdraw(\n        uint256 maxShares,\n        address recipient,\n        uint256 _maxLoss\n    ) public returns (uint256) {\n        require(maxShares > 0);\n\n        // spy on _maxLoss param\n        spyForMaxLossWithdrawParam = _maxLoss;\n\n        uint256 value = (maxShares * pricePerShare()) /\n            10**underlying.decimals();\n\n        vaultShares.burn(msg.sender, maxShares);\n\n        underlying.transfer(recipient, value);\n\n        return value;\n    }\n\n    function totalAssets() external view returns (uint256) {\n        return underlying.balanceOf(address(this));\n    }\n\n    ///////////////// INTERNAL FUNCTIONS //////////////////////////////\n\n    function _issueSharesForAmount(address to, uint256 amount)\n        internal\n        returns (uint256)\n    {\n        uint256 shares;\n        uint256 totalSupply = vaultShares.totalSupply();\n        if (totalSupply > 0) {\n            shares = (amount * totalSupply) / _getUnderlyingBalance(); // dev: no free funds\n        } else {\n            shares = amount;\n        }\n\n        // Mint new shares\n        vaultShares.mint(to, shares);\n\n        return shares;\n    }\n\n    function _getUnderlyingBalance() internal view returns (uint256) {\n        return underlying.balanceOf(address(this));\n    }\n\n    function balanceOf(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return vaultShares.balanceOf(account);\n    }\n\n    function decimals() external view returns (uint256) {\n        return vaultShares.decimals();\n    }\n}\n"
    },
    "contracts/mock/MockStrategySync.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport {IStrategy} from \"../strategy/IStrategy.sol\";\nimport {CustomErrors} from \"../interfaces/CustomErrors.sol\";\n\ncontract MockStrategySync is IStrategy, AccessControl, CustomErrors {\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n\n    address public immutable override(IStrategy) vault;\n\n    IERC20 public immutable underlying;\n\n    modifier onlyManager() {\n        if (!hasRole(MANAGER_ROLE, msg.sender))\n            revert StrategyCallerNotManager();\n        _;\n    }\n\n    constructor(address _vault, IERC20 _underlying) {\n        vault = _vault;\n        underlying = _underlying;\n    }\n\n    function isSync() external pure virtual override(IStrategy) returns (bool) {\n        return true;\n    }\n\n    function invest() external virtual override(IStrategy) {}\n\n    function withdrawToVault(uint256 amount) external override(IStrategy) {\n        underlying.transfer(vault, amount);\n    }\n\n    function investedAssets()\n        external\n        view\n        override(IStrategy)\n        returns (uint256)\n    {\n        return underlying.balanceOf(address(this));\n    }\n\n    function hasAssets() external view override(IStrategy) returns (bool) {\n        return underlying.balanceOf(address(this)) > 0;\n    }\n}\n"
    },
    "contracts/test/strategy/TestAnchorUSTStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nimport {AnchorStrategy} from \"../../mock/anchor/AnchorStrategy.sol\";\nimport {IExchangeRateFeeder} from \"../../mock/anchor/IExchangeRateFeeder.sol\";\n\n/**\n * AnchorUSTStrategy for testnet.\n * Since aUST/UST chainlink does not exist on testnet, we use EthAnchorExchangeRateFeeder\n * to get aUST/UST exchange rate.\n */\ncontract TestAnchorUSTStrategy is AnchorStrategy {\n    IExchangeRateFeeder public exchangeRateFeeder;\n\n    /**\n     * @notice _aUstToUstFeed is a fake chainlink feed, it is used to just\n     * inhert constructor of USTStrategy\n     */\n    constructor(\n        address _vault,\n        address _ethAnchorRouter,\n        AggregatorV3Interface _aUstToUstFeed,\n        IExchangeRateFeeder _exchangeRateFeeder,\n        IERC20 _ustToken,\n        IERC20 _aUstToken,\n        address _owner\n    )\n        AnchorStrategy(\n            _vault,\n            _ethAnchorRouter,\n            _aUstToUstFeed,\n            _ustToken,\n            _aUstToken,\n            _owner\n        )\n    {\n        exchangeRateFeeder = _exchangeRateFeeder;\n        _aUstToUstFeedMultiplier = 1e18;\n    }\n\n    // get aUST/UST exchange rate from eth anchor ExchangeRateFeeder contract\n    function _aUstToUstExchangeRate() internal view override returns (uint256) {\n        return exchangeRateFeeder.exchangeRateOf(address(ustToken), true);\n    }\n}\n"
    },
    "contracts/mock/anchor/IExchangeRateFeeder.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\ninterface IExchangeRateFeeder {\n    function exchangeRateOf(address _token, bool _simulate)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "contracts/mock/MockChainlinkPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockChainlinkPriceFeed is AggregatorV3Interface {\n    uint8 public override decimals;\n\n    uint80 roundId_;\n    int256 answer_;\n    uint256 startedAt_;\n    uint256 updatedAt_;\n    uint80 answeredInRound_;\n\n    constructor(uint8 _decimals) {\n        decimals = _decimals;\n    }\n\n    function description() external pure override returns (string memory) {\n        return \"\";\n    }\n\n    function version() external pure override returns (uint256) {\n        return 1;\n    }\n\n    function getRoundData(\n        uint80 /* _roundId */\n    )\n        external\n        pure\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        // return all zero because this function not used\n        return (0, 0, 0, 0, 0);\n    }\n\n    function setAnswer(int256 answer) external {\n        roundId_ = 10;\n        answer_ = answer;\n        startedAt_ = block.timestamp;\n        updatedAt_ = block.timestamp;\n        answeredInRound_ = 10;\n    }\n\n    function setLatestRoundData(\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    ) external {\n        roundId_ = roundId;\n        answer_ = answer;\n        startedAt_ = startedAt;\n        updatedAt_ = updatedAt;\n        answeredInRound_ = answeredInRound;\n    }\n\n    function latestRoundData()\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        return (roundId_, answer_, startedAt_, updatedAt_, answeredInRound_);\n    }\n}\n"
    },
    "contracts/mock/MockCurvePool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/curve/ICurve.sol\";\n\ncontract MockCurve is ICurve, Ownable {\n    using SafeERC20 for IERC20;\n\n    mapping(int128 => IERC20) public tokens;\n    mapping(int128 => mapping(int128 => uint256)) public rate;\n\n    function addToken(int128 i, IERC20 token) external onlyOwner {\n        tokens[i] = token;\n    }\n\n    function updateRate(\n        int128 i,\n        int128 j,\n        uint256 _rate\n    ) external {\n        rate[i][j] = _rate;\n    }\n\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external override returns (uint256) {\n        tokens[i].safeTransferFrom(msg.sender, address(this), dx);\n        uint256 amount = (dx * 1e18) / rate[i][j];\n        tokens[j].safeTransfer(msg.sender, amount);\n        require(amount >= min_dy);\n        return amount;\n    }\n\n    function coins(uint256 i) external view override(ICurve) returns (address) {\n        return address(tokens[int128(uint128(i))]);\n    }\n\n    function withdraw(IERC20 token, uint256 amount) external onlyOwner {\n        token.safeTransfer(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/test/TestCurveSwapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {CurveSwapper} from \"../vault/CurveSwapper.sol\";\nimport {ICurve} from \"../interfaces/curve/ICurve.sol\";\n\ncontract TestCurveSwapper is CurveSwapper {\n    address private _underlying;\n\n    constructor(address __underlying, SwapPoolParam[] memory _swapPoolsParams) {\n        _underlying = __underlying;\n        _addPools(_swapPoolsParams);\n    }\n\n    function getUnderlying()\n        public\n        view\n        override(CurveSwapper)\n        returns (address)\n    {\n        return _underlying;\n    }\n\n    function test_swapIntoUnderlying(address _token, uint256 _amount, uint256 _slippage) external {\n        _swapIntoUnderlying(_token, _amount, _slippage);\n    }\n\n    function test_swapFromUnderlying(address _token, uint256 _amount, uint256 _slippage) external {\n        _swapFromUnderlying(_token, _amount, _slippage);\n    }\n\n    function test_addPool(SwapPoolParam memory _param) external {\n        _addPool(_param);\n    }\n\n    function test_removePool(address _inputToken) external {\n        _removePool(_inputToken);\n    }\n}\n"
    },
    "contracts/mock/MockStrategyAsync.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {MockStrategySync} from \"./MockStrategySync.sol\";\n\ncontract MockStrategyAsync is MockStrategySync {\n    constructor(address _vault, IERC20 _underlying)\n        MockStrategySync(_vault, _underlying)\n    {}\n\n    function isSync() external pure override(MockStrategySync) returns (bool) {\n        return false;\n    }\n}\n"
    },
    "contracts/mock/anchor/MockEthAnchorRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./IEthAnchorRouter.sol\";\n\ncontract MockEthAnchorRouter is IEthAnchorRouter {\n    using SafeERC20 for IERC20;\n\n    IERC20 public ustToken;\n    IERC20 public aUstToken;\n\n    address public pendingOperator;\n    mapping(address => uint256) public depositOperations;\n    mapping(address => uint256) public redeemOperations;\n    mapping(address => uint256) public depositFinishResults;\n    mapping(address => uint256) public redeemFinishResults;\n\n    constructor(IERC20 _ustToken, IERC20 _aUstToken) {\n        require(address(_ustToken) != address(0), \"invalid UST token\");\n        require(address(_aUstToken) != address(0), \"invalid aUST token\");\n\n        ustToken = _ustToken;\n        aUstToken = _aUstToken;\n    }\n\n    function addPendingOperator(address _operator) external {\n        require(_operator != address(0), \"invalid operator\");\n\n        pendingOperator = _operator;\n    }\n\n    function initDepositStable(uint256 _amount)\n        external\n        override(IEthAnchorRouter)\n        returns (address operator)\n    {\n        require(\n            pendingOperator != address(0),\n            \"pendingOperator cannot be null address\"\n        );\n        ustToken.safeTransferFrom(msg.sender, address(this), _amount);\n        depositOperations[pendingOperator] = _amount;\n        operator = pendingOperator;\n        pendingOperator = address(0);\n    }\n\n    function notifyDepositResult(address _operation, uint256 _amount) external {\n        require(depositOperations[_operation] != 0);\n        aUstToken.safeTransferFrom(msg.sender, address(this), _amount);\n        depositOperations[_operation] = 0;\n        depositFinishResults[_operation] = _amount;\n    }\n\n    function finishDepositStable(address _operation)\n        external\n        override(IEthAnchorRouter)\n    {\n        aUstToken.safeTransfer(msg.sender, depositFinishResults[_operation]);\n        depositFinishResults[_operation] = 0;\n    }\n\n    function initRedeemStable(uint256 _amount)\n        external\n        override(IEthAnchorRouter)\n        returns (address operator)\n    {\n        require(pendingOperator != address(0));\n        aUstToken.safeTransferFrom(msg.sender, address(this), _amount);\n        redeemOperations[pendingOperator] = _amount;\n        operator = pendingOperator;\n        pendingOperator = address(0);\n    }\n\n    function notifyRedeemResult(address _operation, uint256 _amount) external {\n        require(redeemOperations[_operation] != 0);\n        ustToken.safeTransferFrom(msg.sender, address(this), _amount);\n        redeemOperations[_operation] = 0;\n        redeemFinishResults[_operation] = _amount;\n    }\n\n    function finishRedeemStable(address _operation) external override {\n        ustToken.safeTransfer(msg.sender, redeemFinishResults[_operation]);\n        redeemFinishResults[_operation] = 0;\n    }\n}\n"
    },
    "contracts/echidna/Echidna_Valid_Deposit.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\nimport \"./Helper.sol\";\nimport {IVault} from \"../vault/IVault.sol\";\n\ncontract Echidna_Valid_Deposit is Helper {\n\n    // deposit with valid params should always succeed \n    function deposit_valid_params(IVault.DepositParams memory _params) public {\n\n        _params.lockDuration = 2 weeks + (_params.lockDuration % (22 weeks));\n        emit Log(\"lockDuration\", _params.lockDuration);\n\n        _params.amount = Helper.one_to_max_uint64(_params.amount); \n        emit Log(\"amount\", _params.amount);\n\n        _params.inputToken = address(underlying);\n\n        Helper.mint_helper(address(this), _params.amount);\n\n        uint256 balance_this_before = underlying.balanceOf(address(this));\n        uint256 balance_vault_before = vault.totalUnderlying();\n        emit Log(\"balance of this before\", balance_this_before);\n        emit Log(\"balance of vault before\", balance_vault_before);\n\n        uint256 totalshares_vault_before = vault.totalShares();\n        emit Log(\"totalShares of vault before\", totalshares_vault_before);\n\n        uint256 totalprincipal_vault_before = vault.totalPrincipal();\n        emit Log(\"totalPrincipal of vault before\", totalprincipal_vault_before);\n\n        populate_claims(10000, _params.claims);\n\n        deposit_should_succeed(_params);\n\n        uint256 balance_this_after = underlying.balanceOf(address(this));\n        uint256 balance_vault_after = vault.totalUnderlying();\n\n        emit Log(\"balance of this after\", balance_this_after);\n        emit Log(\"balance of vault after\", balance_vault_after);\n\n        assert(balance_vault_after == balance_vault_before + _params.amount);\n        assert(balance_this_after == balance_this_before - _params.amount);\n\n        emit Log(\"totalShares of vault after\", vault.totalShares());\n        assert(vault.totalShares() == totalshares_vault_before + (_params.amount * (10**18)));\n\n        emit Log(\"totalPrincipal of vault after\", vault.totalPrincipal());\n        assert(vault.totalPrincipal() == totalprincipal_vault_before + _params.amount);\n    }\n}\n"
    },
    "contracts/echidna/Echidna_Invalid_Withdraw.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\nimport \"./Helper.sol\";\nimport {IVault} from \"../vault/IVault.sol\";\nimport {ERC721Holder} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\ncontract Echidna_Invalid_Withdraw is Helper,ERC721Holder {\n\n    uint256 amount;\n    uint64 lockDuration;\n    uint256[] depositIds = [0];\n    uint256 time;\n    bool init = false;\n\n    // changes the deposit\n    function change_deposit(IVault.DepositParams memory _params) public {\n\n        if (init) {\n            return;\n        }\n\n        _params.lockDuration = 2 weeks + (_params.lockDuration % (22 weeks));\n        lockDuration = _params.lockDuration;\n        emit Log(\"lockDuration\", lockDuration);\n\n        _params.amount = Helper.one_to_max_uint64(_params.amount);\n        amount = _params.amount;\n        emit Log(\"amount\", amount);\n\n        Helper.mint_helper(address(this), amount);\n\n        populate_claims(10000, _params.claims);\n        depositIds = vault.deposit(_params);\n\n        time = block.timestamp;\n        init = true;\n    }\n\n    // withdraw with less than was deposited should always succeed if\n    // lockduration has passed, else always revert\n    function withdraw_all() public {\n\n        if (!init) {\n            withdraw_should_revert(address(this), depositIds);\n            return;\n        }\n\n        emit Log(\"amount\", amount);\n        emit Log(\"lockDuration\", lockDuration);\n        emit Log(\"time\", time);\n\n        uint256 balance_this_before = underlying.balanceOf(address(this));\n        uint256 balance_vault_before = vault.totalUnderlying();\n\n        emit Log(\"balance of this before\", balance_this_before);\n        emit Log(\"balance of vault before\", balance_vault_before);\n\n        uint256 totalshares_vault_before = vault.totalShares();\n        emit Log(\"totalShares of vault before\", totalshares_vault_before);\n\n        uint256 totalprincipal_vault_before = vault.totalPrincipal();\n        emit Log(\"totalPrincipal of vault before\", totalprincipal_vault_before);\n\n        if (block.timestamp > time + lockDuration) {\n            withdraw_should_succeed(address(this), depositIds);\n            init = false;\n\n            uint256 balance_this_after = underlying.balanceOf(address(this));\n            uint256 balance_vault_after = vault.totalUnderlying();\n\n            emit Log(\"balance of this after\", balance_this_after);\n            emit Log(\"balance of vault after\", balance_vault_after);\n\n            assert(balance_vault_after == balance_vault_before - amount);\n            assert(balance_this_after == balance_this_before + amount);\n\n            emit Log(\"totalShares of vault after\", vault.totalShares());\n            assert(vault.totalShares() == totalshares_vault_before - (amount * (10**18)));\n\n            emit Log(\"totalPrincipal of vault after\", vault.totalPrincipal());\n            assert(vault.totalPrincipal() == totalprincipal_vault_before - amount);\n        } else {\n            withdraw_should_revert(address(this), depositIds);\n        }\n    }\n\n    function force_withdraw_all() public {\n\n        if (!init) {\n            withdraw_should_revert(address(this), depositIds);\n            return;\n        }\n\n        emit Log(\"amount\", amount);\n        emit Log(\"lockDuration\", lockDuration);\n        emit Log(\"time\", time);\n\n        uint256 balance_this_before = underlying.balanceOf(address(this));\n        uint256 balance_vault_before = vault.totalUnderlying();\n\n        emit Log(\"balance of this before\", balance_this_before);\n        emit Log(\"balance of vault before\", balance_vault_before);\n\n        if (block.timestamp > time + lockDuration) {\n            try vault.forceWithdraw(address(this), depositIds) {\n                assert(true);\n            } catch {\n                assert(false);\n            }\n\n            init = false;\n\n            uint256 balance_this_after = underlying.balanceOf(address(this));\n            uint256 balance_vault_after = vault.totalUnderlying();\n\n            emit Log(\"balance of this after\", balance_this_after);\n            emit Log(\"balance of vault after\", balance_vault_after);\n\n            assert(balance_vault_after == balance_vault_before - amount);\n            assert(balance_this_after == balance_this_before + amount);\n        } else {\n            try vault.forceWithdraw(address(this), depositIds) {\n                assert(false);\n            } catch {\n                assert(true);\n            }\n        }\n    }\n}\n"
    },
    "contracts/echidna/Echidna_Invalid_Deposit.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\nimport \"./Helper.sol\";\nimport {IVault} from \"../vault/IVault.sol\";\n\ncontract Echidna_Invalid_Deposit is Helper {\n\n    // deposit zero should always revert\n    function deposit_with_zero_amount(IVault.DepositParams memory _params) public {\n        _params.lockDuration = 2 weeks + (_params.lockDuration % (22 weeks));\n        emit Log(\"lockDuration\", _params.lockDuration);\n\n        _params.amount = 0;\n        emit Log(\"amount\", _params.amount);\n\n        Helper.mint_helper(address(this), _params.amount);\n        populate_claims(10000, _params.claims);\n        _params.inputToken = address(underlying);\n        deposit_should_revert(_params);\n    }\n\n    // deposit with any claim percentage zero should always revert\n    function deposit_claim_pct_zero(IVault.DepositParams memory _params) public {\n        _params.lockDuration = 2 weeks + (_params.lockDuration % (22 weeks));\n        emit Log(\"lockDuration\", _params.lockDuration);\n\n        _params.amount = Helper.one_to_max_uint64(_params.amount);\n        emit Log(\"amount\", _params.amount);\n\n        Helper.mint_helper(address(this), _params.amount);\n        populate_claims(10000, _params.claims);\n        _params.claims[_params.amount % _params.claims.length].pct = 0;\n        _params.inputToken = address(underlying);\n        deposit_should_revert(_params);\n    }\n\n    // deposit with invalid lockduration should always revert\n    function deposit_invalid_lockduration_1(IVault.DepositParams memory _params) public {\n\n        _params.lockDuration = (_params.lockDuration % (2 weeks));\n        emit Log(\"lockDuration\", _params.lockDuration);\n\n        _params.amount = Helper.one_to_max_uint64(_params.amount);\n        emit Log(\"amount\", _params.amount);\n\n        Helper.mint_helper(address(this), _params.amount);\n        populate_claims(10000, _params.claims);\n        _params.inputToken = address(underlying);\n        deposit_should_revert(_params);\n    }\n\n    // deposit with invalid lockduration should always revert\n    function deposit_invalid_lockduration_2(IVault.DepositParams memory _params) public {\n        _params.lockDuration = 1 + 24 weeks + _params.lockDuration;\n        emit Log(\"lockDuration\", _params.lockDuration);\n\n        _params.amount = Helper.one_to_max_uint64(_params.amount);\n        emit Log(\"amount\", _params.amount);\n\n        Helper.mint_helper(address(this), _params.amount);\n        populate_claims(10000, _params.claims);\n        _params.inputToken = address(underlying);\n        deposit_should_revert(_params);\n    }\n\n    // deposit with claims not totalling exactly 100 percent should always revert\n    function deposit_claims_more_than_100(IVault.DepositParams memory _params) public {\n\n        _params.lockDuration = 2 weeks + (_params.lockDuration % (22 weeks));\n        emit Log(\"lockDuration\", _params.lockDuration);\n\n        _params.amount = Helper.one_to_max_uint64(_params.amount); \n        emit Log(\"amount\", _params.amount);\n\n        Helper.mint_helper(address(this), _params.amount);\n        populate_claims(10000 + (uint16(_params.amount) % (type(uint16).max - 10000)), _params.claims);\n        _params.inputToken = address(underlying);\n        deposit_should_revert(_params);\n    }\n\n    // deposit with claims not totalling exactly 100 percent should always revert\n    function deposit_claims_less_than_100(IVault.DepositParams memory _params) public {\n        _params.lockDuration = 2 weeks + (_params.lockDuration % (22 weeks));\n        emit Log(\"lockDuration\", _params.lockDuration);\n\n        _params.amount = Helper.one_to_max_uint64(_params.amount); \n        emit Log(\"amount\", _params.amount);\n\n        Helper.mint_helper(address(this), _params.amount);\n        populate_claims(uint16(_params.amount) % 9999, _params.claims);\n        _params.inputToken = address(underlying);\n        deposit_should_revert(_params);\n    }\n\n    // deposit with input token not swappable should always revert\n    function deposit_swappable_no_pool(IVault.DepositParams memory _params) public {\n        _params.lockDuration = 2 weeks + (_params.lockDuration % (22 weeks));\n        emit Log(\"lockDuration\", _params.lockDuration);\n\n        _params.amount = Helper.one_to_max_uint64(_params.amount);\n        emit Log(\"amount\", _params.amount);\n\n        require(_params.inputToken != address(underlying));\n\n        MockERC20(_params.inputToken).mint(address(this), _params.amount);\n        MockERC20(_params.inputToken).approve(address(vault), _params.amount);\n        populate_claims(10000, _params.claims);\n        deposit_should_revert(_params);\n    }\n}\n"
    },
    "contracts/echidna/Echidna_AnchorStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\nimport \"./Helper.sol\";\n\ncontract Echidna_AnchorStrategy is Helper {\n\n    // invest should revert when not the manager\n    function invest_not_manager() public {\n        try strategy.invest() {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n\n    // finishDepositStable should revert when not the manager\n    function finishDepositStable_not_manager(uint256 idx) public {\n        try strategy.finishDepositStable(idx) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n\n    // initRedeemStable should revert when not the manager\n    function initRedeemStable_not_manager(uint256 ustBalance) public {\n        try strategy.initRedeemStable(ustBalance) {\n            assert(false);\n        } catch {\n            assert(true);\n        }\n    }\n\n    // given some vault balance after running updateInvested approx\n    // 90% should be moved to strategy.\n    function updateInvested(uint256 amount) public {\n        Helper.mint_helper(address(vault), 12*10**18 + Helper.one_to_max_uint64(amount));\n        uint256 balance_vault_before = vault.totalUnderlying();\n        emit Log(\"balance of vault before\", balance_vault_before);\n        uint256 balance_strategy_before = underlying.balanceOf(address(strategy));\n        emit Log(\"balance of strategy before\", balance_strategy_before);\n\n        emit Log(\"strategy.investedAssets()\", strategy.investedAssets());\n\n        try vault.updateInvested() {\n            assert(true);\n        } catch {\n            assert(false);\n        }\n\n        uint256 balance_vault_after = underlying.balanceOf(address(vault));\n        emit Log(\"balance of vault after\", balance_vault_after);\n        uint256 balance_strategy_after = underlying.balanceOf(address(strategy));\n        emit Log(\"balance of strategy after\", balance_strategy_after);\n\n        assert(balance_vault_after * 8 < balance_strategy_after);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}