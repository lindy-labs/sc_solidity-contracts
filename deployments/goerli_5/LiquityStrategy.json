{"metadata":"{\"compiler\":{\"version\":\"0.8.10\"},\"sources\":{\"contracts/strategy/liquity/LiquityStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport {PercentMath} from \\\"../../lib/PercentMath.sol\\\";\\nimport {IStrategy} from \\\"../IStrategy.sol\\\";\\nimport {CustomErrors} from \\\"../../interfaces/CustomErrors.sol\\\";\\nimport {IVault} from \\\"../../vault/IVault.sol\\\";\\nimport {IStabilityPool} from \\\"../../interfaces/liquity/IStabilityPool.sol\\\";\\nimport {ERC165Query} from \\\"../../lib/ERC165Query.sol\\\";\\nimport {ICurveExchange} from \\\"../../interfaces/curve/ICurveExchange.sol\\\";\\n\\n/***\\n * Liquity Strategy generates yield by investing LUSD assets into Liquity Stability Pool contract.\\n * Stability pool gives out LQTY & ETH as rewards for liquidity providers.\\n * The LQTY rewards are normal yield rewards\\n * But the Stability Pool achievs ETH rewards by Liquidating Troves using the LUSD we deposited.\\n * So our balance of LUSD goes down and we get an 1.1x (or higher) value of ETH. In short, we make a 10% profit in ETH everytime our LUSD is used for liquidation by the stability pool\\n * the harvest method here withdraws those LQTY & ETH rewards, swaps them into LUSD and then deposits them back to the stability pool.\\n * we should make sure to harvest at regular intervals because if the value of ETH rewards goes below 1x of the LUSD used for liquidation then we will make a net loss on our LUSD.\\n * the contract uses 0xapi for swapping the tokens.\\n */\\ncontract LiquityStrategy is\\n    IStrategy,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    CustomErrors\\n{\\n    using PercentMath for uint256;\\n    using ERC165Query for address;\\n\\n    error StrategyCallerNotKeeper();\\n    error StrategyETHSwapFailed();\\n    error StrategyKeeperCannotBe0Address();\\n    error StrategyLQTYSwapFailed();\\n    error StrategyNotEnoughETH();\\n    error StrategyNotEnoughLQTY();\\n    error StrategyNothingToReinvest();\\n    error StrategyStabilityPoolCannotBeAddressZero();\\n    error StrategySwapTargetCannotBe0Address();\\n    error StrategySwapTargetNotAllowed();\\n    error StrategyTokenApprovalFailed(address token);\\n    error StrategyTokenTransferFailed(address token);\\n    error StrategyInsufficientOutputAmount();\\n    error StrategyYieldTokenCannotBe0Address();\\n\\n    event StrategyReinvested(uint256 amountInLUSD);\\n\\n    address public constant WETH_CURVE_POOL =\\n        0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\\n    address public constant LUSD_CURVE_POOL =\\n        0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA;\\n    address public constant CURVE_ROUTER =\\n        0x81C46fECa27B31F3ADC2b91eE4be9717d1cd3DD7;\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    // role allowed to invest/withdraw assets to/from the strategy (vault)\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    // role allowed to call harvest() and reinvest()\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n    // role for managing swap targets whitelist\\n    bytes32 public constant SETTINGS_ROLE = keccak256(\\\"SETTINGS_ROLE\\\");\\n\\n    IERC20 public underlying; // LUSD token\\n    /// @inheritdoc IStrategy\\n    address public override(IStrategy) vault;\\n    IStabilityPool public stabilityPool;\\n    IERC20 public lqty; // reward token\\n    mapping(address => bool) public allowedSwapTargets; // whitelist of swap targets\\n\\n    //\\n    // Modifiers\\n    //\\n\\n    modifier onlyManager() {\\n        if (!hasRole(MANAGER_ROLE, msg.sender))\\n            revert StrategyCallerNotManager();\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        if (!hasRole(KEEPER_ROLE, msg.sender)) revert StrategyCallerNotKeeper();\\n        _;\\n    }\\n\\n    modifier onlySettings() {\\n        if (!hasRole(SETTINGS_ROLE, msg.sender))\\n            revert StrategyCallerNotSettings();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender))\\n            revert StrategyCallerNotAdmin();\\n        _;\\n    }\\n\\n    //\\n    // Initialize method (constructor alternative for proxy contracts)\\n    //\\n\\n    function initialize(\\n        address _vault,\\n        address _admin,\\n        address _stabilityPool,\\n        address _lqty,\\n        address _underlying,\\n        address _keeper\\n    ) public initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        if (_admin == address(0)) revert StrategyAdminCannotBe0Address();\\n        if (_lqty == address(0)) revert StrategyYieldTokenCannotBe0Address();\\n        if (_stabilityPool == address(0))\\n            revert StrategyStabilityPoolCannotBeAddressZero();\\n        if (_underlying == address(0))\\n            revert StrategyUnderlyingCannotBe0Address();\\n        if (!_vault.doesContractImplementInterface(type(IVault).interfaceId))\\n            revert StrategyNotIVault();\\n        if (_keeper == address(0)) revert StrategyKeeperCannotBe0Address();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(KEEPER_ROLE, _admin);\\n        _grantRole(SETTINGS_ROLE, _admin);\\n        _grantRole(MANAGER_ROLE, _vault);\\n        _grantRole(KEEPER_ROLE, _keeper);\\n\\n        vault = _vault;\\n        underlying = IERC20(_underlying);\\n        stabilityPool = IStabilityPool(_stabilityPool);\\n        lqty = IERC20(_lqty);\\n\\n        if (!underlying.approve(_stabilityPool, type(uint256).max)) {\\n            revert StrategyTokenApprovalFailed(_underlying);\\n        }\\n    }\\n\\n    /**\\n     * Transfers administrator rights for the Strategy to another account,\\n     * revoking current admin roles and setting up the roles for the new admin.\\n     *\\n     * @notice Can only be called by the account with the ADMIN role.\\n     *\\n     * @param _newAdmin The new Strategy admin account.\\n     */\\n    function transferAdminRights(address _newAdmin) external onlyAdmin {\\n        if (_newAdmin == address(0x0)) revert StrategyAdminCannotBe0Address();\\n\\n        if (_newAdmin == msg.sender)\\n            revert StrategyCannotTransferAdminRightsToSelf();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _newAdmin);\\n        _grantRole(KEEPER_ROLE, _newAdmin);\\n        _grantRole(SETTINGS_ROLE, _newAdmin);\\n\\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _revokeRole(KEEPER_ROLE, msg.sender);\\n        _revokeRole(SETTINGS_ROLE, msg.sender);\\n    }\\n\\n    //\\n    // IStrategy\\n    //\\n\\n    /**\\n     * Returns true since strategy is synchronous.\\n     */\\n    function isSync() external pure override(IStrategy) returns (bool) {\\n        return true;\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function hasAssets()\\n        external\\n        view\\n        virtual\\n        override(IStrategy)\\n        returns (bool)\\n    {\\n        return investedAssets() != 0;\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    /// @notice LQTY rewards of the strategy waiting to be claimed in the liquity stability pool are not included\\n    /// @notice but the ETH rewards are included\\n    function investedAssets()\\n        public\\n        view\\n        virtual\\n        override(IStrategy)\\n        returns (uint256)\\n    {\\n        uint256 ethBalance = address(this).balance +\\n            stabilityPool.getDepositorETHGain(address(this));\\n\\n        // need to do this because the get_exchange_amount method reverts if ethBalance is zero\\n        if (ethBalance == 0) {\\n            return stabilityPool.getCompoundedLUSDDeposit(address(this));\\n        }\\n\\n        uint256 ethBalanceInUSDT = ICurveExchange(CURVE_ROUTER)\\n            .get_exchange_amount(WETH_CURVE_POOL, WETH, USDT, ethBalance);\\n\\n        uint256 ethBalanceInLusd = ICurveExchange(CURVE_ROUTER)\\n            .get_exchange_amount(\\n                LUSD_CURVE_POOL,\\n                USDT,\\n                address(underlying),\\n                ethBalanceInUSDT\\n            );\\n\\n        return\\n            stabilityPool.getCompoundedLUSDDeposit(address(this)) +\\n            ethBalanceInLusd;\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    /// @notice this will also claim any unclaimed gains in the stability pool\\n    function invest() external virtual override(IStrategy) onlyManager {\\n        uint256 balance = underlying.balanceOf(address(this));\\n        if (balance == 0) revert StrategyNoUnderlying();\\n\\n        // claims LQTY & ETH rewards if there are any\\n        stabilityPool.provideToSP(balance, address(0));\\n\\n        emit StrategyInvested(balance);\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    /// @notice will also claim unclaimed LQTY & ETH gains\\n    /// @notice when amount > total deposited, all available funds will be withdrawn\\n    function withdrawToVault(uint256 amount)\\n        external\\n        virtual\\n        override(IStrategy)\\n        onlyManager\\n    {\\n        if (amount == 0) revert StrategyAmountZero();\\n        if (amount > investedAssets()) revert StrategyNotEnoughShares();\\n\\n        // withdraws underlying amount and claims LQTY & ETH rewards\\n        stabilityPool.withdrawFromSP(amount);\\n\\n        // use balance instead of amount since amount could be greater than what was actually withdrawn\\n        uint256 balance = underlying.balanceOf(address(this));\\n        if (!underlying.transfer(vault, balance)) {\\n            revert StrategyTokenTransferFailed(address(underlying));\\n        }\\n\\n        emit StrategyWithdrawn(balance);\\n    }\\n\\n    /**\\n     * Allows an address to be used as a swap target by adding it on the whitelist.\\n     *\\n     * @notice Can only be called by the account with the SETTINGS role.\\n     * @notice Swap targets are addresses of 0x contracts used for swapping ETH and LQTY tokens held by the strategy.\\n     */\\n    function allowSwapTarget(address _swapTarget) external onlySettings {\\n        _checkSwapTargetForZeroAddress(_swapTarget);\\n\\n        allowedSwapTargets[_swapTarget] = true;\\n    }\\n\\n    /**\\n     * Denies an address to be used as a swap target by removing it from the whitelist.\\n     *\\n     * @notice Can only be called by the account with the SETTINGS role.\\n     */\\n    function denySwapTarget(address _swapTarget) external onlySettings {\\n        _checkSwapTargetForZeroAddress(_swapTarget);\\n\\n        allowedSwapTargets[_swapTarget] = false;\\n    }\\n\\n    /**\\n     * Collects the LQTY & ETH rewards from the stability pool.\\n     */\\n    function harvest() external virtual {\\n        // call to withdrawFromSP with 0 amount will only claim rewards\\n        stabilityPool.withdrawFromSP(0);\\n    }\\n\\n    /**\\n     * Swaps LQTY tokens and ETH held by the strategy to LUSD,\\n     * and reinvests the swapped LUSD amount into the stability pool.\\n     *\\n     * @notice Can only be called by the account with the KEEPER role.\\n     * @notice Swap data arguments provided are real-time data obtained from '0x' api.\\n     *\\n     * @param _swapTarget the address of the '0x' contract performing the tokens swap.\\n     * @param _lqtySwapData data used to perform LQTY -> LUSD swap. Leave empty to skip this swap.\\n     * @param _ethAmount amount of ETH to swap to LUSD, has to match with the amount used to obtain @param _ethSwapData.\\n     * @param _ethSwapData data used to perform ETH -> LUSD swap. Leave empty to skip this swap.\\n     * @param _amountOutMin the minimum amount of LUSD to be received after the ETH & LQTY -> LUSD swap.\\n     */\\n    function reinvest(\\n        address _swapTarget,\\n        uint256 _lqtyAmount,\\n        bytes calldata _lqtySwapData,\\n        uint256 _ethAmount,\\n        bytes calldata _ethSwapData,\\n        uint256 _amountOutMin\\n    ) external virtual onlyKeeper {\\n        _checkSwapTargetForZeroAddress(_swapTarget);\\n\\n        if (!allowedSwapTargets[_swapTarget])\\n            revert StrategySwapTargetNotAllowed();\\n\\n        swapLQTYtoLUSD(_lqtyAmount, _swapTarget, _lqtySwapData);\\n        swapETHtoLUSD(_ethAmount, _swapTarget, _ethSwapData);\\n\\n        // reinvest LUSD gains into the stability pool\\n        uint256 balance = underlying.balanceOf(address(this));\\n        if (balance == 0) {\\n            revert StrategyNothingToReinvest();\\n        }\\n\\n        if (balance < _amountOutMin) {\\n            revert StrategyInsufficientOutputAmount();\\n        }\\n\\n        emit StrategyReinvested(balance);\\n\\n        stabilityPool.provideToSP(balance, address(0));\\n    }\\n\\n    /**\\n     * Checks if the provided swap target is 0 address and reverts if true.\\n     */\\n    function _checkSwapTargetForZeroAddress(address _swapTarget) internal pure {\\n        if (_swapTarget == address(0))\\n            revert StrategySwapTargetCannotBe0Address();\\n    }\\n\\n    /**\\n     * Swaps LQTY tokens held by the strategy to LUSD.\\n     *\\n     * @notice Swap data is real-time data obtained from '0x' api.\\n     *\\n     * @param _amount the amount of LQTY tokens to swap. Has to match with the amount used to obtain @param _lqtySwapData from '0x' api.\\n     * @param _swapTarget the address of the '0x' contract performing the swap.\\n     * @param _lqtySwapData data from '0x' api used to perform LQTY -> LUSD swap.\\n     */\\n    function swapLQTYtoLUSD(\\n        uint256 _amount,\\n        address _swapTarget,\\n        bytes calldata _lqtySwapData\\n    ) internal {\\n        // don't do cross-contract call if nothing to swap\\n        if (_amount == 0 || _lqtySwapData.length == 0) return;\\n\\n        uint256 lqtyBalance = lqty.balanceOf(address(this));\\n        if (_amount > lqtyBalance) revert StrategyNotEnoughLQTY();\\n\\n        // give approval to the swapTarget\\n        if (!lqty.approve(_swapTarget, _amount)) {\\n            revert StrategyTokenApprovalFailed(address(lqty));\\n        }\\n\\n        // perform the swap\\n        (bool success, ) = _swapTarget.call{value: 0}(_lqtySwapData);\\n        if (!success) revert StrategyLQTYSwapFailed();\\n    }\\n\\n    /**\\n     * Swaps ETH held by the strategy to LUSD.\\n     *\\n     * @notice Swap data is real-time data obtained from '0x' api.\\n     *\\n     * @param _amount the amount of ETH to swap. Has to match with the amount used to obtain @param _ethSwapData from '0x' api.\\n     * @param _swapTarget the address of the '0x' contract performing the swap.\\n     * @param _ethSwapData data from '0x' api to perform ETH -> LUSD swap.\\n     */\\n    function swapETHtoLUSD(\\n        uint256 _amount,\\n        address _swapTarget,\\n        bytes calldata _ethSwapData\\n    ) internal {\\n        // don't do cross-contract call if nothing to swap\\n        if (_amount == 0 || _ethSwapData.length == 0) return;\\n\\n        uint256 ethBalance = address(this).balance;\\n        if (_amount > ethBalance) revert StrategyNotEnoughETH();\\n\\n        (bool success, ) = _swapTarget.call{value: _amount}(_ethSwapData);\\n        if (!success) revert StrategyETHSwapFailed();\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyAdmin\\n    {}\\n\\n    /**\\n     * Strategy has to be able to receive ETH as stability pool rewards.\\n     */\\n    receive() external payable {}\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"contracts/lib/PercentMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary PercentMath {\\n    // Divisor used for representing percentages\\n    uint256 public constant PCT_DIVISOR = 10000;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PCT_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPct(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PCT_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PCT_DIVISOR as the denominator\\n     */\\n    function pctOf(uint256 _amount, uint16 _fracNum)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount * _fracNum) / PCT_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Checks if a given number corresponds to 100%\\n     * @param _perc Percentage value to check, with PCT_DIVISOR\\n     */\\n    function is100Pct(uint256 _perc) internal pure returns (bool) {\\n        return _perc == PCT_DIVISOR;\\n    }\\n}\\n\"},\"contracts/strategy/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * IStrategy defines the interface for pluggable contracts used by vaults to invest funds and generate yield.\\n *\\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault.\\n *\\n * @notice It's up to the vault to decide how much to invest/disinvest from the total pool.\\n */\\ninterface IStrategy {\\n    /**\\n     * Emmited when funds are invested by the strategy.\\n     *\\n     *@param amount amount invested\\n     */\\n    event StrategyInvested(uint256 amount);\\n    /**\\n     * Emmited when funds are withdrawn (disinvested) by the strategy.\\n     *\\n     *@param amount amount withdrawn\\n     */\\n    event StrategyWithdrawn(uint256 amount);\\n\\n    /**\\n     * Provides information about wether the strategy is synchronous or asynchronous.\\n     *\\n     * @notice Synchronous strategies support instant withdrawals,\\n     * while asynchronous strategies impose a delay before withdrawals can be made.\\n     *\\n     * @return true if the strategy is synchronous, false otherwise\\n     */\\n    function isSync() external view returns (bool);\\n\\n    /**\\n     * The vault linked to this strategy.\\n     *\\n     * @return The vault's address\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * Withdraws the specified amount back to the vault (disinvests)\\n     *\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawToVault(uint256 amount) external;\\n\\n    /**\\n     * Amount of the underlying currency currently invested by the strategy.\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets() external view returns (uint256);\\n\\n    /**\\n     * Indicates if assets are invested into strategy or not.\\n     *\\n     * @notice this will be used when removing the strategy from the vault\\n     * @return true if assets invested, false if nothing invested.\\n     */\\n    function hasAssets() external view returns (bool);\\n\\n    /**\\n     * Deposits of all the available underlying into the yield generating protocol.\\n     */\\n    function invest() external;\\n}\\n\"},\"contracts/interfaces/CustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface CustomErrors {\\n    //\\n    // Vault Errors\\n    //\\n\\n    // Vault: sender is not the owner of the group id\\n    error VaultSenderNotOwnerOfGroupId();\\n\\n    // Vault: invalid investPct\\n    error VaultInvalidInvestpct();\\n\\n    // Vault: invalid performance fee\\n    error VaultInvalidPerformanceFee();\\n\\n    // Vault: no performance fee\\n    error VaultNoPerformanceFee();\\n\\n    // Vault: invalid lossTolerance\\n    error VaultInvalidLossTolerance();\\n\\n    // Vault: underlying cannot be 0x0\\n    error VaultUnderlyingCannotBe0Address();\\n\\n    // Vault: treasury cannot be 0x0\\n    error VaultTreasuryCannotBe0Address();\\n\\n    // Vault: admin cannot be 0x0\\n    error VaultAdminCannotBe0Address();\\n\\n    // Vault: cannot transfer admin rights to self\\n    error VaultCannotTransferAdminRightsToSelf();\\n\\n    // Vault: caller is not admin\\n    error VaultCallerNotAdmin();\\n\\n    // Vault: caller is not settings\\n    error VaultCallerNotSettings();\\n\\n    // Vault: caller is not keeper\\n    error VaultCallerNotKeeper();\\n\\n    // Vault: caller is not sponsor\\n    error VaultCallerNotSponsor();\\n\\n    // Vault: destination address is 0x\\n    error VaultDestinationCannotBe0Address();\\n\\n    // Vault: strategy is not set\\n    error VaultStrategyNotSet();\\n\\n    // Vault: invalid minLockPeriod\\n    error VaultInvalidMinLockPeriod();\\n\\n    // Vault: invalid lock period\\n    error VaultInvalidLockPeriod();\\n\\n    // Vault: cannot deposit 0\\n    error VaultCannotDeposit0();\\n\\n    // Vault: cannot sponsor 0\\n    error VaultCannotSponsor0();\\n\\n    // Vault: cannot deposit when yield is negative\\n    error VaultCannotDepositWhenYieldNegative();\\n\\n    // Vault: cannot deposit when the claimer is in debt\\n    error VaultCannotDepositWhenClaimerInDebt();\\n\\n    // Vault: cannot withdraw when yield is negative\\n    error VaultCannotWithdrawWhenYieldNegative();\\n\\n    // Vault: nothing to do\\n    error VaultNothingToDo();\\n\\n    // Vault: not enough to rebalance\\n    error VaultNotEnoughToRebalance();\\n\\n    // Vault: invalid vault\\n    error VaultInvalidVault();\\n\\n    // Vault: strategy has invested funds\\n    error VaultStrategyHasInvestedFunds();\\n\\n    // Vault: not enough funds\\n    error VaultNotEnoughFunds();\\n\\n    // Vault: you are not allowed\\n    error VaultNotAllowed();\\n\\n    // Vault: amount is locked\\n    error VaultAmountLocked();\\n\\n    // Vault: deposit is locked\\n    error VaultDepositLocked();\\n\\n    // Vault: token id is not a sponsor\\n    error VaultNotSponsor();\\n\\n    // Vault: token id is not a deposit\\n    error VaultNotDeposit();\\n\\n    // Vault: claim percentage cannot be 0\\n    error VaultClaimPercentageCannotBe0();\\n\\n    // Vault: claimer cannot be address 0\\n    error VaultClaimerCannotBe0();\\n\\n    // Vault: claims don't add up to 100%\\n    error VaultClaimsDontAddUp();\\n\\n    // Vault: you are not the owner of a deposit\\n    error VaultNotOwnerOfDeposit();\\n\\n    // Vault: cannot withdraw more than the available amount\\n    error VaultCannotWithdrawMoreThanAvailable();\\n\\n    // Vault: must force withdraw to withdraw with a loss\\n    error VaultMustUseForceWithdrawToAcceptLosses();\\n\\n    // Vault: amount received does not match params\\n    error VaultAmountDoesNotMatchParams();\\n\\n    // Vault: cannot compute shares when there's no principal\\n    error VaultCannotComputeSharesWithoutPrincipal();\\n\\n    // Vault: deposit name for MetaVault too short\\n    error VaultDepositNameTooShort();\\n\\n    // Vault: no yield to claim\\n    error VaultNoYieldToClaim();\\n\\n    //\\n    // Strategy Errors\\n    //\\n\\n    // Strategy: admin is 0x\\n    error StrategyAdminCannotBe0Address();\\n\\n    // Strategy: cannot transfer admin rights to self\\n    error StrategyCannotTransferAdminRightsToSelf();\\n\\n    // Strategy: underlying is 0x\\n    error StrategyUnderlyingCannotBe0Address();\\n\\n    // Strategy: not an IVault\\n    error StrategyNotIVault();\\n\\n    // Strategy: caller is not manager\\n    error StrategyCallerNotManager();\\n\\n    // Strategy: caller has no settings role\\n    error StrategyCallerNotSettings();\\n\\n    // Strategy: caller is not admin\\n    error StrategyCallerNotAdmin();\\n\\n    // Strategy: amount is 0\\n    error StrategyAmountZero();\\n\\n    // Strategy: not running\\n    error StrategyNotRunning();\\n\\n    // Not Enough Underlying Balance in Strategy contract\\n    error StrategyNoUnderlying();\\n\\n    // Not Enough Shares in Strategy Contract\\n    error StrategyNotEnoughShares();\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVault {\\n    //\\n    // Structs\\n    //\\n\\n    struct ClaimParams {\\n        uint16 pct;\\n        address beneficiary;\\n        bytes data;\\n    }\\n\\n    struct DepositParams {\\n        address inputToken;\\n        uint64 lockDuration;\\n        uint256 amount;\\n        ClaimParams[] claims;\\n        string name;\\n        uint256 slippage;\\n    }\\n\\n    struct Deposit {\\n        /// amount of the deposit\\n        uint256 amount;\\n        /// wallet of the owner\\n        address owner;\\n        /// wallet of the claimer\\n        address claimerId;\\n        /// when can the deposit be withdrawn\\n        uint256 lockedUntil;\\n    }\\n\\n    struct Claimer {\\n        uint256 totalPrincipal;\\n        uint256 totalShares;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    event DepositMinted(\\n        uint256 indexed id,\\n        uint256 groupId,\\n        uint256 amount,\\n        uint256 shares,\\n        address indexed depositor,\\n        address indexed claimer,\\n        address claimerId,\\n        uint64 lockedUntil,\\n        bytes data,\\n        string name\\n    );\\n\\n    event DepositWithdrawn(\\n        uint256 indexed id,\\n        uint256 shares,\\n        uint256 amount,\\n        address indexed to,\\n        bool burned\\n    );\\n\\n    event Invested(uint256 amount);\\n\\n    event Disinvested(uint256 amount);\\n\\n    event YieldClaimed(\\n        address claimerId,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 burnedShares,\\n        uint256 perfFee,\\n        uint256 totalUnderlying,\\n        uint256 totalShares\\n    );\\n\\n    event FeeWithdrawn(uint256 amount);\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Update the invested amount;\\n     */\\n    function updateInvested() external;\\n\\n    /**\\n     * Calculate maximum investable amount and already invested amount\\n     *\\n     * @return maxInvestableAmount maximum investable amount\\n     * @return alreadyInvested already invested amount\\n     */\\n    function investState()\\n        external\\n        view\\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested);\\n\\n    /**\\n     * Percentage of the total underlying to invest in the strategy\\n     */\\n    function investPct() external view returns (uint16);\\n\\n    /**\\n     * Underlying ERC20 token accepted by the vault\\n     */\\n    function underlying() external view returns (IERC20Metadata);\\n\\n    /**\\n     * Minimum lock period for each deposit\\n     */\\n    function minLockPeriod() external view returns (uint64);\\n\\n    /**\\n     * Total amount of underlying currently controlled by the\\n     * vault and the its strategy.\\n     */\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /**\\n     * Total amount of shares\\n     */\\n    function totalShares() external view returns (uint256);\\n\\n    /**\\n     * Computes the amount of yield available for an an address.\\n     *\\n     * @param _to address to consider.\\n     *\\n     * @return claimable yield for @param _to, share of generated yield by @param _to,\\n     *      and performance fee from generated yield\\n     */\\n    function yieldFor(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * Accumulate performance fee and transfers rest yield generated for the caller to\\n     *\\n     * @param _to Address that will receive the yield.\\n     */\\n    function claimYield(address _to) external;\\n\\n    /**\\n     * Creates a new deposit using the specified group id\\n     *\\n     * @param _groupId The group id for the new deposit\\n     * @param _params Deposit params\\n     */\\n    function depositForGroupId(uint256 _groupId, DepositParams calldata _params)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * Creates a new deposit\\n     *\\n     * @param _params Deposit params\\n     */\\n    function deposit(DepositParams calldata _params)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the expected amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function withdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * When the vault is underperforming it withdraws the funds with a loss.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function forceWithdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws any pending performance fee amount back to the treasury\\n     */\\n    function withdrawPerformanceFee() external;\\n}\\n\"},\"contracts/interfaces/liquity/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\ninterface IStabilityPool {\\n    /*  provideToSP():\\n     *\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (LQTY, ETH) to depositor\\n     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint256 _amount, address _frontEndTag) external;\\n\\n    /*  withdrawFromSP():\\n     *\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (LQTY, ETH) to depositor\\n     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /* Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n     * Given by the formula:  E = d0 * (S - S(0))/P(0)\\n     * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     */\\n    function getDepositorETHGain(address _depositor)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /*\\n     * Calculate the LQTY gain earned by a deposit since its last snapshots were taken.\\n     * Given by the formula:  LQTY = d0 * (G - G(0))/P(0)\\n     * where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     */\\n    function getDepositorLQTYGain(address _depositor)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposit. Given by the formula:  d = d0 * P/P(0)\\n     * where P(0) is the depositor's snapshot of the product P, taken when they last updated their deposit.\\n     */\\n    function getCompoundedLUSDDeposit(address _depositor)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /*\\n     * Cancels out the specified debt against the LUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debtToOffset, uint256 _collToAdd) external;\\n\\n    /*\\n     * Address of the TroveManager contract.\\n     */\\n    function troveManager() external view returns (address);\\n}\\n\"},\"contracts/lib/ERC165Query.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary ERC165Query {\\n    bytes4 constant InvalidID = 0xffffffff;\\n    bytes4 constant ERC165ID = 0x01ffc9a7;\\n\\n    function doesContractImplementInterface(\\n        address _contract,\\n        bytes4 _interfaceId\\n    ) internal view returns (bool) {\\n        uint256 success;\\n        uint256 result;\\n\\n        (success, result) = noThrowCall(_contract, ERC165ID);\\n        if ((success == 0) || (result == 0)) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, InvalidID);\\n        if ((success == 0) || (result != 0)) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, _interfaceId);\\n        if ((success == 1) && (result == 1)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function noThrowCall(address _contract, bytes4 _interfaceId)\\n        internal\\n        view\\n        returns (uint256 success, uint256 result)\\n    {\\n        bytes4 erc165ID = ERC165ID;\\n\\n        assembly {\\n            let x := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(x, erc165ID) // Place signature at beginning of empty storage\\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\\n\\n            success := staticcall(\\n                30000, // 30k gas\\n                _contract, // To addr\\n                x, // Inputs are stored at location x\\n                0x24, // Inputs are 36 bytes long\\n                x, // Store output over input (saves space)\\n                0x20\\n            ) // Outputs are 32 bytes long\\n\\n            result := mload(x) // Load the result\\n        }\\n    }\\n}\\n\"},\"contracts/interfaces/curve/ICurveExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\ninterface ICurveExchange {\\n    function get_exchange_amount(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n}\\n\"}}}","address":"0xAcfF69Ed61324234d4Af76458eF4891731cD563A","bytecode":"0x60a06040523060805234801561001457600080fd5b50608051612e2a61004c600039600081816109010152818161098601528181610df101528181610e760152610f5c0152612e2a6000f3fe60806040526004361061021d5760003560e01c80636ff902e71161011d578063c54e44eb116100b0578063e49b30da1161007f578063ec87621c11610064578063ec87621c1461066e578063f6289887146106a2578063fbfa77cf146106d657600080fd5b8063e49b30da14610631578063e8b5e51f1461065957600080fd5b8063c54e44eb146105a9578063cc2a9a5b146105d1578063ce8c42e8146105f1578063d547741f1461061157600080fd5b80639af2e635116100ec5780639af2e63514610538578063a217fddf1461054c578063ad5c464814610561578063b5106add1461058957600080fd5b80636ff902e71461048a5780637f6ec455146104b2578063865a3e47146104d257806391d14854146104f257600080fd5b8063364bc15a116101b05780634ad0b6841161017f57806352d1902d1161016457806352d1902d146104405780635be9b2d3146104555780636f307dc31461046a57600080fd5b80634ad0b684146104185780634f1ef2861461042d57600080fd5b8063364bc15a1461038f57806336568abe146103c35780633659cfe6146103e35780634641257d1461040357600080fd5b806321bc5df4116101ec57806321bc5df4146102e9578063248a9ca3146103095780632f2ff15d1461034757806330d8a9e81461036757600080fd5b806301ffc9a714610229578063048c661d1461025e578063129d91ab146102965780631fa1fe36146102b857600080fd5b3661022457005b600080fd5b34801561023557600080fd5b50610249610244366004612936565b6106f6565b60405190151581526020015b60405180910390f35b34801561026a57600080fd5b5060fd5461027e906001600160a01b031681565b6040516001600160a01b039091168152602001610255565b3480156102a257600080fd5b506102b66102b136600461297c565b610746565b005b3480156102c457600080fd5b506102496102d336600461297c565b60ff602081905260009182526040909120541681565b3480156102f557600080fd5b506102b661030436600461297c565b6107bf565b34801561031557600080fd5b50610339610324366004612997565b600090815260c9602052604090206001015490565b604051908152602001610255565b34801561035357600080fd5b506102b66103623660046129b0565b61083b565b34801561037357600080fd5b5061027e73ed279fdd11ca84beef15af5d39bb4d4bee23f0ca81565b34801561039b57600080fd5b506103397ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b3480156103cf57600080fd5b506102b66103de3660046129b0565b610865565b3480156103ef57600080fd5b506102b66103fe36600461297c565b6108f6565b34801561040f57600080fd5b506102b6610a72565b34801561042457600080fd5b50610339610ad2565b6102b661043b3660046129f2565b610de6565b34801561044c57600080fd5b50610339610f4f565b34801561046157600080fd5b50610249611014565b34801561047657600080fd5b5060fb5461027e906001600160a01b031681565b34801561049657600080fd5b5061027e73d51a44d3fae010294c616388b506acda1bfaae4681565b3480156104be57600080fd5b5060fe5461027e906001600160a01b031681565b3480156104de57600080fd5b506102b66104ed366004612afd565b611025565b3480156104fe57600080fd5b5061024961050d3660046129b0565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561054457600080fd5b506001610249565b34801561055857600080fd5b50610339600081565b34801561056d57600080fd5b5061027e73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b34801561059557600080fd5b506102b66105a436600461297c565b611284565b3480156105b557600080fd5b5061027e73dac17f958d2ee523a2206206994597c13d831ec781565b3480156105dd57600080fd5b506102b66105ec366004612b98565b6113fb565b3480156105fd57600080fd5b506102b661060c366004612997565b61185a565b34801561061d57600080fd5b506102b661062c3660046129b0565b611afe565b34801561063d57600080fd5b5061027e7381c46feca27b31f3adc2b91ee4be9717d1cd3dd781565b34801561066557600080fd5b506102b6611b23565b34801561067a57600080fd5b506103397f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b3480156106ae57600080fd5b506103397ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309581565b3480156106e257600080fd5b5060fc5461027e906001600160a01b031681565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061074057506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360009081527fdf9e05033a6c4e281e51ff7ac61d3a2fec43ac6ee7b61abf4c8074f4927147b7602052604090205460ff16610795576040516370c4ee8d60e01b815260040160405180910390fd5b61079e81611cb9565b6001600160a01b0316600090815260ff60205260409020805460ff19169055565b3360009081527fdf9e05033a6c4e281e51ff7ac61d3a2fec43ac6ee7b61abf4c8074f4927147b7602052604090205460ff1661080e576040516370c4ee8d60e01b815260040160405180910390fd5b61081781611cb9565b6001600160a01b0316600090815260ff60205260409020805460ff19166001179055565b600082815260c9602052604090206001015461085681611cf9565b6108608383611d03565b505050565b6001600160a01b03811633146108e85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6108f28282611da5565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109845760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016108df565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109df7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610a4a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016108df565b610a5381611e28565b60408051600080825260208201909252610a6f91839190611e77565b50565b60fd54604051632e54bf9560e01b8152600060048201526001600160a01b0390911690632e54bf9590602401600060405180830381600087803b158015610ab857600080fd5b505af1158015610acc573d6000803e3d6000fd5b50505050565b60fd546040517f389e92a500000000000000000000000000000000000000000000000000000000815230600482015260009182916001600160a01b039091169063389e92a590602401602060405180830381865afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190612c0c565b610b669047612c3b565b905080610bde5760fd54604051621cdc4760e81b81523060048201526001600160a01b0390911690631cdc470090602401602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd89190612c0c565b91505090565b604051630e5cfa0d60e21b815273d51a44d3fae010294c616388b506acda1bfaae46600482015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2602482015273dac17f958d2ee523a2206206994597c13d831ec76044820152606481018290526000907381c46feca27b31f3adc2b91ee4be9717d1cd3dd790633973e83490608401602060405180830381865afa158015610c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca39190612c0c565b60fb54604051630e5cfa0d60e21b815273ed279fdd11ca84beef15af5d39bb4d4bee23f0ca600482015273dac17f958d2ee523a2206206994597c13d831ec760248201526001600160a01b039091166044820152606481018290529091506000907381c46feca27b31f3adc2b91ee4be9717d1cd3dd790633973e83490608401602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d649190612c0c565b60fd54604051621cdc4760e81b815230600482015291925082916001600160a01b0390911690631cdc470090602401602060405180830381865afa158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd49190612c0c565b610dde9190612c3b565b935050505090565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e745760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016108df565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ecf7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610f3a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016108df565b610f4382611e28565b6108f282826001611e77565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fef5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108df565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061101e610ad2565b1515919050565b3360009081527fa54cab3e0e5c813b18c71e4e96696bc5fad68ff5192a677568a6b075ee26500e602052604090205460ff1661108d576040517f81389f2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61109688611cb9565b6001600160a01b038816600090815260ff6020819052604090912054166110e9576040517f9e98954000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110f587898888612017565b6111018489858561221b565b60fb546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561114a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116e9190612c0c565b9050806111a7576040517f66a9132900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b818110156111e1576040517ff0b5161200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518181527fe2cd27e14f657c20a75ca97eb4b59f450a055c24916d27034e78933b8c7d75639060200160405180910390a160fd54604051635f788d6560e01b815260048101839052600060248201526001600160a01b0390911690635f788d6590604401600060405180830381600087803b15801561126157600080fd5b505af1158015611275573d6000803e3d6000fd5b50505050505050505050505050565b3360009081527f81fe90a866a48a634a12852c1be675b683a22307409932a7443b8029347be756602052604090205460ff166112d3576040516378741b4560e11b815260040160405180910390fd5b6001600160a01b0381166112fa57604051638f6e893360e01b815260040160405180910390fd5b6001600160a01b03811633141561133d576040517f8fbf788d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611348600082611d03565b6113727ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab82611d03565b61139c7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309582611d03565b6113a7600033611da5565b6113d17ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab33611da5565b610a6f7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309533611da5565b600054610100900460ff161580801561141b5750600054600160ff909116105b806114355750303b158015611435575060005460ff166001145b6114a75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108df565b6000805460ff1916600117905580156114ca576000805461ff0019166101001790555b6114d2612305565b6114da612305565b6001600160a01b03861661150157604051638f6e893360e01b815260040160405180910390fd5b6001600160a01b038416611541576040517f96fbf73100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516611581576040517f0f44c88000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0383166115c1576040517f4043fac000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115f46001600160a01b0388167f21d982ed00000000000000000000000000000000000000000000000000000000612384565b61162a576040517fd7e681d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821661166a576040517f39f97e6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611675600087611d03565b61169f7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab87611d03565b6116c97ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309587611d03565b6116f37f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0888611d03565b61171d7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab83611d03565b60fc80546001600160a01b0389811673ffffffffffffffffffffffffffffffffffffffff199283161790925560fb8054868416908316811790915560fd8054898516908416811790915560fe8054948916949093169390931790915560405163095ea7b360e01b8152600481019290925260001960248301529063095ea7b3906044016020604051808303816000875af11580156117bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e39190612c53565b61180b576040516351be55a360e11b81526001600160a01b03841660048201526024016108df565b8015611851576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b3360009081527ff5f43b48833b613af61a2aa61573d51591ce86ef304bb6e01e9115b2a39191de602052604090205460ff166118a957604051634cc2cd3760e11b815260040160405180910390fd5b806118e0576040517fd45ab8b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118e8610ad2565b811115611921576040517f8396942200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fd54604051632e54bf9560e01b8152600481018390526001600160a01b0390911690632e54bf9590602401600060405180830381600087803b15801561196757600080fd5b505af115801561197b573d6000803e3d6000fd5b505060fb546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee9190612c0c565b60fb5460fc546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260248101849052929350169063a9059cbb906044016020604051808303816000875af1158015611a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a829190612c53565b611ac75760fb546040517f4dca0c840000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016108df565b6040518181527f35c4c11317fd96ffa30da51e0a4b85219c4b0f56c1507c3afefe79de0c47ef549060200160405180910390a15050565b600082815260c96020526040902060010154611b1981611cf9565b6108608383611da5565b3360009081527ff5f43b48833b613af61a2aa61573d51591ce86ef304bb6e01e9115b2a39191de602052604090205460ff16611b7257604051634cc2cd3760e11b815260040160405180910390fd5b60fb546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf9190612c0c565b905080611c18576040517f378a16c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fd54604051635f788d6560e01b815260048101839052600060248201526001600160a01b0390911690635f788d6590604401600060405180830381600087803b158015611c6557600080fd5b505af1158015611c79573d6000803e3d6000fd5b505050507fc68748140896ba027a48ebf3a24735d0afb4ab835f92c4815ddb34f9d6dfd18a81604051611cae91815260200190565b60405180910390a150565b6001600160a01b038116610a6f576040517f99c4312400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a6f8133612426565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff166108f257600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d613390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff16156108f257600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b3360009081527f81fe90a866a48a634a12852c1be675b683a22307409932a7443b8029347be756602052604090205460ff16610a6f576040516378741b4560e11b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611eaa57610860836124a6565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611f04575060408051601f3d908101601f19168201909252611f0191810190612c0c565b60015b611f765760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016108df565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461200b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016108df565b50610860838383612571565b831580612022575080155b1561202c57610acc565b60fe546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120999190612c0c565b9050808511156120d5576040517f19736e2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fe5460405163095ea7b360e01b81526001600160a01b038681166004830152602482018890529091169063095ea7b3906044016020604051808303816000875af1158015612128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214c9190612c53565b6121785760fe546040516351be55a360e11b81526001600160a01b0390911660048201526024016108df565b6000846001600160a01b031660008585604051612196929190612c75565b60006040518083038185875af1925050503d80600081146121d3576040519150601f19603f3d011682016040523d82523d6000602084013e6121d8565b606091505b5050905080612213576040517f56a3cf9a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b831580612226575080155b1561223057610acc565b478085111561226b576040517f0d38adfa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000846001600160a01b0316868585604051612288929190612c75565b60006040518083038185875af1925050503d80600081146122c5576040519150601f19603f3d011682016040523d82523d6000602084013e6122ca565b606091505b5050905080612213576040517f257745cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054610100900460ff166123825760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108df565b565b60008080612399856301ffc9a760e01b612596565b90925090508115806123a9575080155b156123b957600092505050610740565b6123cb856001600160e01b0319612596565b90925090508115806123dc57508015155b156123ec57600092505050610740565b6123f68585612596565b909250905060018214801561240b5750806001145b1561241b57600192505050610740565b506000949350505050565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff166108f257612464816001600160a01b031660146125ca565b61246f8360206125ca565b604051602001612480929190612cb1565b60408051601f198184030181529082905262461bcd60e51b82526108df91600401612d32565b6001600160a01b0381163b6125235760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016108df565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61257a836127b2565b6000825111806125875750805b1561086057610acc83836127f2565b6040516301ffc9a760e01b8082526004820183905260009182919060208160248189617530fa905190969095509350505050565b606060006125d9836002612d65565b6125e4906002612c3b565b67ffffffffffffffff8111156125fc576125fc6129dc565b6040519080825280601f01601f191660200182016040528015612626576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061265d5761265d612d84565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106126a8576126a8612d84565b60200101906001600160f81b031916908160001a90535060006126cc846002612d65565b6126d7906001612c3b565b90505b600181111561275c577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061271857612718612d84565b1a60f81b82828151811061272e5761272e612d84565b60200101906001600160f81b031916908160001a90535060049490941c9361275581612d9a565b90506126da565b5083156127ab5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108df565b9392505050565b6127bb816124a6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6128715760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016108df565b600080846001600160a01b03168460405161288c9190612db1565b600060405180830381855af49150503d80600081146128c7576040519150601f19603f3d011682016040523d82523d6000602084013e6128cc565b606091505b50915091506128f48282604051806060016040528060278152602001612dce602791396128fd565b95945050505050565b6060831561290c5750816127ab565b82511561291c5782518084602001fd5b8160405162461bcd60e51b81526004016108df9190612d32565b60006020828403121561294857600080fd5b81356001600160e01b0319811681146127ab57600080fd5b80356001600160a01b038116811461297757600080fd5b919050565b60006020828403121561298e57600080fd5b6127ab82612960565b6000602082840312156129a957600080fd5b5035919050565b600080604083850312156129c357600080fd5b823591506129d360208401612960565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612a0557600080fd5b612a0e83612960565b9150602083013567ffffffffffffffff80821115612a2b57600080fd5b818501915085601f830112612a3f57600080fd5b813581811115612a5157612a516129dc565b604051601f8201601f19908116603f01168101908382118183101715612a7957612a796129dc565b81604052828152886020848701011115612a9257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008083601f840112612ac657600080fd5b50813567ffffffffffffffff811115612ade57600080fd5b602083019150836020828501011115612af657600080fd5b9250929050565b60008060008060008060008060c0898b031215612b1957600080fd5b612b2289612960565b975060208901359650604089013567ffffffffffffffff80821115612b4657600080fd5b612b528c838d01612ab4565b909850965060608b0135955060808b0135915080821115612b7257600080fd5b50612b7f8b828c01612ab4565b999c989b50969995989497949560a00135949350505050565b60008060008060008060c08789031215612bb157600080fd5b612bba87612960565b9550612bc860208801612960565b9450612bd660408801612960565b9350612be460608801612960565b9250612bf260808801612960565b9150612c0060a08801612960565b90509295509295509295565b600060208284031215612c1e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612c4e57612c4e612c25565b500190565b600060208284031215612c6557600080fd5b815180151581146127ab57600080fd5b8183823760009101908152919050565b60005b83811015612ca0578181015183820152602001612c88565b83811115610acc5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612ce9816017850160208801612c85565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612d26816028840160208801612c85565b01602801949350505050565b6020815260008251806020840152612d51816040850160208701612c85565b601f01601f19169190910160400192915050565b6000816000190483118215151615612d7f57612d7f612c25565b500290565b634e487b7160e01b600052603260045260246000fd5b600081612da957612da9612c25565b506000190190565b60008251612dc3818460208701612c85565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122066c5c3d1ef7b4e6a24daa041e52a599abc270b844d5e5e489cff888d95783c4a64736f6c634300080a0033","deployedBytecode":"0x60806040526004361061021d5760003560e01c80636ff902e71161011d578063c54e44eb116100b0578063e49b30da1161007f578063ec87621c11610064578063ec87621c1461066e578063f6289887146106a2578063fbfa77cf146106d657600080fd5b8063e49b30da14610631578063e8b5e51f1461065957600080fd5b8063c54e44eb146105a9578063cc2a9a5b146105d1578063ce8c42e8146105f1578063d547741f1461061157600080fd5b80639af2e635116100ec5780639af2e63514610538578063a217fddf1461054c578063ad5c464814610561578063b5106add1461058957600080fd5b80636ff902e71461048a5780637f6ec455146104b2578063865a3e47146104d257806391d14854146104f257600080fd5b8063364bc15a116101b05780634ad0b6841161017f57806352d1902d1161016457806352d1902d146104405780635be9b2d3146104555780636f307dc31461046a57600080fd5b80634ad0b684146104185780634f1ef2861461042d57600080fd5b8063364bc15a1461038f57806336568abe146103c35780633659cfe6146103e35780634641257d1461040357600080fd5b806321bc5df4116101ec57806321bc5df4146102e9578063248a9ca3146103095780632f2ff15d1461034757806330d8a9e81461036757600080fd5b806301ffc9a714610229578063048c661d1461025e578063129d91ab146102965780631fa1fe36146102b857600080fd5b3661022457005b600080fd5b34801561023557600080fd5b50610249610244366004612936565b6106f6565b60405190151581526020015b60405180910390f35b34801561026a57600080fd5b5060fd5461027e906001600160a01b031681565b6040516001600160a01b039091168152602001610255565b3480156102a257600080fd5b506102b66102b136600461297c565b610746565b005b3480156102c457600080fd5b506102496102d336600461297c565b60ff602081905260009182526040909120541681565b3480156102f557600080fd5b506102b661030436600461297c565b6107bf565b34801561031557600080fd5b50610339610324366004612997565b600090815260c9602052604090206001015490565b604051908152602001610255565b34801561035357600080fd5b506102b66103623660046129b0565b61083b565b34801561037357600080fd5b5061027e73ed279fdd11ca84beef15af5d39bb4d4bee23f0ca81565b34801561039b57600080fd5b506103397ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b3480156103cf57600080fd5b506102b66103de3660046129b0565b610865565b3480156103ef57600080fd5b506102b66103fe36600461297c565b6108f6565b34801561040f57600080fd5b506102b6610a72565b34801561042457600080fd5b50610339610ad2565b6102b661043b3660046129f2565b610de6565b34801561044c57600080fd5b50610339610f4f565b34801561046157600080fd5b50610249611014565b34801561047657600080fd5b5060fb5461027e906001600160a01b031681565b34801561049657600080fd5b5061027e73d51a44d3fae010294c616388b506acda1bfaae4681565b3480156104be57600080fd5b5060fe5461027e906001600160a01b031681565b3480156104de57600080fd5b506102b66104ed366004612afd565b611025565b3480156104fe57600080fd5b5061024961050d3660046129b0565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561054457600080fd5b506001610249565b34801561055857600080fd5b50610339600081565b34801561056d57600080fd5b5061027e73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b34801561059557600080fd5b506102b66105a436600461297c565b611284565b3480156105b557600080fd5b5061027e73dac17f958d2ee523a2206206994597c13d831ec781565b3480156105dd57600080fd5b506102b66105ec366004612b98565b6113fb565b3480156105fd57600080fd5b506102b661060c366004612997565b61185a565b34801561061d57600080fd5b506102b661062c3660046129b0565b611afe565b34801561063d57600080fd5b5061027e7381c46feca27b31f3adc2b91ee4be9717d1cd3dd781565b34801561066557600080fd5b506102b6611b23565b34801561067a57600080fd5b506103397f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b3480156106ae57600080fd5b506103397ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309581565b3480156106e257600080fd5b5060fc5461027e906001600160a01b031681565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061074057506301ffc9a760e01b6001600160e01b03198316145b92915050565b3360009081527fdf9e05033a6c4e281e51ff7ac61d3a2fec43ac6ee7b61abf4c8074f4927147b7602052604090205460ff16610795576040516370c4ee8d60e01b815260040160405180910390fd5b61079e81611cb9565b6001600160a01b0316600090815260ff60205260409020805460ff19169055565b3360009081527fdf9e05033a6c4e281e51ff7ac61d3a2fec43ac6ee7b61abf4c8074f4927147b7602052604090205460ff1661080e576040516370c4ee8d60e01b815260040160405180910390fd5b61081781611cb9565b6001600160a01b0316600090815260ff60205260409020805460ff19166001179055565b600082815260c9602052604090206001015461085681611cf9565b6108608383611d03565b505050565b6001600160a01b03811633146108e85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6108f28282611da5565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109845760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016108df565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109df7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610a4a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016108df565b610a5381611e28565b60408051600080825260208201909252610a6f91839190611e77565b50565b60fd54604051632e54bf9560e01b8152600060048201526001600160a01b0390911690632e54bf9590602401600060405180830381600087803b158015610ab857600080fd5b505af1158015610acc573d6000803e3d6000fd5b50505050565b60fd546040517f389e92a500000000000000000000000000000000000000000000000000000000815230600482015260009182916001600160a01b039091169063389e92a590602401602060405180830381865afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190612c0c565b610b669047612c3b565b905080610bde5760fd54604051621cdc4760e81b81523060048201526001600160a01b0390911690631cdc470090602401602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd89190612c0c565b91505090565b604051630e5cfa0d60e21b815273d51a44d3fae010294c616388b506acda1bfaae46600482015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2602482015273dac17f958d2ee523a2206206994597c13d831ec76044820152606481018290526000907381c46feca27b31f3adc2b91ee4be9717d1cd3dd790633973e83490608401602060405180830381865afa158015610c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca39190612c0c565b60fb54604051630e5cfa0d60e21b815273ed279fdd11ca84beef15af5d39bb4d4bee23f0ca600482015273dac17f958d2ee523a2206206994597c13d831ec760248201526001600160a01b039091166044820152606481018290529091506000907381c46feca27b31f3adc2b91ee4be9717d1cd3dd790633973e83490608401602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d649190612c0c565b60fd54604051621cdc4760e81b815230600482015291925082916001600160a01b0390911690631cdc470090602401602060405180830381865afa158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd49190612c0c565b610dde9190612c3b565b935050505090565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e745760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016108df565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ecf7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610f3a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016108df565b610f4382611e28565b6108f282826001611e77565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fef5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108df565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600061101e610ad2565b1515919050565b3360009081527fa54cab3e0e5c813b18c71e4e96696bc5fad68ff5192a677568a6b075ee26500e602052604090205460ff1661108d576040517f81389f2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61109688611cb9565b6001600160a01b038816600090815260ff6020819052604090912054166110e9576040517f9e98954000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110f587898888612017565b6111018489858561221b565b60fb546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561114a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116e9190612c0c565b9050806111a7576040517f66a9132900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b818110156111e1576040517ff0b5161200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518181527fe2cd27e14f657c20a75ca97eb4b59f450a055c24916d27034e78933b8c7d75639060200160405180910390a160fd54604051635f788d6560e01b815260048101839052600060248201526001600160a01b0390911690635f788d6590604401600060405180830381600087803b15801561126157600080fd5b505af1158015611275573d6000803e3d6000fd5b50505050505050505050505050565b3360009081527f81fe90a866a48a634a12852c1be675b683a22307409932a7443b8029347be756602052604090205460ff166112d3576040516378741b4560e11b815260040160405180910390fd5b6001600160a01b0381166112fa57604051638f6e893360e01b815260040160405180910390fd5b6001600160a01b03811633141561133d576040517f8fbf788d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611348600082611d03565b6113727ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab82611d03565b61139c7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309582611d03565b6113a7600033611da5565b6113d17ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab33611da5565b610a6f7ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309533611da5565b600054610100900460ff161580801561141b5750600054600160ff909116105b806114355750303b158015611435575060005460ff166001145b6114a75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108df565b6000805460ff1916600117905580156114ca576000805461ff0019166101001790555b6114d2612305565b6114da612305565b6001600160a01b03861661150157604051638f6e893360e01b815260040160405180910390fd5b6001600160a01b038416611541576040517f96fbf73100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516611581576040517f0f44c88000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0383166115c1576040517f4043fac000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115f46001600160a01b0388167f21d982ed00000000000000000000000000000000000000000000000000000000612384565b61162a576040517fd7e681d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821661166a576040517f39f97e6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611675600087611d03565b61169f7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab87611d03565b6116c97ffaf9b26485088dee58863e57c46603d6cdcbadc7475ac6d8910fab0ecf60309587611d03565b6116f37f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0888611d03565b61171d7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab83611d03565b60fc80546001600160a01b0389811673ffffffffffffffffffffffffffffffffffffffff199283161790925560fb8054868416908316811790915560fd8054898516908416811790915560fe8054948916949093169390931790915560405163095ea7b360e01b8152600481019290925260001960248301529063095ea7b3906044016020604051808303816000875af11580156117bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e39190612c53565b61180b576040516351be55a360e11b81526001600160a01b03841660048201526024016108df565b8015611851576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b3360009081527ff5f43b48833b613af61a2aa61573d51591ce86ef304bb6e01e9115b2a39191de602052604090205460ff166118a957604051634cc2cd3760e11b815260040160405180910390fd5b806118e0576040517fd45ab8b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118e8610ad2565b811115611921576040517f8396942200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fd54604051632e54bf9560e01b8152600481018390526001600160a01b0390911690632e54bf9590602401600060405180830381600087803b15801561196757600080fd5b505af115801561197b573d6000803e3d6000fd5b505060fb546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee9190612c0c565b60fb5460fc546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260248101849052929350169063a9059cbb906044016020604051808303816000875af1158015611a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a829190612c53565b611ac75760fb546040517f4dca0c840000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016108df565b6040518181527f35c4c11317fd96ffa30da51e0a4b85219c4b0f56c1507c3afefe79de0c47ef549060200160405180910390a15050565b600082815260c96020526040902060010154611b1981611cf9565b6108608383611da5565b3360009081527ff5f43b48833b613af61a2aa61573d51591ce86ef304bb6e01e9115b2a39191de602052604090205460ff16611b7257604051634cc2cd3760e11b815260040160405180910390fd5b60fb546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf9190612c0c565b905080611c18576040517f378a16c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fd54604051635f788d6560e01b815260048101839052600060248201526001600160a01b0390911690635f788d6590604401600060405180830381600087803b158015611c6557600080fd5b505af1158015611c79573d6000803e3d6000fd5b505050507fc68748140896ba027a48ebf3a24735d0afb4ab835f92c4815ddb34f9d6dfd18a81604051611cae91815260200190565b60405180910390a150565b6001600160a01b038116610a6f576040517f99c4312400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a6f8133612426565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff166108f257600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d613390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff16156108f257600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b3360009081527f81fe90a866a48a634a12852c1be675b683a22307409932a7443b8029347be756602052604090205460ff16610a6f576040516378741b4560e11b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611eaa57610860836124a6565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611f04575060408051601f3d908101601f19168201909252611f0191810190612c0c565b60015b611f765760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016108df565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461200b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016108df565b50610860838383612571565b831580612022575080155b1561202c57610acc565b60fe546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120999190612c0c565b9050808511156120d5576040517f19736e2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fe5460405163095ea7b360e01b81526001600160a01b038681166004830152602482018890529091169063095ea7b3906044016020604051808303816000875af1158015612128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214c9190612c53565b6121785760fe546040516351be55a360e11b81526001600160a01b0390911660048201526024016108df565b6000846001600160a01b031660008585604051612196929190612c75565b60006040518083038185875af1925050503d80600081146121d3576040519150601f19603f3d011682016040523d82523d6000602084013e6121d8565b606091505b5050905080612213576040517f56a3cf9a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b831580612226575080155b1561223057610acc565b478085111561226b576040517f0d38adfa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000846001600160a01b0316868585604051612288929190612c75565b60006040518083038185875af1925050503d80600081146122c5576040519150601f19603f3d011682016040523d82523d6000602084013e6122ca565b606091505b5050905080612213576040517f257745cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054610100900460ff166123825760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108df565b565b60008080612399856301ffc9a760e01b612596565b90925090508115806123a9575080155b156123b957600092505050610740565b6123cb856001600160e01b0319612596565b90925090508115806123dc57508015155b156123ec57600092505050610740565b6123f68585612596565b909250905060018214801561240b5750806001145b1561241b57600192505050610740565b506000949350505050565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff166108f257612464816001600160a01b031660146125ca565b61246f8360206125ca565b604051602001612480929190612cb1565b60408051601f198184030181529082905262461bcd60e51b82526108df91600401612d32565b6001600160a01b0381163b6125235760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016108df565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61257a836127b2565b6000825111806125875750805b1561086057610acc83836127f2565b6040516301ffc9a760e01b8082526004820183905260009182919060208160248189617530fa905190969095509350505050565b606060006125d9836002612d65565b6125e4906002612c3b565b67ffffffffffffffff8111156125fc576125fc6129dc565b6040519080825280601f01601f191660200182016040528015612626576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061265d5761265d612d84565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106126a8576126a8612d84565b60200101906001600160f81b031916908160001a90535060006126cc846002612d65565b6126d7906001612c3b565b90505b600181111561275c577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061271857612718612d84565b1a60f81b82828151811061272e5761272e612d84565b60200101906001600160f81b031916908160001a90535060049490941c9361275581612d9a565b90506126da565b5083156127ab5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108df565b9392505050565b6127bb816124a6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6128715760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016108df565b600080846001600160a01b03168460405161288c9190612db1565b600060405180830381855af49150503d80600081146128c7576040519150601f19603f3d011682016040523d82523d6000602084013e6128cc565b606091505b50915091506128f48282604051806060016040528060278152602001612dce602791396128fd565b95945050505050565b6060831561290c5750816127ab565b82511561291c5782518084602001fd5b8160405162461bcd60e51b81526004016108df9190612d32565b60006020828403121561294857600080fd5b81356001600160e01b0319811681146127ab57600080fd5b80356001600160a01b038116811461297757600080fd5b919050565b60006020828403121561298e57600080fd5b6127ab82612960565b6000602082840312156129a957600080fd5b5035919050565b600080604083850312156129c357600080fd5b823591506129d360208401612960565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612a0557600080fd5b612a0e83612960565b9150602083013567ffffffffffffffff80821115612a2b57600080fd5b818501915085601f830112612a3f57600080fd5b813581811115612a5157612a516129dc565b604051601f8201601f19908116603f01168101908382118183101715612a7957612a796129dc565b81604052828152886020848701011115612a9257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008083601f840112612ac657600080fd5b50813567ffffffffffffffff811115612ade57600080fd5b602083019150836020828501011115612af657600080fd5b9250929050565b60008060008060008060008060c0898b031215612b1957600080fd5b612b2289612960565b975060208901359650604089013567ffffffffffffffff80821115612b4657600080fd5b612b528c838d01612ab4565b909850965060608b0135955060808b0135915080821115612b7257600080fd5b50612b7f8b828c01612ab4565b999c989b50969995989497949560a00135949350505050565b60008060008060008060c08789031215612bb157600080fd5b612bba87612960565b9550612bc860208801612960565b9450612bd660408801612960565b9350612be460608801612960565b9250612bf260808801612960565b9150612c0060a08801612960565b90509295509295509295565b600060208284031215612c1e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612c4e57612c4e612c25565b500190565b600060208284031215612c6557600080fd5b815180151581146127ab57600080fd5b8183823760009101908152919050565b60005b83811015612ca0578181015183820152602001612c88565b83811115610acc5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612ce9816017850160208801612c85565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612d26816028840160208801612c85565b01602801949350505050565b6020815260008251806020840152612d51816040850160208701612c85565b601f01601f19169190910160400192915050565b6000816000190483118215151615612d7f57612d7f612c25565b500290565b634e487b7160e01b600052603260045260246000fd5b600081612da957612da9612c25565b506000190190565b60008251612dc3818460208701612c85565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122066c5c3d1ef7b4e6a24daa041e52a599abc270b844d5e5e489cff888d95783c4a64736f6c634300080a0033","abi":[{"inputs":[],"name":"StrategyAdminCannotBe0Address","type":"error"},{"inputs":[],"name":"StrategyAmountZero","type":"error"},{"inputs":[],"name":"StrategyCallerNotAdmin","type":"error"},{"inputs":[],"name":"StrategyCallerNotKeeper","type":"error"},{"inputs":[],"name":"StrategyCallerNotManager","type":"error"},{"inputs":[],"name":"StrategyCallerNotSettings","type":"error"},{"inputs":[],"name":"StrategyCannotTransferAdminRightsToSelf","type":"error"},{"inputs":[],"name":"StrategyETHSwapFailed","type":"error"},{"inputs":[],"name":"StrategyInsufficientOutputAmount","type":"error"},{"inputs":[],"name":"StrategyKeeperCannotBe0Address","type":"error"},{"inputs":[],"name":"StrategyLQTYSwapFailed","type":"error"},{"inputs":[],"name":"StrategyNoUnderlying","type":"error"},{"inputs":[],"name":"StrategyNotEnoughETH","type":"error"},{"inputs":[],"name":"StrategyNotEnoughLQTY","type":"error"},{"inputs":[],"name":"StrategyNotEnoughShares","type":"error"},{"inputs":[],"name":"StrategyNotIVault","type":"error"},{"inputs":[],"name":"StrategyNotRunning","type":"error"},{"inputs":[],"name":"StrategyNothingToReinvest","type":"error"},{"inputs":[],"name":"StrategyStabilityPoolCannotBeAddressZero","type":"error"},{"inputs":[],"name":"StrategySwapTargetCannotBe0Address","type":"error"},{"inputs":[],"name":"StrategySwapTargetNotAllowed","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"StrategyTokenApprovalFailed","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"StrategyTokenTransferFailed","type":"error"},{"inputs":[],"name":"StrategyUnderlyingCannotBe0Address","type":"error"},{"inputs":[],"name":"StrategyYieldTokenCannotBe0Address","type":"error"},{"inputs":[],"name":"VaultAdminCannotBe0Address","type":"error"},{"inputs":[],"name":"VaultAmountDoesNotMatchParams","type":"error"},{"inputs":[],"name":"VaultAmountLocked","type":"error"},{"inputs":[],"name":"VaultCallerNotAdmin","type":"error"},{"inputs":[],"name":"VaultCallerNotKeeper","type":"error"},{"inputs":[],"name":"VaultCallerNotSettings","type":"error"},{"inputs":[],"name":"VaultCallerNotSponsor","type":"error"},{"inputs":[],"name":"VaultCannotComputeSharesWithoutPrincipal","type":"error"},{"inputs":[],"name":"VaultCannotDeposit0","type":"error"},{"inputs":[],"name":"VaultCannotDepositWhenClaimerInDebt","type":"error"},{"inputs":[],"name":"VaultCannotDepositWhenYieldNegative","type":"error"},{"inputs":[],"name":"VaultCannotSponsor0","type":"error"},{"inputs":[],"name":"VaultCannotTransferAdminRightsToSelf","type":"error"},{"inputs":[],"name":"VaultCannotWithdrawMoreThanAvailable","type":"error"},{"inputs":[],"name":"VaultCannotWithdrawWhenYieldNegative","type":"error"},{"inputs":[],"name":"VaultClaimPercentageCannotBe0","type":"error"},{"inputs":[],"name":"VaultClaimerCannotBe0","type":"error"},{"inputs":[],"name":"VaultClaimsDontAddUp","type":"error"},{"inputs":[],"name":"VaultDepositLocked","type":"error"},{"inputs":[],"name":"VaultDepositNameTooShort","type":"error"},{"inputs":[],"name":"VaultDestinationCannotBe0Address","type":"error"},{"inputs":[],"name":"VaultInvalidInvestpct","type":"error"},{"inputs":[],"name":"VaultInvalidLockPeriod","type":"error"},{"inputs":[],"name":"VaultInvalidLossTolerance","type":"error"},{"inputs":[],"name":"VaultInvalidMinLockPeriod","type":"error"},{"inputs":[],"name":"VaultInvalidPerformanceFee","type":"error"},{"inputs":[],"name":"VaultInvalidVault","type":"error"},{"inputs":[],"name":"VaultMustUseForceWithdrawToAcceptLosses","type":"error"},{"inputs":[],"name":"VaultNoPerformanceFee","type":"error"},{"inputs":[],"name":"VaultNoYieldToClaim","type":"error"},{"inputs":[],"name":"VaultNotAllowed","type":"error"},{"inputs":[],"name":"VaultNotDeposit","type":"error"},{"inputs":[],"name":"VaultNotEnoughFunds","type":"error"},{"inputs":[],"name":"VaultNotEnoughToRebalance","type":"error"},{"inputs":[],"name":"VaultNotOwnerOfDeposit","type":"error"},{"inputs":[],"name":"VaultNotSponsor","type":"error"},{"inputs":[],"name":"VaultNothingToDo","type":"error"},{"inputs":[],"name":"VaultSenderNotOwnerOfGroupId","type":"error"},{"inputs":[],"name":"VaultStrategyHasInvestedFunds","type":"error"},{"inputs":[],"name":"VaultStrategyNotSet","type":"error"},{"inputs":[],"name":"VaultTreasuryCannotBe0Address","type":"error"},{"inputs":[],"name":"VaultUnderlyingCannotBe0Address","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StrategyInvested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amountInLUSD","type":"uint256"}],"name":"StrategyReinvested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StrategyWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"CURVE_ROUTER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"KEEPER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUSD_CURVE_POOL","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MANAGER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SETTINGS_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"USDT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WETH_CURVE_POOL","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_swapTarget","type":"address"}],"name":"allowSwapTarget","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"allowedSwapTargets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_swapTarget","type":"address"}],"name":"denySwapTarget","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"harvest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"hasAssets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_vault","type":"address"},{"internalType":"address","name":"_admin","type":"address"},{"internalType":"address","name":"_stabilityPool","type":"address"},{"internalType":"address","name":"_lqty","type":"address"},{"internalType":"address","name":"_underlying","type":"address"},{"internalType":"address","name":"_keeper","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"invest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"investedAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSync","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"lqty","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_swapTarget","type":"address"},{"internalType":"uint256","name":"_lqtyAmount","type":"uint256"},{"internalType":"bytes","name":"_lqtySwapData","type":"bytes"},{"internalType":"uint256","name":"_ethAmount","type":"uint256"},{"internalType":"bytes","name":"_ethSwapData","type":"bytes"},{"internalType":"uint256","name":"_amountOutMin","type":"uint256"}],"name":"reinvest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stabilityPool","outputs":[{"internalType":"contract IStabilityPool","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_newAdmin","type":"address"}],"name":"transferAdminRights","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"underlying","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawToVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}