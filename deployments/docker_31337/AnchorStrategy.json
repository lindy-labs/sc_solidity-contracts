{"metadata":"{\"compiler\":{\"version\":\"0.8.10\"},\"sources\":{\"contracts/strategy/anchor/AnchorStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport {PercentMath} from \\\"../../lib/PercentMath.sol\\\";\\nimport {ERC165Query} from \\\"../../lib/ERC165Query.sol\\\";\\nimport {IVault} from \\\"../../vault/IVault.sol\\\";\\nimport {IStrategy} from \\\"../IStrategy.sol\\\";\\nimport {CustomErrors} from \\\"../../interfaces/CustomErrors.sol\\\";\\n\\n/**\\n * Base eth anchor strategy that handles UST tokens and invests them via the EthAnchor\\n * protocol (https://docs.anchorprotocol.com/ethanchor/ethanchor)\\n */\\ncontract AnchorStrategy is IStrategy, AccessControl, CustomErrors {\\n    using SafeERC20 for IERC20;\\n    using PercentMath for uint256;\\n    using ERC165Query for address;\\n\\n    bytes32 public constant MANAGER_ROLE =\\n        0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08; // keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    /// @inheritdoc IStrategy\\n    address public immutable override(IStrategy) vault;\\n\\n    // UST token address\\n    IERC20 public immutable ustToken;\\n\\n    // aUST token address (wrapped Anchor UST, received to accrue interest for an Anchor deposit)\\n    IERC20 public immutable aUstToken;\\n\\n    // Chainlink aUST / UST price feed\\n    AggregatorV3Interface public immutable aUstToUstFeed;\\n\\n    // Multiplier of aUST / UST feed\\n    uint256 internal _aUstToUstFeedMultiplier;\\n\\n    bool internal _allRedeemed;\\n\\n    /**\\n     * Constructor of Base Strategy - Initialize required addresses and params\\n     *\\n     * @notice Vault will be automatically set to Manager Role to handle underlyings\\n     *\\n     * @param _vault Vault address\\n     * @param _aUstToUstFeed aUST / UST chainlink feed address\\n     * @param _ustToken UST token address\\n     * @param _aUstToken aUST token address\\n     * @param _owner Owner address\\n     */\\n    constructor(\\n        address _vault,\\n        AggregatorV3Interface _aUstToUstFeed,\\n        IERC20 _ustToken,\\n        IERC20 _aUstToken,\\n        address _owner\\n    ) {\\n        if (_owner == address(0)) revert StrategyOwnerCannotBe0Address();\\n        if (address(_ustToken) == address(0))\\n            revert StrategyUnderlyingCannotBe0Address();\\n        if (address(_aUstToken) == address(0))\\n            revert StrategyYieldTokenCannotBe0Address();\\n        if (!_vault.doesContractImplementInterface(type(IVault).interfaceId))\\n            revert StrategyNotIVault();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(MANAGER_ROLE, _vault);\\n\\n        vault = _vault;\\n        aUstToUstFeed = _aUstToUstFeed;\\n        ustToken = _ustToken;\\n        aUstToken = _aUstToken;\\n\\n        _aUstToUstFeedMultiplier = 10**_aUstToUstFeed.decimals();\\n        _allRedeemed = true;\\n    }\\n\\n    //\\n    // Modifiers\\n    //\\n\\n    modifier onlyManager() {\\n        if (!hasRole(MANAGER_ROLE, msg.sender))\\n            revert StrategyCallerNotManager();\\n        _;\\n    }\\n\\n    //\\n    // IStrategy\\n    //\\n\\n    /**\\n     * Request withdrawal from EthAnchor\\n     *\\n     * @notice since EthAnchor uses an asynchronous model, we can only request withdrawal for whole aUST\\n     */\\n    function withdrawAllToVault() external override(IStrategy) onlyManager {}\\n\\n    /**\\n     * Withdraws a specified amount back to the vault\\n     *\\n     * @notice since EthAnchor uses an asynchronous model, and there is no underlying amount\\n     * in the strategy, this function do nothing at all, However override interface of IStrategy.\\n     */\\n    function withdrawToVault(uint256 amount)\\n        external\\n        virtual\\n        override(IStrategy)\\n        onlyManager\\n    {\\n        if (amount == 0) revert StrategyAmountZero();\\n    }\\n\\n    /**\\n     * Amount, expressed in the underlying currency, currently in the strategy\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency.\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets()\\n        external\\n        view\\n        virtual\\n        override(IStrategy)\\n        returns (uint256)\\n    {\\n        return 0;\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function invest() external virtual override(IStrategy) onlyManager {}\\n\\n    /// @inheritdoc IStrategy\\n    function hasAssets() external view override returns (bool) {\\n        return true;\\n    }\\n\\n    //\\n    // Internal API\\n    //\\n\\n    /**\\n     * @return underlying balance of strategy\\n     */\\n    function _getUnderlyingBalance() internal view returns (uint256) {\\n        return ustToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @return UST balance of strategy\\n     */\\n    function _getUstBalance() internal view returns (uint256) {\\n        return ustToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @return aUST balance of strategy\\n     */\\n    function _getAUstBalance() internal view returns (uint256) {\\n        return aUstToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @return AUST value of UST amount\\n     */\\n    function _estimateUstAmountInAUst(uint256 ustAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (ustAmount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 aUstPrice = _aUstToUstExchangeRate();\\n\\n        return ((_aUstToUstFeedMultiplier * ustAmount) / aUstPrice);\\n    }\\n\\n    /**\\n     * @return UST value of current aUST balance (+ pending redeems)\\n     */\\n    function _estimateAUstBalanceInUst() internal view returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @return aUST / UST exchange rate from chainlink\\n     */\\n    function _aUstToUstExchangeRate() internal view virtual returns (uint256) {\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            ,\\n            uint256 updateTime,\\n            uint80 answeredInRound\\n        ) = aUstToUstFeed.latestRoundData();\\n\\n        if (price <= 0 || updateTime == 0 || answeredInRound < roundID)\\n            revert StrategyInvalidAUSTRate();\\n\\n        return uint256(price);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"},\"contracts/lib/PercentMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary PercentMath {\\n    // Divisor used for representing percentages\\n    uint256 public constant PCT_DIVISOR = 10000;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PCT_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPct(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PCT_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PCT_DIVISOR as the denominator\\n     */\\n    function pctOf(uint256 _amount, uint16 _fracNum)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount * _fracNum) / PCT_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Checks if a given number corresponds to 100%\\n     * @param _perc Percentage value to check, with PCT_DIVISOR\\n     */\\n    function is100Pct(uint256 _perc) internal pure returns (bool) {\\n        return _perc == PCT_DIVISOR;\\n    }\\n}\\n\"},\"contracts/lib/ERC165Query.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nlibrary ERC165Query {\\n    bytes4 constant InvalidID = 0xffffffff;\\n    bytes4 constant ERC165ID = 0x01ffc9a7;\\n\\n    function doesContractImplementInterface(\\n        address _contract,\\n        bytes4 _interfaceId\\n    ) internal view returns (bool) {\\n        uint256 success;\\n        uint256 result;\\n\\n        (success, result) = noThrowCall(_contract, ERC165ID);\\n        if ((success == 0) || (result == 0)) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, InvalidID);\\n        if ((success == 0) || (result != 0)) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, _interfaceId);\\n        if ((success == 1) && (result == 1)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function noThrowCall(address _contract, bytes4 _interfaceId)\\n        internal\\n        view\\n        returns (uint256 success, uint256 result)\\n    {\\n        bytes4 erc165ID = ERC165ID;\\n\\n        assembly {\\n            let x := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(x, erc165ID) // Place signature at beginning of empty storage\\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\\n\\n            success := staticcall(\\n                30000, // 30k gas\\n                _contract, // To addr\\n                x, // Inputs are stored at location x\\n                0x24, // Inputs are 36 bytes long\\n                x, // Store output over input (saves space)\\n                0x20\\n            ) // Outputs are 32 bytes long\\n\\n            result := mload(x) // Load the result\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVault {\\n    //\\n    // Structs\\n    //\\n\\n    struct ClaimParams {\\n        uint16 pct;\\n        address beneficiary;\\n        bytes data;\\n    }\\n\\n    struct DepositParams {\\n        address inputToken;\\n        uint64 lockDuration;\\n        uint256 amount;\\n        ClaimParams[] claims;\\n        string name;\\n    }\\n\\n    struct Deposit {\\n        /// amount of the deposit\\n        uint256 amount;\\n        /// wallet of the owner\\n        address owner;\\n        /// wallet of the claimer\\n        address claimerId;\\n        /// when can the deposit be withdrawn\\n        uint256 lockedUntil;\\n    }\\n\\n    struct Claimer {\\n        uint256 totalPrincipal;\\n        uint256 totalShares;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    event DepositMinted(\\n        uint256 indexed id,\\n        uint256 groupId,\\n        uint256 amount,\\n        uint256 shares,\\n        address indexed depositor,\\n        address indexed claimer,\\n        address claimerId,\\n        uint64 lockedUntil,\\n        bytes data,\\n        string name\\n    );\\n\\n    event DepositWithdrawn(\\n        uint256 indexed id,\\n        uint256 shares,\\n        uint256 amount,\\n        address indexed to,\\n        bool burned\\n    );\\n\\n    event Invested(uint256 amount);\\n\\n    event Disinvested(uint256 amount);\\n\\n    event YieldClaimed(\\n        address claimerId,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 burnedShares,\\n        uint256 perfFee,\\n        uint256 totalUnderlying,\\n        uint256 totalShares\\n    );\\n\\n    event FeeWithdrawn(uint256 amount);\\n\\n    //\\n    // Public API\\n    //\\n\\n    /**\\n     * Update the invested amount;\\n     */\\n    function updateInvested() external;\\n\\n    /**\\n     * Calculate maximum investable amount and already invested amount\\n     *\\n     * @return maxInvestableAmount maximum investable amount\\n     * @return alreadyInvested already invested amount\\n     */\\n    function investState()\\n        external\\n        view\\n        returns (uint256 maxInvestableAmount, uint256 alreadyInvested);\\n\\n    /**\\n     * Percentage of the total underlying to invest in the strategy\\n     */\\n    function investPct() external view returns (uint16);\\n\\n    /**\\n     * Underlying ERC20 token accepted by the vault\\n     */\\n    function underlying() external view returns (IERC20Metadata);\\n\\n    /**\\n     * Minimum lock period for each deposit\\n     */\\n    function minLockPeriod() external view returns (uint64);\\n\\n    /**\\n     * Total amount of underlying currently controlled by the\\n     * vault and the its strategy.\\n     */\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /**\\n     * Total amount of shares\\n     */\\n    function totalShares() external view returns (uint256);\\n\\n    /**\\n     * Computes the amount of yield available for an an address.\\n     *\\n     * @param _to address to consider.\\n     *\\n     * @return claimable yield for @param _to, share of generated yield by @param _to,\\n     *      and performance fee from generated yield\\n     */\\n    function yieldFor(address _to)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * Accumulate performance fee and transfers rest yield generated for the caller to\\n     *\\n     * @param _to Address that will receive the yield.\\n     */\\n    function claimYield(address _to) external;\\n\\n    /**\\n     * Creates a new deposit using the specified group id\\n     *\\n     * @param _groupId The group id for the new deposit\\n     * @param _params Deposit params\\n     */\\n    function depositForGroupId(uint256 _groupId, DepositParams calldata _params)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * Creates a new deposit\\n     *\\n     * @param _params Deposit params\\n     */\\n    function deposit(DepositParams calldata _params)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * It fails if the vault is underperforming and there are not enough funds\\n     * to withdraw the expected amount.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function withdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.\\n     *\\n     * When the vault is underperforming it withdraws the funds with a loss.\\n     *\\n     * @param _to Address that will receive the funds.\\n     * @param _ids Array with the ids of the deposits.\\n     */\\n    function forceWithdraw(address _to, uint256[] calldata _ids) external;\\n\\n    /**\\n     * Withdraws any pending performance fee amount back to the treasury\\n     */\\n    function withdrawPerformanceFee() external;\\n}\\n\"},\"contracts/strategy/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * Strategies can be plugged into vaults to invest and manage their underlying funds\\n *\\n * @notice It's up to the strategy to decide what do to with investable assets provided by a vault\\n *\\n * @notice It's up to the vault to decide how much to invest from the total pool\\n */\\ninterface IStrategy {\\n    //\\n    // Events\\n    //\\n\\n    event InitDepositStable(\\n        address indexed operator,\\n        uint256 indexed idx,\\n        uint256 underlyingAmount,\\n        uint256 ustAmount\\n    );\\n    event FinishDepositStable(\\n        address indexed operator,\\n        uint256 ustAmount,\\n        uint256 aUstAmount\\n    );\\n    event RearrangeDepositOperation(\\n        address indexed operatorFrom,\\n        address indexed operatorTo,\\n        uint256 indexed newIdx\\n    );\\n    event InitRedeemStable(\\n        address indexed operator,\\n        uint256 indexed idx,\\n        uint256 aUstAmount\\n    );\\n    event FinishRedeemStable(\\n        address indexed operator,\\n        uint256 aUstAmount,\\n        uint256 ustAmount,\\n        uint256 underlyingAmount\\n    );\\n    event RearrangeRedeemOperation(\\n        address indexed operatorFrom,\\n        address indexed operatorTo,\\n        uint256 indexed newIdx\\n    );\\n\\n    //\\n    // Structs\\n    //\\n\\n    struct Operation {\\n        address operator;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * The vault linked to this stragegy\\n     *\\n     * @return The vault's address\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * Withdraws all underlying back to vault.\\n     *\\n     * @notice If underlying is currently invested, this also starts the\\n     * cross-chain process to redeem it. After that is done, this function\\n     * should be called a second time to finish the withdrawal of that portion.\\n     */\\n    function withdrawAllToVault() external;\\n\\n    /**\\n     * Withdraws a specified amount back to the vault\\n     *\\n     * @notice Unlike `withdrawToVault`, this function only considers the\\n     * amount currently not invested, but only what is currently held by the\\n     * strategy\\n     *\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawToVault(uint256 amount) external;\\n\\n    /**\\n     * Amount, expressed in the underlying currency, currently in the strategy\\n     *\\n     * @notice both held and invested amounts are included here, using the\\n     * latest known exchange rates to the underlying currency\\n     *\\n     * @return The total amount of underlying\\n     */\\n    function investedAssets() external view returns (uint256);\\n\\n    /**\\n     * Indicates if assets are invested into strategy or not.\\n     *\\n     * @notice this will be used when removing this strategy\\n     * @return true if assets invested, false if nothing invested.\\n     */\\n    function hasAssets() external view returns (bool);\\n\\n    /**\\n     * Initiates a deposit of all the currently held UST into EthAnchor\\n     *\\n     * @notice since EthAnchor uses an asynchronous model, this function\\n     * only starts the deposit process, but does not finish it.\\n     * Each EthAnchor deposit is handled by a different operator, so we store\\n     * an operator address to finish later.\\n     * We need to increase pendingDeposits to track correct underlying assets.\\n     */\\n    function invest() external;\\n}\\n\"},\"contracts/interfaces/CustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\ninterface CustomErrors {\\n    //\\n    // Vault Errors\\n    //\\n\\n    // Vault: sender is not the owner of the group id\\n    error VaultSenderNotOwnerOfGroupId();\\n\\n    // Vault: invalid investPct\\n    error VaultInvalidInvestpct();\\n\\n    // Vault: invalid performance fee\\n    error VaultInvalidPerformanceFee();\\n\\n    // Vault: no performance fee\\n    error VaultNoPerformanceFee();\\n\\n    // Vault: invalid investment fee\\n    error VaultInvalidLossTolerance();\\n\\n    // Vault: underlying cannot be 0x0\\n    error VaultUnderlyingCannotBe0Address();\\n\\n    // Vault: treasury cannot be 0x0\\n    error VaultTreasuryCannotBe0Address();\\n\\n    // Vault: owner cannot be 0x0\\n    error VaultOwnerCannotBe0Address();\\n\\n    // Vault: destination address is 0x\\n    error VaultDestinationCannotBe0Address();\\n\\n    // Vault: strategy is not set\\n    error VaultStrategyNotSet();\\n\\n    // Vault: invalid minLockPeriod\\n    error VaultInvalidMinLockPeriod();\\n\\n    // Vault: invalid lock period\\n    error VaultInvalidLockPeriod();\\n\\n    // Vault: cannot deposit 0\\n    error VaultCannotDeposit0();\\n\\n    // Vault: cannot sponsor 0\\n    error VaultCannotSponsor0();\\n\\n    // Vault: cannot deposit when yield is negative\\n    error VaultCannotDepositWhenYieldNegative();\\n\\n    // Vault: cannot deposit when the claimer is in debt\\n    error VaultCannotDepositWhenClaimerInDebt();\\n\\n    // Vault: cannot deposit when yield is negative\\n    error VaultCannotWithdrawWhenYieldNegative();\\n\\n    // Vault: nothing to do\\n    error VaultNothingToDo();\\n\\n    // Vault: not enough to rebalance\\n    error VaultNotEnoughToRebalance();\\n\\n    // Vault: invalid vault\\n    error VaultInvalidVault();\\n\\n    // Vault: strategy has invested funds\\n    error VaultStrategyHasInvestedFunds();\\n\\n    // Vault: not enough funds\\n    error VaultNotEnoughFunds();\\n\\n    // Vault: amount too large\\n    error VaultAmountTooLarge();\\n\\n    // Vault: you are not allowed\\n    error VaultNotAllowed();\\n\\n    // Vault: amount is locked\\n    error VaultAmountLocked();\\n\\n    // Vault: deposit is locked\\n    error VaultDepositLocked();\\n\\n    // Vault: token id is not a sponsor\\n    error VaultNotSponsor();\\n\\n    // Vault: token id is not a deposit\\n    error VaultNotDeposit();\\n\\n    // Vault: claim percentage cannot be 0\\n    error VaultClaimPercentageCannotBe0();\\n\\n    // Vault: claimer cannot be address 0\\n    error VaultClaimerCannotBe0();\\n\\n    // Vault: claims don't add up to 100%\\n    error VaultClaimsDontAddUp();\\n\\n    // Vault: you are not the owner of a deposit\\n    error VaultNotOwnerOfDeposit();\\n\\n    // Vault: cannot withdraw more than the available amount\\n    error VaultCannotWithdrawMoreThanAvailable();\\n\\n    // Vault: amount received does not match params\\n    error VaultAmountDoesNotMatchParams();\\n\\n    // Vault: cannot compute shares when there's no principal\\n    error VaultCannotComputeSharesWithoutPrincipal();\\n\\n    //\\n    // Strategy Errors\\n    //\\n\\n    // AnchorStrategy: owner is 0x\\n    error StrategyOwnerCannotBe0Address();\\n\\n    // AnchorStrategy: router is 0x\\n    error StrategyRouterCannotBe0Address();\\n\\n    // AnchorStrategy: ust is 0x\\n    error StrategyUnderlyingCannotBe0Address();\\n\\n    // AnchorStrategy: aUST is 0x\\n    error StrategyYieldTokenCannotBe0Address();\\n\\n    // AnchorStrategy: not an IVault\\n    error StrategyNotIVault();\\n\\n    // AnchorStrategy: caller is not manager\\n    error StrategyCallerNotManager();\\n\\n    // AnchorStrategy: amount is 0\\n    error StrategyAmountZero();\\n\\n    // AnchorStrategy: no ust exist\\n    error StrategyNoUST();\\n\\n    // AnchorStrategy: not running\\n    error StrategyNotRunning();\\n\\n    // AnchorStrategy: no aUST returned\\n    error StrategyNoAUSTReturned();\\n\\n    // AnchorStrategy: nothing redeemed\\n    error StrategyNothingRedeemed();\\n\\n    // AnchorStrategy: invalid aUST rate\\n    error StrategyInvalidAUSTRate();\\n}\\n\"}}}","address":"0x62Ceb23785c001F4C6Dd5C7A0BCd139b5948bEC8","bytecode":"0x6101006040523480156200001257600080fd5b506040516200111c3803806200111c83398101604081905262000035916200038d565b6001600160a01b0381166200005d5760405163b636c31560e01b815260040160405180910390fd5b6001600160a01b03831662000085576040516301010feb60e61b815260040160405180910390fd5b6001600160a01b038216620000ad576040516396fbf73160e01b815260040160405180910390fd5b620000d76354ff06df60e01b866001600160a01b0316620001dd60201b620005031790919060201c565b620000f55760405163d7e681d160e01b815260040160405180910390fd5b6200010260008262000290565b6200012e7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b088662000290565b6001600160a01b0380861660805284811660e081905284821660a05290831660c0526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa1580156200018c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b291906200040d565b620001bf90600a6200054c565b60019081556002805460ff19169091179055506200055d9350505050565b60008080620001f4856301ffc9a760e01b620002a0565b909250905081158062000205575080155b1562000217576000925050506200028a565b6200022b856001600160e01b0319620002a0565b90925090508115806200023d57508015155b156200024f576000925050506200028a565b6200025b8585620002a0565b9092509050600182148015620002715750806001145b1562000283576001925050506200028a565b6000925050505b92915050565b6200029c8282620002d4565b5050565b6040516301ffc9a760e01b8082526004820183905260009182919060208160248189617530fa905190969095509350505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200029c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003303390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160a01b03811681146200038a57600080fd5b50565b600080600080600060a08688031215620003a657600080fd5b8551620003b38162000374565b6020870151909550620003c68162000374565b6040870151909450620003d98162000374565b6060870151909350620003ec8162000374565b6080870151909250620003ff8162000374565b809150509295509295909350565b6000602082840312156200042057600080fd5b815160ff811681146200043257600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200049057816000190482111562000474576200047462000439565b808516156200048257918102915b93841c939080029062000454565b509250929050565b600082620004a9575060016200028a565b81620004b8575060006200028a565b8160018114620004d15760028114620004dc57620004fc565b60019150506200028a565b60ff841115620004f057620004f062000439565b50506001821b6200028a565b5060208310610133831016604e8410600b841016171562000521575081810a6200028a565b6200052d83836200044f565b806000190482111562000544576200054462000439565b029392505050565b60006200043260ff84168362000498565b60805160a05160c05160e051610b8562000597600039600061018c0152600061014d0152600061021a015260006102d50152610b856000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063781338c0116100b2578063ce8c42e811610081578063e8b5e51f11610066578063e8b5e51f1461027b578063ec87621c146102a9578063fbfa77cf146102d057600080fd5b8063ce8c42e814610283578063d547741f1461029657600080fd5b8063781338c01461021557806391d148541461023c578063a217fddf14610273578063bfd131f11461027b57600080fd5b80632f2ff15d116100ee5780632f2ff15d146101df57806336568abe146101f45780634ad0b684146102075780635be9b2d31461020e57600080fd5b806301ffc9a7146101205780631bbec15e146101485780631ce6314714610187578063248a9ca3146101ae575b600080fd5b61013361012e36600461095c565b6102f7565b60405190151581526020015b60405180910390f35b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013f565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b6101d16101bc366004610986565b60009081526020819052604090206001015490565b60405190815260200161013f565b6101f26101ed36600461099f565b610347565b005b6101f261020236600461099f565b610372565b60006101d1565b6001610133565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b61013361024a36600461099f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101d1600081565b6101f2610403565b6101f2610291366004610986565b610454565b6101f26102a436600461099f565b6104dd565b6101d17f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061034157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461036381336105a5565b61036d8383610623565b505050565b6001600160a01b03811633146103f55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6103ff82826106c1565b5050565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff1661045257604051634cc2cd3760e11b815260040160405180910390fd5b565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166104a357604051634cc2cd3760e11b815260040160405180910390fd5b806104da576040517fd45ab8b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000828152602081905260409020600101546104f981336105a5565b61036d83836106c1565b60008080610518856301ffc9a760e01b610740565b9092509050811580610528575080155b1561053857600092505050610341565b61054a856001600160e01b0319610740565b909250905081158061055b57508015155b1561056b57600092505050610341565b6105758585610740565b909250905060018214801561058a5750806001145b1561059a57600192505050610341565b506000949350505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103ff576105e1816001600160a01b03166014610774565b6105ec836020610774565b6040516020016105fd929190610a0b565b60408051601f198184030181529082905262461bcd60e51b82526103ec91600401610a8c565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103ff576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561067d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156103ff576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516301ffc9a760e01b8082526004820183905260009182919060208160248189617530fa905190969095509350505050565b60606000610783836002610ad5565b61078e906002610af4565b67ffffffffffffffff8111156107a6576107a6610b0c565b6040519080825280601f01601f1916602001820160405280156107d0576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061080757610807610b22565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061085257610852610b22565b60200101906001600160f81b031916908160001a9053506000610876846002610ad5565b610881906001610af4565b90505b6001811115610906577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106108c2576108c2610b22565b1a60f81b8282815181106108d8576108d8610b22565b60200101906001600160f81b031916908160001a90535060049490941c936108ff81610b38565b9050610884565b5083156109555760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103ec565b9392505050565b60006020828403121561096e57600080fd5b81356001600160e01b03198116811461095557600080fd5b60006020828403121561099857600080fd5b5035919050565b600080604083850312156109b257600080fd5b8235915060208301356001600160a01b03811681146109d057600080fd5b809150509250929050565b60005b838110156109f65781810151838201526020016109de565b83811115610a05576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610a438160178501602088016109db565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351610a808160288401602088016109db565b01602801949350505050565b6020815260008251806020840152610aab8160408501602087016109db565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610aef57610aef610abf565b500290565b60008219821115610b0757610b07610abf565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610b4757610b47610abf565b50600019019056fea2646970667358221220144cb87f522c4be9a85e404921d3ebe0f3be413faaf3c608e2baf8b471172e4164736f6c634300080a0033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061011b5760003560e01c8063781338c0116100b2578063ce8c42e811610081578063e8b5e51f11610066578063e8b5e51f1461027b578063ec87621c146102a9578063fbfa77cf146102d057600080fd5b8063ce8c42e814610283578063d547741f1461029657600080fd5b8063781338c01461021557806391d148541461023c578063a217fddf14610273578063bfd131f11461027b57600080fd5b80632f2ff15d116100ee5780632f2ff15d146101df57806336568abe146101f45780634ad0b684146102075780635be9b2d31461020e57600080fd5b806301ffc9a7146101205780631bbec15e146101485780631ce6314714610187578063248a9ca3146101ae575b600080fd5b61013361012e36600461095c565b6102f7565b60405190151581526020015b60405180910390f35b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013f565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b6101d16101bc366004610986565b60009081526020819052604090206001015490565b60405190815260200161013f565b6101f26101ed36600461099f565b610347565b005b6101f261020236600461099f565b610372565b60006101d1565b6001610133565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b61013361024a36600461099f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101d1600081565b6101f2610403565b6101f2610291366004610986565b610454565b6101f26102a436600461099f565b6104dd565b6101d17f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b61016f7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061034157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461036381336105a5565b61036d8383610623565b505050565b6001600160a01b03811633146103f55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6103ff82826106c1565b5050565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff1661045257604051634cc2cd3760e11b815260040160405180910390fd5b565b3360009081527fe84508f2c7fa9c351146748b3025cb78b45df37d868e48c6a75102fecdeee645602052604090205460ff166104a357604051634cc2cd3760e11b815260040160405180910390fd5b806104da576040517fd45ab8b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000828152602081905260409020600101546104f981336105a5565b61036d83836106c1565b60008080610518856301ffc9a760e01b610740565b9092509050811580610528575080155b1561053857600092505050610341565b61054a856001600160e01b0319610740565b909250905081158061055b57508015155b1561056b57600092505050610341565b6105758585610740565b909250905060018214801561058a5750806001145b1561059a57600192505050610341565b506000949350505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103ff576105e1816001600160a01b03166014610774565b6105ec836020610774565b6040516020016105fd929190610a0b565b60408051601f198184030181529082905262461bcd60e51b82526103ec91600401610a8c565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103ff576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561067d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156103ff576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516301ffc9a760e01b8082526004820183905260009182919060208160248189617530fa905190969095509350505050565b60606000610783836002610ad5565b61078e906002610af4565b67ffffffffffffffff8111156107a6576107a6610b0c565b6040519080825280601f01601f1916602001820160405280156107d0576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061080757610807610b22565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061085257610852610b22565b60200101906001600160f81b031916908160001a9053506000610876846002610ad5565b610881906001610af4565b90505b6001811115610906577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106108c2576108c2610b22565b1a60f81b8282815181106108d8576108d8610b22565b60200101906001600160f81b031916908160001a90535060049490941c936108ff81610b38565b9050610884565b5083156109555760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103ec565b9392505050565b60006020828403121561096e57600080fd5b81356001600160e01b03198116811461095557600080fd5b60006020828403121561099857600080fd5b5035919050565b600080604083850312156109b257600080fd5b8235915060208301356001600160a01b03811681146109d057600080fd5b809150509250929050565b60005b838110156109f65781810151838201526020016109de565b83811115610a05576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610a438160178501602088016109db565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351610a808160288401602088016109db565b01602801949350505050565b6020815260008251806020840152610aab8160408501602087016109db565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610aef57610aef610abf565b500290565b60008219821115610b0757610b07610abf565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610b4757610b47610abf565b50600019019056fea2646970667358221220144cb87f522c4be9a85e404921d3ebe0f3be413faaf3c608e2baf8b471172e4164736f6c634300080a0033","abi":[{"inputs":[{"internalType":"address","name":"_vault","type":"address"},{"internalType":"contract AggregatorV3Interface","name":"_aUstToUstFeed","type":"address"},{"internalType":"contract IERC20","name":"_ustToken","type":"address"},{"internalType":"contract IERC20","name":"_aUstToken","type":"address"},{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"StrategyAmountZero","type":"error"},{"inputs":[],"name":"StrategyCallerNotManager","type":"error"},{"inputs":[],"name":"StrategyInvalidAUSTRate","type":"error"},{"inputs":[],"name":"StrategyNoAUSTReturned","type":"error"},{"inputs":[],"name":"StrategyNoUST","type":"error"},{"inputs":[],"name":"StrategyNotIVault","type":"error"},{"inputs":[],"name":"StrategyNotRunning","type":"error"},{"inputs":[],"name":"StrategyNothingRedeemed","type":"error"},{"inputs":[],"name":"StrategyOwnerCannotBe0Address","type":"error"},{"inputs":[],"name":"StrategyRouterCannotBe0Address","type":"error"},{"inputs":[],"name":"StrategyUnderlyingCannotBe0Address","type":"error"},{"inputs":[],"name":"StrategyYieldTokenCannotBe0Address","type":"error"},{"inputs":[],"name":"VaultAmountDoesNotMatchParams","type":"error"},{"inputs":[],"name":"VaultAmountLocked","type":"error"},{"inputs":[],"name":"VaultAmountTooLarge","type":"error"},{"inputs":[],"name":"VaultCannotComputeSharesWithoutPrincipal","type":"error"},{"inputs":[],"name":"VaultCannotDeposit0","type":"error"},{"inputs":[],"name":"VaultCannotDepositWhenClaimerInDebt","type":"error"},{"inputs":[],"name":"VaultCannotDepositWhenYieldNegative","type":"error"},{"inputs":[],"name":"VaultCannotSponsor0","type":"error"},{"inputs":[],"name":"VaultCannotWithdrawMoreThanAvailable","type":"error"},{"inputs":[],"name":"VaultCannotWithdrawWhenYieldNegative","type":"error"},{"inputs":[],"name":"VaultClaimPercentageCannotBe0","type":"error"},{"inputs":[],"name":"VaultClaimerCannotBe0","type":"error"},{"inputs":[],"name":"VaultClaimsDontAddUp","type":"error"},{"inputs":[],"name":"VaultDepositLocked","type":"error"},{"inputs":[],"name":"VaultDestinationCannotBe0Address","type":"error"},{"inputs":[],"name":"VaultInvalidInvestpct","type":"error"},{"inputs":[],"name":"VaultInvalidLockPeriod","type":"error"},{"inputs":[],"name":"VaultInvalidLossTolerance","type":"error"},{"inputs":[],"name":"VaultInvalidMinLockPeriod","type":"error"},{"inputs":[],"name":"VaultInvalidPerformanceFee","type":"error"},{"inputs":[],"name":"VaultInvalidVault","type":"error"},{"inputs":[],"name":"VaultNoPerformanceFee","type":"error"},{"inputs":[],"name":"VaultNotAllowed","type":"error"},{"inputs":[],"name":"VaultNotDeposit","type":"error"},{"inputs":[],"name":"VaultNotEnoughFunds","type":"error"},{"inputs":[],"name":"VaultNotEnoughToRebalance","type":"error"},{"inputs":[],"name":"VaultNotOwnerOfDeposit","type":"error"},{"inputs":[],"name":"VaultNotSponsor","type":"error"},{"inputs":[],"name":"VaultNothingToDo","type":"error"},{"inputs":[],"name":"VaultOwnerCannotBe0Address","type":"error"},{"inputs":[],"name":"VaultSenderNotOwnerOfGroupId","type":"error"},{"inputs":[],"name":"VaultStrategyHasInvestedFunds","type":"error"},{"inputs":[],"name":"VaultStrategyNotSet","type":"error"},{"inputs":[],"name":"VaultTreasuryCannotBe0Address","type":"error"},{"inputs":[],"name":"VaultUnderlyingCannotBe0Address","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"uint256","name":"ustAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"aUstAmount","type":"uint256"}],"name":"FinishDepositStable","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"uint256","name":"aUstAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"ustAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"underlyingAmount","type":"uint256"}],"name":"FinishRedeemStable","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"uint256","name":"idx","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"underlyingAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"ustAmount","type":"uint256"}],"name":"InitDepositStable","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"uint256","name":"idx","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"aUstAmount","type":"uint256"}],"name":"InitRedeemStable","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operatorFrom","type":"address"},{"indexed":true,"internalType":"address","name":"operatorTo","type":"address"},{"indexed":true,"internalType":"uint256","name":"newIdx","type":"uint256"}],"name":"RearrangeDepositOperation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operatorFrom","type":"address"},{"indexed":true,"internalType":"address","name":"operatorTo","type":"address"},{"indexed":true,"internalType":"uint256","name":"newIdx","type":"uint256"}],"name":"RearrangeRedeemOperation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MANAGER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"aUstToUstFeed","outputs":[{"internalType":"contract AggregatorV3Interface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"aUstToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"hasAssets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"invest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"investedAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ustToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawAllToVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawToVault","outputs":[],"stateMutability":"nonpayable","type":"function"}]}