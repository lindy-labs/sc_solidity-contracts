{"metadata":"{\"compiler\":{\"version\":\"0.8.10\"},\"sources\":{\"contracts/Donations.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * A contract to store donations before they are transferred to the charities.\\n */\\ncontract Donations is ERC721, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant WORKER_ROLE = keccak256(\\\"WORKER_ROLE\\\");\\n\\n    struct DonationParams {\\n        uint128 destinationId;\\n        address owner;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    struct Metadata {\\n        uint128 destinationId;\\n        uint64 expiry;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    event DonationMinted(\\n        uint256 indexed id,\\n        uint128 indexed destinationId,\\n        bytes32 indexed groupId,\\n        IERC20 token,\\n        uint256 expiry,\\n        uint256 amount,\\n        address owner\\n    );\\n\\n    event DonationBurned(uint256 indexed id);\\n\\n    event DonationsSent(\\n        uint128 indexed destinationId,\\n        IERC20 indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event TTLUpdated(uint64 ttl);\\n\\n    uint256 private metadataId;\\n    mapping(uint256 => Metadata) public metadata;\\n\\n    /// Duration of the expiration date for new donations.\\n    uint64 public ttl = 180 days;\\n\\n    /// Used to indicate whether a group of donations identified by the key has been processed or not.\\n    mapping(bytes32 => bool) public processedDonationsGroups;\\n\\n    /// Stores how much should be transferred to each charity in each coin.\\n    mapping(IERC20 => mapping(uint128 => uint256)) public transferableAmounts;\\n\\n    /**\\n     * @param _owner Account that will receive the admin role.\\n     */\\n    constructor(address _owner) ERC721(\\\"Sandclock Donation\\\", \\\"Donations\\\") {\\n        require(_owner != address(0x0), \\\"Vault: owner cannot be 0x0\\\");\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(WORKER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * Changes the TTL for new donations.\\n     *\\n     * @param _ttl the new TTL.\\n     */\\n    function setTTL(uint64 _ttl) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        ttl = _ttl;\\n\\n        emit TTLUpdated(_ttl);\\n    }\\n\\n    /**\\n     * Transfers the donated funds in the currency @param _token to the charity with the id @param _destinationId.\\n     *\\n     * @param _destinationId ID of the charity.\\n     * @param _token Currency to transfer the funds from.\\n     * @param _to Address of the charity.\\n     */\\n    function donate(\\n        uint128 _destinationId,\\n        IERC20 _token,\\n        address _to\\n    ) external onlyRole(WORKER_ROLE) {\\n        uint256 amount = transferableAmounts[_token][_destinationId];\\n        require(amount != 0, \\\"Donations: nothing to donate\\\");\\n\\n        transferableAmounts[_token][_destinationId] = 0;\\n\\n        emit DonationsSent(_destinationId, _token, _to, amount);\\n\\n        _token.safeTransfer(_to, amount);\\n    }\\n\\n    /**\\n     * Mints an NFT for every donation in @param _params.\\n     * The @param _txHash and @param _batchNr uniquely identify a group of donations.\\n     *\\n     * @param _txHash The hash of the transaction where the yield for these donations was claimed.\\n     * @param _batchNr When there are too many donations in a claim, we break them into batches to not reach the gas limit.\\n     * @param _params Donation params.\\n     */\\n    function mint(\\n        bytes32 _txHash,\\n        uint256 _batchNr,\\n        DonationParams[] calldata _params\\n    ) external onlyRole(WORKER_ROLE) {\\n        bytes32 groupId = keccak256(abi.encodePacked(_txHash, _batchNr));\\n\\n        require(\\n            !processedDonationsGroups[groupId],\\n            \\\"Donations: already processed\\\"\\n        );\\n\\n        uint64 expiry = _getBlockTimestamp() + ttl;\\n        uint256 length = _params.length;\\n        uint256 _metadataId = metadataId;\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            ++_metadataId;\\n\\n            metadata[_metadataId] = Metadata({\\n                destinationId: _params[i].destinationId,\\n                token: _params[i].token,\\n                expiry: expiry,\\n                amount: _params[i].amount\\n            });\\n\\n            _mint(_params[i].owner, _metadataId);\\n\\n            emit DonationMinted(\\n                _metadataId,\\n                _params[i].destinationId,\\n                groupId,\\n                _params[i].token,\\n                expiry,\\n                _params[i].amount,\\n                _params[i].owner\\n            );\\n        }\\n\\n        metadataId = _metadataId;\\n\\n        processedDonationsGroups[groupId] = true;\\n    }\\n\\n    /**\\n     * Burns the NFT and sets the amount donated to be transferred to the charity.\\n     *\\n     * @param _id ID of the NFT.\\n     */\\n    function burn(uint256 _id) external {\\n        bool isOwner = ownerOf(_id) == _msgSender();\\n\\n        Metadata storage data = metadata[_id];\\n\\n        bool expired = data.expiry < _getBlockTimestamp();\\n\\n        require(isOwner || expired, \\\"Donations: not allowed\\\");\\n\\n        transferableAmounts[data.token][data.destinationId] += data.amount;\\n\\n        _burn(_id);\\n\\n        emit DonationBurned(_id);\\n    }\\n\\n    /**\\n     * Basically similar to the above burn() method but is called on an array of _ids\\n     * Expected to be called by the backend to burn a bunch of NFTs when they expire\\n     *\\n     * @param _ids IDs of the NFTs.\\n     */\\n    function burnBatch(uint256[] calldata _ids) external {\\n        uint256 _id;\\n        Metadata storage data;\\n        bool expired;\\n\\n        uint256 timestamp = _getBlockTimestamp();\\n\\n        uint256 idsLen = _ids.length;\\n        for (uint256 i = 0; i < idsLen; ++i) {\\n            _id = _ids[i];\\n            data = metadata[_id];\\n\\n            expired = data.expiry < timestamp;\\n\\n            // used an if statement instead of require so that the method will keep on running for the other ids and not stop execution\\n            if (expired) {\\n                transferableAmounts[data.token][data.destinationId] += data\\n                    .amount;\\n\\n                _burn(_id);\\n\\n                emit DonationBurned(_id);\\n            }\\n        }\\n    }\\n\\n    function _getBlockTimestamp() private view returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControl, ERC721)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"}}}","address":"0x470B125472930374AE711dE53B9D4221889Fe131","bytecode":"0x6080604052600980546001600160401b03191662ed4e001790553480156200002657600080fd5b5060405162002d6538038062002d658339810160408190526200004991620002b2565b604080518082018252601281527129b0b73231b637b1b5902237b730ba34b7b760711b602080830191825283518085019094526009845268446f6e6174696f6e7360b81b908401528151919291620000a4916000916200020c565b508051620000ba9060019060208401906200020c565b5050506001600160a01b038116620001185760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a206f776e65722063616e6e6f7420626520307830000000000000604482015260640160405180910390fd5b6200012560008262000158565b620001517ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc78262000158565b5062000321565b62000164828262000168565b5050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620001645760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001c83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200021a90620002e4565b90600052602060002090601f0160209004810192826200023e576000855562000289565b82601f106200025957805160ff191683800117855562000289565b8280016001018555821562000289579182015b82811115620002895782518255916020019190600101906200026c565b50620002979291506200029b565b5090565b5b808211156200029757600081556001016200029c565b600060208284031215620002c557600080fd5b81516001600160a01b0381168114620002dd57600080fd5b9392505050565b600181811c90821680620002f957607f821691505b602082108114156200031b57634e487b7160e01b600052602260045260246000fd5b50919050565b612a3480620003316000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063c87b56dd116100a2578063e253abdf11610071578063e253abdf14610464578063e3684e3914610477578063e4623c1b1461050c578063e985e9c51461051f57600080fd5b8063c87b56dd14610418578063d547741f1461042b578063d69fc0f71461043e578063d82489101461045157600080fd5b806398831192116100de57806398831192146103bf578063a217fddf146103ea578063a22cb465146103f2578063b88d4fde1461040557600080fd5b806370a082311461036b57806391d148541461037e57806395d89b41146103b757600080fd5b80632f2ff15d1161017157806342966c681161014b57806342966c68146102f15780634e8b1dd514610304578063634252dc146103315780636352211e1461035857600080fd5b80632f2ff15d146102b857806336568abe146102cb57806342842e0e146102de57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c57806323b872dd146102515780632408ee8014610264578063248a9ca31461028757600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e23660046122cd565b61055b565b60405190151581526020015b60405180910390f35b61020461056c565b6040516101f39190612342565b61022461021f366004612355565b6105fe565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004612383565b610698565b005b61024f61025f3660046123af565b6107ca565b6101e7610272366004612355565b600a6020526000908152604090205460ff1681565b6102aa610295366004612355565b60009081526006602052604090206001015490565b6040519081526020016101f3565b61024f6102c63660046123f0565b610851565b61024f6102d93660046123f0565b610877565b61024f6102ec3660046123af565b610903565b61024f6102ff366004612355565b61091e565b6009546103189067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101f3565b6102aa7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc781565b610224610366366004612355565b610a3d565b6102aa610379366004612420565b610ac8565b6101e761038c3660046123f0565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610204610b62565b6102aa6103cd366004612459565b600b60209081526000928352604080842090915290825290205481565b6102aa600081565b61024f61040036600461249c565b610b71565b61024f6104133660046124e0565b610b7c565b610204610426366004612355565b610c0a565b61024f6104393660046123f0565b610d00565b61024f61044c3660046125c0565b610d26565b61024f61045f366004612643565b6110bc565b61024f61047236600461268c565b6111e2565b6104cb610485366004612355565b6008602052600090815260409020805460018201546002909201546001600160801b03821692600160801b90920467ffffffffffffffff16916001600160a01b03169084565b604080516001600160801b03909516855267ffffffffffffffff90931660208501526001600160a01b039091169183019190915260608201526080016101f3565b61024f61051a3660046126b6565b611245565b6101e761052d36600461272b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600061056682611348565b92915050565b60606000805461057b90612759565b80601f01602080910402602001604051908101604052809291908181526020018280546105a790612759565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661067c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006106a382610a3d565b9050806001600160a01b0316836001600160a01b0316141561072d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610673565b336001600160a01b03821614806107495750610749813361052d565b6107bb5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610673565b6107c58383611386565b505050565b6107d433826113f4565b6108465760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610673565b6107c58383836114eb565b60008281526006602052604090206001015461086d81336116b8565b6107c58383611738565b6001600160a01b03811633146108f55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610673565b6108ff82826117da565b5050565b6107c583838360405180602001604052806000815250610b7c565b60003361092a83610a3d565b600084815260086020526040902080546001600160a01b039290921692909214925067ffffffffffffffff428116600160801b9092041610828061096b5750805b6109b75760405162461bcd60e51b815260206004820152601660248201527f446f6e6174696f6e733a206e6f7420616c6c6f776564000000000000000000006044820152606401610673565b600282015460018301546001600160a01b03166000908152600b6020908152604080832086546001600160801b03168452909152812080549091906109fd9084906127aa565b90915550610a0c90508461185d565b60405184907f96ea52e88af2bea3b17b9b3ba76f7733ecd6fc5fa3472f7eafc77102171f869d90600090a250505050565b6000818152600260205260408120546001600160a01b0316806105665760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610673565b60006001600160a01b038216610b465760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610673565b506001600160a01b031660009081526003602052604090205490565b60606001805461057b90612759565b6108ff3383836118f8565b610b8633836113f4565b610bf85760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610673565b610c04848484846119c7565b50505050565b6000818152600260205260409020546060906001600160a01b0316610c975760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610673565b6000610cae60408051602081019091526000815290565b90506000815111610cce5760405180602001604052806000815250610cf9565b80610cd884611a50565b604051602001610ce99291906127c2565b6040516020818303038152906040525b9392505050565b600082815260066020526040902060010154610d1c81336116b8565b6107c583836117da565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc7610d5181336116b8565b604080516020808201889052818301879052825180830384018152606090920183528151918101919091206000818152600a9092529190205460ff1615610dda5760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a20616c72656164792070726f636573736564000000006044820152606401610673565b600954600090610df49067ffffffffffffffff16426127f1565b600754909150849060005b8281101561109657610e1082612814565b91506040518060800160405280898984818110610e2f57610e2f61282f565b610e459260206080909202019081019150612845565b6001600160801b031681526020018567ffffffffffffffff168152602001898984818110610e7557610e7561282f565b9050608002016040016020810190610e8d9190612420565b6001600160a01b03168152602001898984818110610ead57610ead61282f565b6060608090910292909201820135909252600085815260086020908152604091829020855181549287015167ffffffffffffffff16600160801b027fffffffffffffffff0000000000000000000000000000000000000000000000009093166001600160801b0390911617919091178155908401516001820180546001600160a01b039092166001600160a01b031990921691909117905592015160029092019190915550610f85888883818110610f6757610f6761282f565b9050608002016020016020810190610f7f9190612420565b83611b4e565b84888883818110610f9857610f9861282f565b610fae9260206080909202019081019150612845565b6001600160801b0316837f5e4312fc2f31556e7208795b28a8055258bd37b625cdc4bb64bbfafdb6532f508b8b86818110610feb57610feb61282f565b90506080020160400160208101906110039190612420565b888d8d888181106110165761101661282f565b905060800201606001358e8e898181106110325761103261282f565b905060800201602001602081019061104a9190612420565b604080516001600160a01b03958616815267ffffffffffffffff909416602085015283019190915291909116606082015260800160405180910390a461108f81612814565b9050610dff565b5060075550506000908152600a60205260409020805460ff191660011790555050505050565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc76110e781336116b8565b6001600160a01b0383166000908152600b602090815260408083206001600160801b0388168452909152902054806111615760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a206e6f7468696e6720746f20646f6e617465000000006044820152606401610673565b6001600160a01b038481166000818152600b602090815260408083206001600160801b038b168085529083528184209390935551858152938716937f27c209b93a7fe87531993c3ce2ab9e352e1e022adb1088729759d043daa08757910160405180910390a46111db6001600160a01b0385168483611c90565b5050505050565b60006111ee81336116b8565b6009805467ffffffffffffffff191667ffffffffffffffff84169081179091556040519081527f54578ea9dcb2f1fc35e2b4ff6947b808dfa81adf38483eaec4cde6d083cbcf519060200160405180910390a15050565b6000808067ffffffffffffffff421684825b8181101561133e578787828181106112715761127161282f565b602090810292909201356000818152600890935260409092208054929850965050600160801b900467ffffffffffffffff1683119350831561132e57600285015460018601546001600160a01b03166000908152600b6020908152604080832089546001600160801b03168452909152812080549091906112f39084906127aa565b9091555061130290508661185d565b60405186907f96ea52e88af2bea3b17b9b3ba76f7733ecd6fc5fa3472f7eafc77102171f869d90600090a25b61133781612814565b9050611257565b5050505050505050565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610566575061056682611d10565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113bb82610a3d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b031661146d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610673565b600061147883610a3d565b9050806001600160a01b0316846001600160a01b031614806114b35750836001600160a01b03166114a8846105fe565b6001600160a01b0316145b806114e357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166114fe82610a3d565b6001600160a01b03161461157a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610673565b6001600160a01b0382166115f55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610673565b611600600082611386565b6001600160a01b0383166000908152600360205260408120805460019290611629908490612860565b90915550506001600160a01b03821660009081526003602052604081208054600192906116579084906127aa565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166108ff576116f6816001600160a01b03166014611dab565b611701836020611dab565b604051602001611712929190612877565b60408051601f198184030181529082905262461bcd60e51b825261067391600401612342565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166108ff5760008281526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117963390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16156108ff5760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061186882610a3d565b9050611875600083611386565b6001600160a01b038116600090815260036020526040812080546001929061189e908490612860565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b0316141561195a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610673565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6119d28484846114eb565b6119de84848484611f70565b610c045760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610673565b606081611a745750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a9e5780611a8881612814565b9150611a979050600a8361290e565b9150611a78565b60008167ffffffffffffffff811115611ab957611ab96124ca565b6040519080825280601f01601f191660200182016040528015611ae3576020820181803683370190505b5090505b84156114e357611af8600183612860565b9150611b05600a86612922565b611b109060306127aa565b60f81b818381518110611b2557611b2561282f565b60200101906001600160f81b031916908160001a905350611b47600a8661290e565b9450611ae7565b6001600160a01b038216611ba45760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610673565b6000818152600260205260409020546001600160a01b031615611c095760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610673565b6001600160a01b0382166000908152600360205260408120805460019290611c329084906127aa565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526107c59084906120c4565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480611d7357506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061056657507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610566565b60606000611dba836002612936565b611dc59060026127aa565b67ffffffffffffffff811115611ddd57611ddd6124ca565b6040519080825280601f01601f191660200182016040528015611e07576020820181803683370190505b509050600360fc1b81600081518110611e2257611e2261282f565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611e6d57611e6d61282f565b60200101906001600160f81b031916908160001a9053506000611e91846002612936565b611e9c9060016127aa565b90505b6001811115611f21577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611edd57611edd61282f565b1a60f81b828281518110611ef357611ef361282f565b60200101906001600160f81b031916908160001a90535060049490941c93611f1a81612955565b9050611e9f565b508315610cf95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610673565b60006001600160a01b0384163b156120b957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fb490339089908890889060040161296c565b6020604051808303816000875af1925050508015611fef575060408051601f3d908101601f19168201909252611fec918101906129a8565b60015b61209f573d80801561201d576040519150601f19603f3d011682016040523d82523d6000602084013e612022565b606091505b5080516120975760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610673565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114e3565b506001949350505050565b6000612119826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121a99092919063ffffffff16565b8051909150156107c5578080602001905181019061213791906129c5565b6107c55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610673565b60606114e3848460008585843b6122025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610673565b600080866001600160a01b0316858760405161221e91906129e2565b60006040518083038185875af1925050503d806000811461225b576040519150601f19603f3d011682016040523d82523d6000602084013e612260565b606091505b509150915061227082828661227b565b979650505050505050565b6060831561228a575081610cf9565b82511561229a5782518084602001fd5b8160405162461bcd60e51b81526004016106739190612342565b6001600160e01b0319811681146122ca57600080fd5b50565b6000602082840312156122df57600080fd5b8135610cf9816122b4565b60005b838110156123055781810151838201526020016122ed565b83811115610c045750506000910152565b6000815180845261232e8160208601602086016122ea565b601f01601f19169290920160200192915050565b602081526000610cf96020830184612316565b60006020828403121561236757600080fd5b5035919050565b6001600160a01b03811681146122ca57600080fd5b6000806040838503121561239657600080fd5b82356123a18161236e565b946020939093013593505050565b6000806000606084860312156123c457600080fd5b83356123cf8161236e565b925060208401356123df8161236e565b929592945050506040919091013590565b6000806040838503121561240357600080fd5b8235915060208301356124158161236e565b809150509250929050565b60006020828403121561243257600080fd5b8135610cf98161236e565b80356001600160801b038116811461245457600080fd5b919050565b6000806040838503121561246c57600080fd5b82356124778161236e565b91506124856020840161243d565b90509250929050565b80151581146122ca57600080fd5b600080604083850312156124af57600080fd5b82356124ba8161236e565b915060208301356124158161248e565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156124f657600080fd5b84356125018161236e565b935060208501356125118161236e565b925060408501359150606085013567ffffffffffffffff8082111561253557600080fd5b818701915087601f83011261254957600080fd5b81358181111561255b5761255b6124ca565b604051601f8201601f19908116603f01168101908382118183101715612583576125836124ca565b816040528281528a602084870101111561259c57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080600080606085870312156125d657600080fd5b8435935060208501359250604085013567ffffffffffffffff808211156125fc57600080fd5b818701915087601f83011261261057600080fd5b81358181111561261f57600080fd5b8860208260071b850101111561263457600080fd5b95989497505060200194505050565b60008060006060848603121561265857600080fd5b6126618461243d565b925060208401356126718161236e565b915060408401356126818161236e565b809150509250925092565b60006020828403121561269e57600080fd5b813567ffffffffffffffff81168114610cf957600080fd5b600080602083850312156126c957600080fd5b823567ffffffffffffffff808211156126e157600080fd5b818501915085601f8301126126f557600080fd5b81358181111561270457600080fd5b8660208260051b850101111561271957600080fd5b60209290920196919550909350505050565b6000806040838503121561273e57600080fd5b82356127498161236e565b915060208301356124158161236e565b600181811c9082168061276d57607f821691505b6020821081141561278e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156127bd576127bd612794565b500190565b600083516127d48184602088016122ea565b8351908301906127e88183602088016122ea565b01949350505050565b600067ffffffffffffffff8083168185168083038211156127e8576127e8612794565b600060001982141561282857612828612794565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561285757600080fd5b610cf98261243d565b60008282101561287257612872612794565b500390565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516128af8160178501602088016122ea565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516128ec8160288401602088016122ea565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261291d5761291d6128f8565b500490565b600082612931576129316128f8565b500690565b600081600019048311821515161561295057612950612794565b500290565b60008161296457612964612794565b506000190190565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261299e6080830184612316565b9695505050505050565b6000602082840312156129ba57600080fd5b8151610cf9816122b4565b6000602082840312156129d757600080fd5b8151610cf98161248e565b600082516129f48184602087016122ea565b919091019291505056fea264697066735822122083e04a663a2269547a704af33e798583501f59b27c6604f778f487d0db92439664736f6c634300080a0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063c87b56dd116100a2578063e253abdf11610071578063e253abdf14610464578063e3684e3914610477578063e4623c1b1461050c578063e985e9c51461051f57600080fd5b8063c87b56dd14610418578063d547741f1461042b578063d69fc0f71461043e578063d82489101461045157600080fd5b806398831192116100de57806398831192146103bf578063a217fddf146103ea578063a22cb465146103f2578063b88d4fde1461040557600080fd5b806370a082311461036b57806391d148541461037e57806395d89b41146103b757600080fd5b80632f2ff15d1161017157806342966c681161014b57806342966c68146102f15780634e8b1dd514610304578063634252dc146103315780636352211e1461035857600080fd5b80632f2ff15d146102b857806336568abe146102cb57806342842e0e146102de57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c57806323b872dd146102515780632408ee8014610264578063248a9ca31461028757600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e23660046122cd565b61055b565b60405190151581526020015b60405180910390f35b61020461056c565b6040516101f39190612342565b61022461021f366004612355565b6105fe565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004612383565b610698565b005b61024f61025f3660046123af565b6107ca565b6101e7610272366004612355565b600a6020526000908152604090205460ff1681565b6102aa610295366004612355565b60009081526006602052604090206001015490565b6040519081526020016101f3565b61024f6102c63660046123f0565b610851565b61024f6102d93660046123f0565b610877565b61024f6102ec3660046123af565b610903565b61024f6102ff366004612355565b61091e565b6009546103189067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101f3565b6102aa7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc781565b610224610366366004612355565b610a3d565b6102aa610379366004612420565b610ac8565b6101e761038c3660046123f0565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610204610b62565b6102aa6103cd366004612459565b600b60209081526000928352604080842090915290825290205481565b6102aa600081565b61024f61040036600461249c565b610b71565b61024f6104133660046124e0565b610b7c565b610204610426366004612355565b610c0a565b61024f6104393660046123f0565b610d00565b61024f61044c3660046125c0565b610d26565b61024f61045f366004612643565b6110bc565b61024f61047236600461268c565b6111e2565b6104cb610485366004612355565b6008602052600090815260409020805460018201546002909201546001600160801b03821692600160801b90920467ffffffffffffffff16916001600160a01b03169084565b604080516001600160801b03909516855267ffffffffffffffff90931660208501526001600160a01b039091169183019190915260608201526080016101f3565b61024f61051a3660046126b6565b611245565b6101e761052d36600461272b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600061056682611348565b92915050565b60606000805461057b90612759565b80601f01602080910402602001604051908101604052809291908181526020018280546105a790612759565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661067c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006106a382610a3d565b9050806001600160a01b0316836001600160a01b0316141561072d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610673565b336001600160a01b03821614806107495750610749813361052d565b6107bb5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610673565b6107c58383611386565b505050565b6107d433826113f4565b6108465760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610673565b6107c58383836114eb565b60008281526006602052604090206001015461086d81336116b8565b6107c58383611738565b6001600160a01b03811633146108f55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610673565b6108ff82826117da565b5050565b6107c583838360405180602001604052806000815250610b7c565b60003361092a83610a3d565b600084815260086020526040902080546001600160a01b039290921692909214925067ffffffffffffffff428116600160801b9092041610828061096b5750805b6109b75760405162461bcd60e51b815260206004820152601660248201527f446f6e6174696f6e733a206e6f7420616c6c6f776564000000000000000000006044820152606401610673565b600282015460018301546001600160a01b03166000908152600b6020908152604080832086546001600160801b03168452909152812080549091906109fd9084906127aa565b90915550610a0c90508461185d565b60405184907f96ea52e88af2bea3b17b9b3ba76f7733ecd6fc5fa3472f7eafc77102171f869d90600090a250505050565b6000818152600260205260408120546001600160a01b0316806105665760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610673565b60006001600160a01b038216610b465760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610673565b506001600160a01b031660009081526003602052604090205490565b60606001805461057b90612759565b6108ff3383836118f8565b610b8633836113f4565b610bf85760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610673565b610c04848484846119c7565b50505050565b6000818152600260205260409020546060906001600160a01b0316610c975760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610673565b6000610cae60408051602081019091526000815290565b90506000815111610cce5760405180602001604052806000815250610cf9565b80610cd884611a50565b604051602001610ce99291906127c2565b6040516020818303038152906040525b9392505050565b600082815260066020526040902060010154610d1c81336116b8565b6107c583836117da565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc7610d5181336116b8565b604080516020808201889052818301879052825180830384018152606090920183528151918101919091206000818152600a9092529190205460ff1615610dda5760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a20616c72656164792070726f636573736564000000006044820152606401610673565b600954600090610df49067ffffffffffffffff16426127f1565b600754909150849060005b8281101561109657610e1082612814565b91506040518060800160405280898984818110610e2f57610e2f61282f565b610e459260206080909202019081019150612845565b6001600160801b031681526020018567ffffffffffffffff168152602001898984818110610e7557610e7561282f565b9050608002016040016020810190610e8d9190612420565b6001600160a01b03168152602001898984818110610ead57610ead61282f565b6060608090910292909201820135909252600085815260086020908152604091829020855181549287015167ffffffffffffffff16600160801b027fffffffffffffffff0000000000000000000000000000000000000000000000009093166001600160801b0390911617919091178155908401516001820180546001600160a01b039092166001600160a01b031990921691909117905592015160029092019190915550610f85888883818110610f6757610f6761282f565b9050608002016020016020810190610f7f9190612420565b83611b4e565b84888883818110610f9857610f9861282f565b610fae9260206080909202019081019150612845565b6001600160801b0316837f5e4312fc2f31556e7208795b28a8055258bd37b625cdc4bb64bbfafdb6532f508b8b86818110610feb57610feb61282f565b90506080020160400160208101906110039190612420565b888d8d888181106110165761101661282f565b905060800201606001358e8e898181106110325761103261282f565b905060800201602001602081019061104a9190612420565b604080516001600160a01b03958616815267ffffffffffffffff909416602085015283019190915291909116606082015260800160405180910390a461108f81612814565b9050610dff565b5060075550506000908152600a60205260409020805460ff191660011790555050505050565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc76110e781336116b8565b6001600160a01b0383166000908152600b602090815260408083206001600160801b0388168452909152902054806111615760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a206e6f7468696e6720746f20646f6e617465000000006044820152606401610673565b6001600160a01b038481166000818152600b602090815260408083206001600160801b038b168085529083528184209390935551858152938716937f27c209b93a7fe87531993c3ce2ab9e352e1e022adb1088729759d043daa08757910160405180910390a46111db6001600160a01b0385168483611c90565b5050505050565b60006111ee81336116b8565b6009805467ffffffffffffffff191667ffffffffffffffff84169081179091556040519081527f54578ea9dcb2f1fc35e2b4ff6947b808dfa81adf38483eaec4cde6d083cbcf519060200160405180910390a15050565b6000808067ffffffffffffffff421684825b8181101561133e578787828181106112715761127161282f565b602090810292909201356000818152600890935260409092208054929850965050600160801b900467ffffffffffffffff1683119350831561132e57600285015460018601546001600160a01b03166000908152600b6020908152604080832089546001600160801b03168452909152812080549091906112f39084906127aa565b9091555061130290508661185d565b60405186907f96ea52e88af2bea3b17b9b3ba76f7733ecd6fc5fa3472f7eafc77102171f869d90600090a25b61133781612814565b9050611257565b5050505050505050565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610566575061056682611d10565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113bb82610a3d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b031661146d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610673565b600061147883610a3d565b9050806001600160a01b0316846001600160a01b031614806114b35750836001600160a01b03166114a8846105fe565b6001600160a01b0316145b806114e357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166114fe82610a3d565b6001600160a01b03161461157a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610673565b6001600160a01b0382166115f55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610673565b611600600082611386565b6001600160a01b0383166000908152600360205260408120805460019290611629908490612860565b90915550506001600160a01b03821660009081526003602052604081208054600192906116579084906127aa565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166108ff576116f6816001600160a01b03166014611dab565b611701836020611dab565b604051602001611712929190612877565b60408051601f198184030181529082905262461bcd60e51b825261067391600401612342565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166108ff5760008281526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117963390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16156108ff5760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061186882610a3d565b9050611875600083611386565b6001600160a01b038116600090815260036020526040812080546001929061189e908490612860565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b0316141561195a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610673565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6119d28484846114eb565b6119de84848484611f70565b610c045760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610673565b606081611a745750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a9e5780611a8881612814565b9150611a979050600a8361290e565b9150611a78565b60008167ffffffffffffffff811115611ab957611ab96124ca565b6040519080825280601f01601f191660200182016040528015611ae3576020820181803683370190505b5090505b84156114e357611af8600183612860565b9150611b05600a86612922565b611b109060306127aa565b60f81b818381518110611b2557611b2561282f565b60200101906001600160f81b031916908160001a905350611b47600a8661290e565b9450611ae7565b6001600160a01b038216611ba45760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610673565b6000818152600260205260409020546001600160a01b031615611c095760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610673565b6001600160a01b0382166000908152600360205260408120805460019290611c329084906127aa565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526107c59084906120c4565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480611d7357506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061056657507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610566565b60606000611dba836002612936565b611dc59060026127aa565b67ffffffffffffffff811115611ddd57611ddd6124ca565b6040519080825280601f01601f191660200182016040528015611e07576020820181803683370190505b509050600360fc1b81600081518110611e2257611e2261282f565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611e6d57611e6d61282f565b60200101906001600160f81b031916908160001a9053506000611e91846002612936565b611e9c9060016127aa565b90505b6001811115611f21577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611edd57611edd61282f565b1a60f81b828281518110611ef357611ef361282f565b60200101906001600160f81b031916908160001a90535060049490941c93611f1a81612955565b9050611e9f565b508315610cf95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610673565b60006001600160a01b0384163b156120b957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fb490339089908890889060040161296c565b6020604051808303816000875af1925050508015611fef575060408051601f3d908101601f19168201909252611fec918101906129a8565b60015b61209f573d80801561201d576040519150601f19603f3d011682016040523d82523d6000602084013e612022565b606091505b5080516120975760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610673565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114e3565b506001949350505050565b6000612119826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121a99092919063ffffffff16565b8051909150156107c5578080602001905181019061213791906129c5565b6107c55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610673565b60606114e3848460008585843b6122025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610673565b600080866001600160a01b0316858760405161221e91906129e2565b60006040518083038185875af1925050503d806000811461225b576040519150601f19603f3d011682016040523d82523d6000602084013e612260565b606091505b509150915061227082828661227b565b979650505050505050565b6060831561228a575081610cf9565b82511561229a5782518084602001fd5b8160405162461bcd60e51b81526004016106739190612342565b6001600160e01b0319811681146122ca57600080fd5b50565b6000602082840312156122df57600080fd5b8135610cf9816122b4565b60005b838110156123055781810151838201526020016122ed565b83811115610c045750506000910152565b6000815180845261232e8160208601602086016122ea565b601f01601f19169290920160200192915050565b602081526000610cf96020830184612316565b60006020828403121561236757600080fd5b5035919050565b6001600160a01b03811681146122ca57600080fd5b6000806040838503121561239657600080fd5b82356123a18161236e565b946020939093013593505050565b6000806000606084860312156123c457600080fd5b83356123cf8161236e565b925060208401356123df8161236e565b929592945050506040919091013590565b6000806040838503121561240357600080fd5b8235915060208301356124158161236e565b809150509250929050565b60006020828403121561243257600080fd5b8135610cf98161236e565b80356001600160801b038116811461245457600080fd5b919050565b6000806040838503121561246c57600080fd5b82356124778161236e565b91506124856020840161243d565b90509250929050565b80151581146122ca57600080fd5b600080604083850312156124af57600080fd5b82356124ba8161236e565b915060208301356124158161248e565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156124f657600080fd5b84356125018161236e565b935060208501356125118161236e565b925060408501359150606085013567ffffffffffffffff8082111561253557600080fd5b818701915087601f83011261254957600080fd5b81358181111561255b5761255b6124ca565b604051601f8201601f19908116603f01168101908382118183101715612583576125836124ca565b816040528281528a602084870101111561259c57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080600080606085870312156125d657600080fd5b8435935060208501359250604085013567ffffffffffffffff808211156125fc57600080fd5b818701915087601f83011261261057600080fd5b81358181111561261f57600080fd5b8860208260071b850101111561263457600080fd5b95989497505060200194505050565b60008060006060848603121561265857600080fd5b6126618461243d565b925060208401356126718161236e565b915060408401356126818161236e565b809150509250925092565b60006020828403121561269e57600080fd5b813567ffffffffffffffff81168114610cf957600080fd5b600080602083850312156126c957600080fd5b823567ffffffffffffffff808211156126e157600080fd5b818501915085601f8301126126f557600080fd5b81358181111561270457600080fd5b8660208260051b850101111561271957600080fd5b60209290920196919550909350505050565b6000806040838503121561273e57600080fd5b82356127498161236e565b915060208301356124158161236e565b600181811c9082168061276d57607f821691505b6020821081141561278e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156127bd576127bd612794565b500190565b600083516127d48184602088016122ea565b8351908301906127e88183602088016122ea565b01949350505050565b600067ffffffffffffffff8083168185168083038211156127e8576127e8612794565b600060001982141561282857612828612794565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561285757600080fd5b610cf98261243d565b60008282101561287257612872612794565b500390565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516128af8160178501602088016122ea565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516128ec8160288401602088016122ea565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261291d5761291d6128f8565b500490565b600082612931576129316128f8565b500690565b600081600019048311821515161561295057612950612794565b500290565b60008161296457612964612794565b506000190190565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261299e6080830184612316565b9695505050505050565b6000602082840312156129ba57600080fd5b8151610cf9816122b4565b6000602082840312156129d757600080fd5b8151610cf98161248e565b600082516129f48184602087016122ea565b919091019291505056fea264697066735822122083e04a663a2269547a704af33e798583501f59b27c6604f778f487d0db92439664736f6c634300080a0033","abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"DonationBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"uint128","name":"destinationId","type":"uint128"},{"indexed":true,"internalType":"bytes32","name":"groupId","type":"bytes32"},{"indexed":false,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"expiry","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"DonationMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint128","name":"destinationId","type":"uint128"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"DonationsSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"TTLUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WORKER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_ids","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint128","name":"_destinationId","type":"uint128"},{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"donate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"metadata","outputs":[{"internalType":"uint128","name":"destinationId","type":"uint128"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"uint256","name":"_batchNr","type":"uint256"},{"components":[{"internalType":"uint128","name":"destinationId","type":"uint128"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Donations.DonationParams[]","name":"_params","type":"tuple[]"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"processedDonationsGroups","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_ttl","type":"uint64"}],"name":"setTTL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"","type":"address"},{"internalType":"uint128","name":"","type":"uint128"}],"name":"transferableAmounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ttl","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}]}