{"metadata":"{\"compiler\":{\"version\":\"0.8.10\"},\"sources\":{\"contracts/Donations.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.10;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { ERC721A } from \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * A contract to store donations before they are transferred to the charities.\\n */\\ncontract Donations is ERC721A, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant WORKER_ROLE = keccak256(\\\"WORKER_ROLE\\\");\\n\\n    struct DonationParams {\\n        uint128 destinationId;\\n        address owner;\\n        IERC20 token;\\n        uint256 amount;\\n        string donationId;\\n    }\\n\\n    struct Metadata {\\n        uint128 destinationId;\\n        uint64 expiry;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    event DonationMinted(\\n        uint256 indexed id,\\n        uint128 indexed destinationId,\\n        bytes32 indexed groupId,\\n        IERC20 token,\\n        uint256 expiry,\\n        uint256 amount,\\n        address owner,\\n        string donationId\\n    );\\n\\n    event DonationBurned(uint256 indexed id, string donationId);\\n\\n    event DonationsSent(\\n        uint128 indexed destinationId,\\n        IERC20 indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event TTLUpdated(uint64 ttl);\\n\\n    uint256 private metadataId;\\n    mapping(uint256 => Metadata) public metadata;\\n\\n    /// Duration of the expiration date for new donations.\\n    uint64 public ttl = 180 days;\\n\\n    /// Used to indicate whether a group of donations identified by the key has been processed or not.\\n    mapping(bytes32 => bool) public processedDonationsGroups;\\n\\n    /// Stores how much should be transferred to each charity in each coin.\\n    mapping(IERC20 => mapping(uint128 => uint256)) public transferableAmounts;\\n\\n    /**\\n     * @param _owner Account that will receive the admin role.\\n     */\\n    constructor(address _owner) ERC721A(\\\"Sandclock Donation\\\", \\\"Donations\\\") {\\n        require(_owner != address(0x0), \\\"Vault: owner cannot be 0x0\\\");\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(WORKER_ROLE, _owner);\\n    }\\n\\n    /**\\n     * Changes the TTL for new donations.\\n     *\\n     * @param _ttl the new TTL.\\n     */\\n    function setTTL(uint64 _ttl) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        ttl = _ttl;\\n\\n        emit TTLUpdated(_ttl);\\n    }\\n\\n    /**\\n     * Transfers the donated funds in the currency @param _token to the charity with the id @param _destinationId.\\n     *\\n     * @param _destinationId ID of the charity.\\n     * @param _token Currency to transfer the funds from.\\n     * @param _to Address of the charity.\\n     */\\n    function donate(\\n        uint128 _destinationId,\\n        IERC20 _token,\\n        address _to\\n    ) external onlyRole(WORKER_ROLE) {\\n        uint256 amount = transferableAmounts[_token][_destinationId];\\n        require(amount != 0, \\\"Donations: nothing to donate\\\");\\n\\n        transferableAmounts[_token][_destinationId] = 0;\\n\\n        emit DonationsSent(_destinationId, _token, _to, amount);\\n\\n        _token.safeTransfer(_to, amount);\\n    }\\n\\n    /**\\n     * Mints an NFT for every donation in @param _params.\\n     * The @param _txHash and @param _batchNr uniquely identify a group of donations.\\n     *\\n     * @param _txHash The hash of the transaction where the yield for these donations was claimed.\\n     * @param _batchNr When there are too many donations in a claim, we break them into batches to not reach the gas limit.\\n     * @param _params Donation params.\\n     */\\n    function mint(\\n        bytes32 _txHash,\\n        uint256 _batchNr,\\n        DonationParams[] calldata _params\\n    ) external onlyRole(WORKER_ROLE) {\\n        bytes32 groupId = keccak256(abi.encodePacked(_txHash, _batchNr));\\n\\n        require(\\n            !processedDonationsGroups[groupId],\\n            \\\"Donations: already processed\\\"\\n        );\\n\\n        uint64 expiry = _getBlockTimestamp() + ttl;\\n        uint256 length = _params.length;\\n        uint256 _metadataId = metadataId;\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            ++_metadataId;\\n\\n            metadata[_metadataId] = Metadata({\\n                destinationId: _params[i].destinationId,\\n                token: _params[i].token,\\n                expiry: expiry,\\n                amount: _params[i].amount\\n            });\\n\\n            _mint(_params[i].owner, 1);\\n\\n            emit DonationMinted(\\n                _metadataId,\\n                _params[i].destinationId,\\n                groupId,\\n                _params[i].token,\\n                expiry,\\n                _params[i].amount,\\n                _params[i].owner,\\n                _params[i].donationId\\n            );\\n        }\\n\\n        metadataId = _metadataId;\\n\\n        processedDonationsGroups[groupId] = true;\\n    }\\n\\n    /**\\n     * Burns the NFT and sets the amount donated to be transferred to the charity.\\n     *\\n     * @param _id ID of the NFT.\\n     */\\n    function burn(uint256 _id, string calldata donationId) external {\\n        bool isOwner = ownerOf(_id) == _msgSender();\\n\\n        Metadata storage data = metadata[_id];\\n\\n        bool expired = data.expiry < _getBlockTimestamp();\\n\\n        require(isOwner || expired, \\\"Donations: not allowed\\\");\\n\\n        transferableAmounts[data.token][data.destinationId] += data.amount;\\n\\n        _burn(_id);\\n\\n        emit DonationBurned(_id, donationId);\\n    }\\n\\n    /**\\n     * Basically similar to the above burn() method but is called on an array of _ids\\n     * Expected to be called by the backend to burn a bunch of NFTs when they expire\\n     *\\n     * @param _ids IDs of the NFTs.\\n     */\\n    function burnBatch(uint256[] calldata _ids, string[] calldata donationIds) external {\\n        uint256 _id;\\n        Metadata storage data;\\n        bool expired;\\n\\n        uint256 timestamp = _getBlockTimestamp();\\n\\n        uint256 idsLen = _ids.length;\\n        for (uint256 i = 0; i < idsLen; ++i) {\\n            _id = _ids[i];\\n            data = metadata[_id];\\n\\n            expired = data.expiry < timestamp;\\n\\n            // used an if statement instead of require so that the method will keep on running for the other ids and not stop execution\\n            if (expired) {\\n                transferableAmounts[data.token][data.destinationId] += data\\n                    .amount;\\n\\n                _burn(_id);\\n\\n                emit DonationBurned(_id, donationIds[i]);\\n            }\\n        }\\n    }\\n\\n    function _getBlockTimestamp() private view returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControl, ERC721A)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.0.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * The caller cannot approve to the current owner.\\n     */\\n    error ApprovalToCurrentOwner();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // ==============================\\n    //            IERC721\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // ==============================\\n    //        IERC721Metadata\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.0.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev ERC721 token receiver interface.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Mask of an entry in packed address data.\\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant BITMASK_BURNED = 1 << 224;\\n    \\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See `_packedOwnershipOf` implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * @dev Returns the starting token ID. \\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count. \\n     * To get the total number of tokens minted, please see `_totalMinted`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to `_startTokenId()`\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        assembly { // Cast aux without masking.\\n            auxCasted := aux\\n        }\\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an ownership that has an address and is not burned\\n                        // before an ownership that does not have an address and is not burned.\\n                        // Hence, curr will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed is zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & BITMASK_BURNED != 0;\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev Casts the address to uint256 without masking.\\n     */\\n    function _addressToUint256(address value) private pure returns (uint256 result) {\\n        assembly {\\n            result := value\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts the boolean to uint256 without branching.\\n     */\\n    function _boolToUint256(bool value) private pure returns (uint256 result) {\\n        assembly {\\n            result := value\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = address(uint160(_packedOwnershipOf(tokenId)));\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the balance and number minted.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (to.code.length != 0) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex < end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex < end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the balance and number minted.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            do {\\n                emit Transfer(address(0), to, updatedIndex++);\\n            } while (updatedIndex < end);\\n\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\n            isApprovedForAll(from, _msgSenderERC721A()) ||\\n            getApproved(tokenId) == _msgSenderERC721A());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        delete _tokenApprovals[tokenId];\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                BITMASK_NEXT_INITIALIZED;\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\n                isApprovedForAll(from, _msgSenderERC721A()) ||\\n                getApproved(tokenId) == _msgSenderERC721A());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        delete _tokenApprovals[tokenId];\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] =\\n                _addressToUint256(from) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                BITMASK_BURNED | \\n                BITMASK_NEXT_INITIALIZED;\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), \\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\n            // We will need 1 32-byte word to store the length, \\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\n            ptr := add(mload(0x40), 128)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, ptr)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := ptr\\n\\n            // We write the string from the rightmost digit to the leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // Costs a bit more than early returning for the zero case,\\n            // but cheaper in terms of deployment and overall runtime costs.\\n            for { \\n                // Initialize and perform the first pass without check.\\n                let temp := value\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\n                ptr := sub(ptr, 1)\\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n            } temp { \\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n            } { // Body of the for loop.\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n            }\\n            \\n            let length := sub(end, ptr)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            ptr := sub(ptr, 32)\\n            // Store the length.\\n            mstore(ptr, length)\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"}}}","address":"0x470B125472930374AE711dE53B9D4221889Fe131","bytecode":"0x6080604052600b80546001600160401b03191662ed4e001790553480156200002657600080fd5b5060405162002b9638038062002b968339810160408190526200004991620002b6565b604080518082018252601281527129b0b73231b637b1b5902237b730ba34b7b760711b602080830191825283518085019094526009845268446f6e6174696f6e7360b81b908401528151919291620000a49160029162000210565b508051620000ba90600390602084019062000210565b506000805550506001600160a01b0381166200011c5760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a206f776e65722063616e6e6f7420626520307830000000000000604482015260640160405180910390fd5b620001296000826200015c565b620001557ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc7826200015c565b5062000325565b6200016882826200016c565b5050565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff16620001685760008281526008602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001cc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200021e90620002e8565b90600052602060002090601f0160209004810192826200024257600085556200028d565b82601f106200025d57805160ff19168380011785556200028d565b828001600101855582156200028d579182015b828111156200028d57825182559160200191906001019062000270565b506200029b9291506200029f565b5090565b5b808211156200029b5760008155600101620002a0565b600060208284031215620002c957600080fd5b81516001600160a01b0381168114620002e157600080fd5b9392505050565b600181811c90821680620002fd57607f821691505b602082108114156200031f57634e487b7160e01b600052602260045260246000fd5b50919050565b61286180620003356000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063a22cb465116100a2578063d824891011610071578063d824891014610477578063e253abdf1461048a578063e3684e391461049d578063e985e9c51461053257600080fd5b8063a22cb4651461042b578063b88d4fde1461043e578063c87b56dd14610451578063d547741f1461046457600080fd5b806391d14854116100de57806391d14854146103b757806395d89b41146103f057806398831192146103f8578063a217fddf1461042357600080fd5b806370a082311461037e5780637641e6f3146103915780637cdb7495146103a457600080fd5b80632408ee801161017c57806342842e0e1161014b57806342842e0e146103045780634e8b1dd514610317578063634252dc146103445780636352211e1461036b57600080fd5b80632408ee8014610298578063248a9ca3146102bb5780632f2ff15d146102de57806336568abe146102f157600080fd5b8063081812fc116101b8578063081812fc14610231578063095ea7b31461025c57806318160ddd1461026f57806323b872dd1461028557600080fd5b806301ffc9a7146101df57806306f2a6be1461020757806306fdde031461021c575b600080fd5b6101f26101ed366004611fe3565b61056e565b60405190151581526020015b60405180910390f35b61021a61021536600461204c565b61057f565b005b6102246106b5565b6040516101fe9190612110565b61024461023f366004612123565b610747565b6040516001600160a01b0390911681526020016101fe565b61021a61026a366004612151565b6107a4565b600154600054035b6040519081526020016101fe565b61021a61029336600461217d565b6108b6565b6101f26102a6366004612123565b600c6020526000908152604090205460ff1681565b6102776102c9366004612123565b60009081526008602052604090206001015490565b61021a6102ec3660046121be565b6108c6565b61021a6102ff3660046121be565b6108ec565b61021a61031236600461217d565b61097d565b600b5461032b9067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101fe565b6102777ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc781565b610244610379366004612123565b610998565b61027761038c3660046121ee565b6109a3565b61021a61039f36600461220b565b610a0b565b61021a6103b2366004612287565b610b3b565b6101f26103c53660046121be565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610224610f41565b6102776104063660046122ea565b600d60209081526000928352604080842090915290825290205481565b610277600081565b61021a61043936600461232d565b610f50565b61021a61044c366004612371565b610fff565b61022461045f366004612123565b611049565b61021a6104723660046121be565b6110f4565b61021a610485366004612451565b61111a565b61021a61049836600461249a565b611240565b6104f16104ab366004612123565b600a602052600090815260409020805460018201546002909201546001600160801b03821692600160801b90920467ffffffffffffffff16916001600160a01b03169084565b604080516001600160801b03909516855267ffffffffffffffff90931660208501526001600160a01b039091169183019190915260608201526080016101fe565b6101f26105403660046124c4565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6000610579826112a3565b92915050565b6000808067ffffffffffffffff421686825b818110156106a9578989828181106105ab576105ab6124f2565b602090810292909201356000818152600a90935260409092208054929850965050600160801b900467ffffffffffffffff1683119350831561069957600285015460018601546001600160a01b03166000908152600d6020908152604080832089546001600160801b031684529091528120805490919061062d90849061251e565b9091555061063c90508661130a565b857f6874c596aaaff0aa80bb2fa847845de413cb824db72206cecb813fdbffcb7cc8898984818110610670576106706124f2565b90506020028101906106829190612536565b6040516106909291906125a6565b60405180910390a25b6106a2816125ba565b9050610591565b50505050505050505050565b6060600280546106c4906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546106f0906125d5565b801561073d5780601f106107125761010080835404028352916020019161073d565b820191906000526020600020905b81548152906001019060200180831161072057829003601f168201915b5050505050905090565b600061075282611318565b610788576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006107af8261133f565b9050806001600160a01b0316836001600160a01b031614156107fd576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b0382161461084d576108178133610540565b61084d576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260066020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6108c18383836113b9565b505050565b6000828152600860205260409020600101546108e2813361159a565b6108c1838361161a565b6001600160a01b038116331461096f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61097982826116bc565b5050565b6108c183838360405180602001604052806000815250610fff565b60006105798261133f565b60006001600160a01b0382166109e5576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b600033610a1785610998565b6000868152600a6020526040902080546001600160a01b039290921692909214925067ffffffffffffffff428116600160801b90920416108280610a585750805b610aa45760405162461bcd60e51b815260206004820152601660248201527f446f6e6174696f6e733a206e6f7420616c6c6f776564000000000000000000006044820152606401610966565b600282015460018301546001600160a01b03166000908152600d6020908152604080832086546001600160801b0316845290915281208054909190610aea90849061251e565b90915550610af990508661130a565b857f6874c596aaaff0aa80bb2fa847845de413cb824db72206cecb813fdbffcb7cc88686604051610b2b9291906125a6565b60405180910390a2505050505050565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc7610b66813361159a565b604080516020808201889052818301879052825180830384018152606090920183528151918101919091206000818152600c9092529190205460ff1615610bef5760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a20616c72656164792070726f636573736564000000006044820152606401610966565b600b54600090610c099067ffffffffffffffff1642612610565b600954909150849060005b82811015610f1b57610c25826125ba565b91506040518060800160405280898984818110610c4457610c446124f2565b9050602002810190610c56919061263c565b610c6490602081019061265c565b6001600160801b031681526020018567ffffffffffffffff168152602001898984818110610c9457610c946124f2565b9050602002810190610ca6919061263c565b610cb79060608101906040016121ee565b6001600160a01b03168152602001898984818110610cd757610cd76124f2565b9050602002810190610ce9919061263c565b6060908101359091526000848152600a6020908152604091829020845181549286015167ffffffffffffffff16600160801b027fffffffffffffffff0000000000000000000000000000000000000000000000009093166001600160801b0390911617919091178155908301516001820180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19909216919091179055910151600290910155610dce888883818110610da457610da46124f2565b9050602002810190610db6919061263c565b610dc79060408101906020016121ee565b600161173f565b84888883818110610de157610de16124f2565b9050602002810190610df3919061263c565b610e0190602081019061265c565b6001600160801b0316837fdacba2fa7b75fcde690c6d8dae704d859ebc3b89dae3cf49357d6a12a9e0193d8b8b86818110610e3e57610e3e6124f2565b9050602002810190610e50919061263c565b610e619060608101906040016121ee565b888d8d88818110610e7457610e746124f2565b9050602002810190610e86919061263c565b606001358e8e89818110610e9c57610e9c6124f2565b9050602002810190610eae919061263c565b610ebf9060408101906020016121ee565b8f8f8a818110610ed157610ed16124f2565b9050602002810190610ee3919061263c565b610ef1906080810190612536565b604051610f0396959493929190612677565b60405180910390a4610f14816125ba565b9050610c14565b5060095550506000908152600c60205260409020805460ff191660011790555050505050565b6060600380546106c4906125d5565b6001600160a01b038216331415610f93576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61100a8484846113b9565b6001600160a01b0383163b156110435761102684848484611850565b611043576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061105482611318565b61108a576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006110a160408051602081019091526000815290565b90508051600014156110c257604051806020016040528060008152506110ed565b806110cc84611938565b6040516020016110dd9291906126c6565b6040516020818303038152906040525b9392505050565b600082815260086020526040902060010154611110813361159a565b6108c183836116bc565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc7611145813361159a565b6001600160a01b0383166000908152600d602090815260408083206001600160801b0388168452909152902054806111bf5760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a206e6f7468696e6720746f20646f6e617465000000006044820152606401610966565b6001600160a01b038481166000818152600d602090815260408083206001600160801b038b168085529083528184209390935551858152938716937f27c209b93a7fe87531993c3ce2ab9e352e1e022adb1088729759d043daa08757910160405180910390a46112396001600160a01b0385168483611987565b5050505050565b600061124c813361159a565b600b805467ffffffffffffffff191667ffffffffffffffff84169081179091556040519081527f54578ea9dcb2f1fc35e2b4ff6947b808dfa81adf38483eaec4cde6d083cbcf519060200160405180910390a15050565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061057957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610579565b611315816000611a07565b50565b6000805482108015610579575050600090815260046020526040902054600160e01b161590565b60008160005481101561138757600081815260046020526040902054600160e01b8116611385575b806110ed575060001901600081815260046020526040902054611367565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006113c48261133f565b9050836001600160a01b0316816001600160a01b031614611411576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000336001600160a01b038616148061142f575061142f8533610540565b8061144a57503361143f84610747565b6001600160a01b0316145b90508061146a57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166114aa576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600660209081526040808320805473ffffffffffffffffffffffffffffffffffffffff191690556001600160a01b038881168452600583528184208054600019019055871683528083208054600101905585835260049091529020600160e11b4260a01b86178117909155821661155457600183016000818152600460205260409020546115525760005481146115525760008181526004602052604090208390555b505b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611239565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff16610979576115d8816001600160a01b03166014611b78565b6115e3836020611b78565b6040516020016115f49291906126ec565b60408051601f198184030181529082905262461bcd60e51b825261096691600401612110565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff166109795760008281526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116783390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff16156109795760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000546001600160a01b038316611782576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816117b9576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660009081526005602090815260408083208054680100000000000000018702019055838352600490915290204260a01b84176001841460e11b179055808083015b6040516001830192906001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48082106118045750600055505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061188590339089908890889060040161276d565b6020604051808303816000875af19250505080156118c0575060408051601f3d908101601f191682019092526118bd918101906127a9565b60015b61191b573d8080156118ee576040519150601f19603f3d011682016040523d82523d6000602084013e6118f3565b606091505b508051611913576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b604080516080810191829052607f0190826030600a8206018353600a90045b801561197557600183039250600a81066030018353600a9004611957565b50819003601f19909101908152919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526108c1908490611d59565b6000611a128361133f565b9050808215611a76576000336001600160a01b0383161480611a395750611a398233610540565b80611a54575033611a4986610747565b6001600160a01b0316145b905080611a7457604051632ce44b5f60e11b815260040160405180910390fd5b505b6000848152600660209081526040808320805473ffffffffffffffffffffffffffffffffffffffff191690556001600160a01b03841683526005825280832080546001600160801b03019055868352600490915290207c03000000000000000000000000000000000000000000000000000000004260a01b8317179055600160e11b8216611b325760018401600081815260046020526040902054611b30576000548114611b305760008181526004602052604090208390555b505b60405184906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505060018054810190555050565b60606000611b878360026127c6565b611b9290600261251e565b67ffffffffffffffff811115611baa57611baa61235b565b6040519080825280601f01601f191660200182016040528015611bd4576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611c0b57611c0b6124f2565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611c5657611c566124f2565b60200101906001600160f81b031916908160001a9053506000611c7a8460026127c6565b611c8590600161251e565b90505b6001811115611d0a577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611cc657611cc66124f2565b1a60f81b828281518110611cdc57611cdc6124f2565b60200101906001600160f81b031916908160001a90535060049490941c93611d03816127e5565b9050611c88565b5083156110ed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610966565b6000611dae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e3e9092919063ffffffff16565b8051909150156108c15780806020019051810190611dcc91906127fc565b6108c15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610966565b6060611e4d8484600085611e55565b949350505050565b606082471015611ecd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610966565b843b611f1b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610966565b600080866001600160a01b03168587604051611f379190612819565b60006040518083038185875af1925050503d8060008114611f74576040519150601f19603f3d011682016040523d82523d6000602084013e611f79565b606091505b5091509150611f89828286611f94565b979650505050505050565b60608315611fa35750816110ed565b825115611fb35782518084602001fd5b8160405162461bcd60e51b81526004016109669190612110565b6001600160e01b03198116811461131557600080fd5b600060208284031215611ff557600080fd5b81356110ed81611fcd565b60008083601f84011261201257600080fd5b50813567ffffffffffffffff81111561202a57600080fd5b6020830191508360208260051b850101111561204557600080fd5b9250929050565b6000806000806040858703121561206257600080fd5b843567ffffffffffffffff8082111561207a57600080fd5b61208688838901612000565b9096509450602087013591508082111561209f57600080fd5b506120ac87828801612000565b95989497509550505050565b60005b838110156120d35781810151838201526020016120bb565b838111156110435750506000910152565b600081518084526120fc8160208601602086016120b8565b601f01601f19169290920160200192915050565b6020815260006110ed60208301846120e4565b60006020828403121561213557600080fd5b5035919050565b6001600160a01b038116811461131557600080fd5b6000806040838503121561216457600080fd5b823561216f8161213c565b946020939093013593505050565b60008060006060848603121561219257600080fd5b833561219d8161213c565b925060208401356121ad8161213c565b929592945050506040919091013590565b600080604083850312156121d157600080fd5b8235915060208301356121e38161213c565b809150509250929050565b60006020828403121561220057600080fd5b81356110ed8161213c565b60008060006040848603121561222057600080fd5b83359250602084013567ffffffffffffffff8082111561223f57600080fd5b818601915086601f83011261225357600080fd5b81358181111561226257600080fd5b87602082850101111561227457600080fd5b6020830194508093505050509250925092565b6000806000806060858703121561229d57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156122c257600080fd5b6120ac87828801612000565b80356001600160801b03811681146122e557600080fd5b919050565b600080604083850312156122fd57600080fd5b82356123088161213c565b9150612316602084016122ce565b90509250929050565b801515811461131557600080fd5b6000806040838503121561234057600080fd5b823561234b8161213c565b915060208301356121e38161231f565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561238757600080fd5b84356123928161213c565b935060208501356123a28161213c565b925060408501359150606085013567ffffffffffffffff808211156123c657600080fd5b818701915087601f8301126123da57600080fd5b8135818111156123ec576123ec61235b565b604051601f8201601f19908116603f011681019083821181831017156124145761241461235b565b816040528281528a602084870101111561242d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561246657600080fd5b61246f846122ce565b9250602084013561247f8161213c565b9150604084013561248f8161213c565b809150509250925092565b6000602082840312156124ac57600080fd5b813567ffffffffffffffff811681146110ed57600080fd5b600080604083850312156124d757600080fd5b82356124e28161213c565b915060208301356121e38161213c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561253157612531612508565b500190565b6000808335601e1984360301811261254d57600080fd5b83018035915067ffffffffffffffff82111561256857600080fd5b60200191503681900382131561204557600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611e4d60208301848661257d565b60006000198214156125ce576125ce612508565b5060010190565b600181811c908216806125e957607f821691505b6020821081141561260a57634e487b7160e01b600052602260045260246000fd5b50919050565b600067ffffffffffffffff80831681851680830382111561263357612633612508565b01949350505050565b60008235609e1983360301811261265257600080fd5b9190910192915050565b60006020828403121561266e57600080fd5b6110ed826122ce565b60006001600160a01b03808916835267ffffffffffffffff8816602084015286604084015280861660608401525060a060808301526126ba60a08301848661257d565b98975050505050505050565b600083516126d88184602088016120b8565b8351908301906126338183602088016120b8565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516127248160178501602088016120b8565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516127618160288401602088016120b8565b01602801949350505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261279f60808301846120e4565b9695505050505050565b6000602082840312156127bb57600080fd5b81516110ed81611fcd565b60008160001904831182151516156127e0576127e0612508565b500290565b6000816127f4576127f4612508565b506000190190565b60006020828403121561280e57600080fd5b81516110ed8161231f565b600082516126528184602087016120b856fea264697066735822122046f6f0c1ca8966f003a4a7f550f91caab47aa54d7bd215b153ee3eb0ab1ad67764736f6c634300080a0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063a22cb465116100a2578063d824891011610071578063d824891014610477578063e253abdf1461048a578063e3684e391461049d578063e985e9c51461053257600080fd5b8063a22cb4651461042b578063b88d4fde1461043e578063c87b56dd14610451578063d547741f1461046457600080fd5b806391d14854116100de57806391d14854146103b757806395d89b41146103f057806398831192146103f8578063a217fddf1461042357600080fd5b806370a082311461037e5780637641e6f3146103915780637cdb7495146103a457600080fd5b80632408ee801161017c57806342842e0e1161014b57806342842e0e146103045780634e8b1dd514610317578063634252dc146103445780636352211e1461036b57600080fd5b80632408ee8014610298578063248a9ca3146102bb5780632f2ff15d146102de57806336568abe146102f157600080fd5b8063081812fc116101b8578063081812fc14610231578063095ea7b31461025c57806318160ddd1461026f57806323b872dd1461028557600080fd5b806301ffc9a7146101df57806306f2a6be1461020757806306fdde031461021c575b600080fd5b6101f26101ed366004611fe3565b61056e565b60405190151581526020015b60405180910390f35b61021a61021536600461204c565b61057f565b005b6102246106b5565b6040516101fe9190612110565b61024461023f366004612123565b610747565b6040516001600160a01b0390911681526020016101fe565b61021a61026a366004612151565b6107a4565b600154600054035b6040519081526020016101fe565b61021a61029336600461217d565b6108b6565b6101f26102a6366004612123565b600c6020526000908152604090205460ff1681565b6102776102c9366004612123565b60009081526008602052604090206001015490565b61021a6102ec3660046121be565b6108c6565b61021a6102ff3660046121be565b6108ec565b61021a61031236600461217d565b61097d565b600b5461032b9067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101fe565b6102777ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc781565b610244610379366004612123565b610998565b61027761038c3660046121ee565b6109a3565b61021a61039f36600461220b565b610a0b565b61021a6103b2366004612287565b610b3b565b6101f26103c53660046121be565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610224610f41565b6102776104063660046122ea565b600d60209081526000928352604080842090915290825290205481565b610277600081565b61021a61043936600461232d565b610f50565b61021a61044c366004612371565b610fff565b61022461045f366004612123565b611049565b61021a6104723660046121be565b6110f4565b61021a610485366004612451565b61111a565b61021a61049836600461249a565b611240565b6104f16104ab366004612123565b600a602052600090815260409020805460018201546002909201546001600160801b03821692600160801b90920467ffffffffffffffff16916001600160a01b03169084565b604080516001600160801b03909516855267ffffffffffffffff90931660208501526001600160a01b039091169183019190915260608201526080016101fe565b6101f26105403660046124c4565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6000610579826112a3565b92915050565b6000808067ffffffffffffffff421686825b818110156106a9578989828181106105ab576105ab6124f2565b602090810292909201356000818152600a90935260409092208054929850965050600160801b900467ffffffffffffffff1683119350831561069957600285015460018601546001600160a01b03166000908152600d6020908152604080832089546001600160801b031684529091528120805490919061062d90849061251e565b9091555061063c90508661130a565b857f6874c596aaaff0aa80bb2fa847845de413cb824db72206cecb813fdbffcb7cc8898984818110610670576106706124f2565b90506020028101906106829190612536565b6040516106909291906125a6565b60405180910390a25b6106a2816125ba565b9050610591565b50505050505050505050565b6060600280546106c4906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546106f0906125d5565b801561073d5780601f106107125761010080835404028352916020019161073d565b820191906000526020600020905b81548152906001019060200180831161072057829003601f168201915b5050505050905090565b600061075282611318565b610788576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006107af8261133f565b9050806001600160a01b0316836001600160a01b031614156107fd576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b0382161461084d576108178133610540565b61084d576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260066020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6108c18383836113b9565b505050565b6000828152600860205260409020600101546108e2813361159a565b6108c1838361161a565b6001600160a01b038116331461096f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61097982826116bc565b5050565b6108c183838360405180602001604052806000815250610fff565b60006105798261133f565b60006001600160a01b0382166109e5576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b600033610a1785610998565b6000868152600a6020526040902080546001600160a01b039290921692909214925067ffffffffffffffff428116600160801b90920416108280610a585750805b610aa45760405162461bcd60e51b815260206004820152601660248201527f446f6e6174696f6e733a206e6f7420616c6c6f776564000000000000000000006044820152606401610966565b600282015460018301546001600160a01b03166000908152600d6020908152604080832086546001600160801b0316845290915281208054909190610aea90849061251e565b90915550610af990508661130a565b857f6874c596aaaff0aa80bb2fa847845de413cb824db72206cecb813fdbffcb7cc88686604051610b2b9291906125a6565b60405180910390a2505050505050565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc7610b66813361159a565b604080516020808201889052818301879052825180830384018152606090920183528151918101919091206000818152600c9092529190205460ff1615610bef5760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a20616c72656164792070726f636573736564000000006044820152606401610966565b600b54600090610c099067ffffffffffffffff1642612610565b600954909150849060005b82811015610f1b57610c25826125ba565b91506040518060800160405280898984818110610c4457610c446124f2565b9050602002810190610c56919061263c565b610c6490602081019061265c565b6001600160801b031681526020018567ffffffffffffffff168152602001898984818110610c9457610c946124f2565b9050602002810190610ca6919061263c565b610cb79060608101906040016121ee565b6001600160a01b03168152602001898984818110610cd757610cd76124f2565b9050602002810190610ce9919061263c565b6060908101359091526000848152600a6020908152604091829020845181549286015167ffffffffffffffff16600160801b027fffffffffffffffff0000000000000000000000000000000000000000000000009093166001600160801b0390911617919091178155908301516001820180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19909216919091179055910151600290910155610dce888883818110610da457610da46124f2565b9050602002810190610db6919061263c565b610dc79060408101906020016121ee565b600161173f565b84888883818110610de157610de16124f2565b9050602002810190610df3919061263c565b610e0190602081019061265c565b6001600160801b0316837fdacba2fa7b75fcde690c6d8dae704d859ebc3b89dae3cf49357d6a12a9e0193d8b8b86818110610e3e57610e3e6124f2565b9050602002810190610e50919061263c565b610e619060608101906040016121ee565b888d8d88818110610e7457610e746124f2565b9050602002810190610e86919061263c565b606001358e8e89818110610e9c57610e9c6124f2565b9050602002810190610eae919061263c565b610ebf9060408101906020016121ee565b8f8f8a818110610ed157610ed16124f2565b9050602002810190610ee3919061263c565b610ef1906080810190612536565b604051610f0396959493929190612677565b60405180910390a4610f14816125ba565b9050610c14565b5060095550506000908152600c60205260409020805460ff191660011790555050505050565b6060600380546106c4906125d5565b6001600160a01b038216331415610f93576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61100a8484846113b9565b6001600160a01b0383163b156110435761102684848484611850565b611043576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061105482611318565b61108a576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006110a160408051602081019091526000815290565b90508051600014156110c257604051806020016040528060008152506110ed565b806110cc84611938565b6040516020016110dd9291906126c6565b6040516020818303038152906040525b9392505050565b600082815260086020526040902060010154611110813361159a565b6108c183836116bc565b7ff1b411d6abb365480ac902cc153c45e9ded5847a2265ce6d01945d253edb6bc7611145813361159a565b6001600160a01b0383166000908152600d602090815260408083206001600160801b0388168452909152902054806111bf5760405162461bcd60e51b815260206004820152601c60248201527f446f6e6174696f6e733a206e6f7468696e6720746f20646f6e617465000000006044820152606401610966565b6001600160a01b038481166000818152600d602090815260408083206001600160801b038b168085529083528184209390935551858152938716937f27c209b93a7fe87531993c3ce2ab9e352e1e022adb1088729759d043daa08757910160405180910390a46112396001600160a01b0385168483611987565b5050505050565b600061124c813361159a565b600b805467ffffffffffffffff191667ffffffffffffffff84169081179091556040519081527f54578ea9dcb2f1fc35e2b4ff6947b808dfa81adf38483eaec4cde6d083cbcf519060200160405180910390a15050565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061057957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610579565b611315816000611a07565b50565b6000805482108015610579575050600090815260046020526040902054600160e01b161590565b60008160005481101561138757600081815260046020526040902054600160e01b8116611385575b806110ed575060001901600081815260046020526040902054611367565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006113c48261133f565b9050836001600160a01b0316816001600160a01b031614611411576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000336001600160a01b038616148061142f575061142f8533610540565b8061144a57503361143f84610747565b6001600160a01b0316145b90508061146a57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166114aa576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600660209081526040808320805473ffffffffffffffffffffffffffffffffffffffff191690556001600160a01b038881168452600583528184208054600019019055871683528083208054600101905585835260049091529020600160e11b4260a01b86178117909155821661155457600183016000818152600460205260409020546115525760005481146115525760008181526004602052604090208390555b505b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611239565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff16610979576115d8816001600160a01b03166014611b78565b6115e3836020611b78565b6040516020016115f49291906126ec565b60408051601f198184030181529082905262461bcd60e51b825261096691600401612110565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff166109795760008281526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116783390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff16156109795760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000546001600160a01b038316611782576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816117b9576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660009081526005602090815260408083208054680100000000000000018702019055838352600490915290204260a01b84176001841460e11b179055808083015b6040516001830192906001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48082106118045750600055505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061188590339089908890889060040161276d565b6020604051808303816000875af19250505080156118c0575060408051601f3d908101601f191682019092526118bd918101906127a9565b60015b61191b573d8080156118ee576040519150601f19603f3d011682016040523d82523d6000602084013e6118f3565b606091505b508051611913576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b604080516080810191829052607f0190826030600a8206018353600a90045b801561197557600183039250600a81066030018353600a9004611957565b50819003601f19909101908152919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526108c1908490611d59565b6000611a128361133f565b9050808215611a76576000336001600160a01b0383161480611a395750611a398233610540565b80611a54575033611a4986610747565b6001600160a01b0316145b905080611a7457604051632ce44b5f60e11b815260040160405180910390fd5b505b6000848152600660209081526040808320805473ffffffffffffffffffffffffffffffffffffffff191690556001600160a01b03841683526005825280832080546001600160801b03019055868352600490915290207c03000000000000000000000000000000000000000000000000000000004260a01b8317179055600160e11b8216611b325760018401600081815260046020526040902054611b30576000548114611b305760008181526004602052604090208390555b505b60405184906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505060018054810190555050565b60606000611b878360026127c6565b611b9290600261251e565b67ffffffffffffffff811115611baa57611baa61235b565b6040519080825280601f01601f191660200182016040528015611bd4576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611c0b57611c0b6124f2565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611c5657611c566124f2565b60200101906001600160f81b031916908160001a9053506000611c7a8460026127c6565b611c8590600161251e565b90505b6001811115611d0a577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611cc657611cc66124f2565b1a60f81b828281518110611cdc57611cdc6124f2565b60200101906001600160f81b031916908160001a90535060049490941c93611d03816127e5565b9050611c88565b5083156110ed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610966565b6000611dae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e3e9092919063ffffffff16565b8051909150156108c15780806020019051810190611dcc91906127fc565b6108c15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610966565b6060611e4d8484600085611e55565b949350505050565b606082471015611ecd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610966565b843b611f1b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610966565b600080866001600160a01b03168587604051611f379190612819565b60006040518083038185875af1925050503d8060008114611f74576040519150601f19603f3d011682016040523d82523d6000602084013e611f79565b606091505b5091509150611f89828286611f94565b979650505050505050565b60608315611fa35750816110ed565b825115611fb35782518084602001fd5b8160405162461bcd60e51b81526004016109669190612110565b6001600160e01b03198116811461131557600080fd5b600060208284031215611ff557600080fd5b81356110ed81611fcd565b60008083601f84011261201257600080fd5b50813567ffffffffffffffff81111561202a57600080fd5b6020830191508360208260051b850101111561204557600080fd5b9250929050565b6000806000806040858703121561206257600080fd5b843567ffffffffffffffff8082111561207a57600080fd5b61208688838901612000565b9096509450602087013591508082111561209f57600080fd5b506120ac87828801612000565b95989497509550505050565b60005b838110156120d35781810151838201526020016120bb565b838111156110435750506000910152565b600081518084526120fc8160208601602086016120b8565b601f01601f19169290920160200192915050565b6020815260006110ed60208301846120e4565b60006020828403121561213557600080fd5b5035919050565b6001600160a01b038116811461131557600080fd5b6000806040838503121561216457600080fd5b823561216f8161213c565b946020939093013593505050565b60008060006060848603121561219257600080fd5b833561219d8161213c565b925060208401356121ad8161213c565b929592945050506040919091013590565b600080604083850312156121d157600080fd5b8235915060208301356121e38161213c565b809150509250929050565b60006020828403121561220057600080fd5b81356110ed8161213c565b60008060006040848603121561222057600080fd5b83359250602084013567ffffffffffffffff8082111561223f57600080fd5b818601915086601f83011261225357600080fd5b81358181111561226257600080fd5b87602082850101111561227457600080fd5b6020830194508093505050509250925092565b6000806000806060858703121561229d57600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156122c257600080fd5b6120ac87828801612000565b80356001600160801b03811681146122e557600080fd5b919050565b600080604083850312156122fd57600080fd5b82356123088161213c565b9150612316602084016122ce565b90509250929050565b801515811461131557600080fd5b6000806040838503121561234057600080fd5b823561234b8161213c565b915060208301356121e38161231f565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561238757600080fd5b84356123928161213c565b935060208501356123a28161213c565b925060408501359150606085013567ffffffffffffffff808211156123c657600080fd5b818701915087601f8301126123da57600080fd5b8135818111156123ec576123ec61235b565b604051601f8201601f19908116603f011681019083821181831017156124145761241461235b565b816040528281528a602084870101111561242d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561246657600080fd5b61246f846122ce565b9250602084013561247f8161213c565b9150604084013561248f8161213c565b809150509250925092565b6000602082840312156124ac57600080fd5b813567ffffffffffffffff811681146110ed57600080fd5b600080604083850312156124d757600080fd5b82356124e28161213c565b915060208301356121e38161213c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561253157612531612508565b500190565b6000808335601e1984360301811261254d57600080fd5b83018035915067ffffffffffffffff82111561256857600080fd5b60200191503681900382131561204557600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611e4d60208301848661257d565b60006000198214156125ce576125ce612508565b5060010190565b600181811c908216806125e957607f821691505b6020821081141561260a57634e487b7160e01b600052602260045260246000fd5b50919050565b600067ffffffffffffffff80831681851680830382111561263357612633612508565b01949350505050565b60008235609e1983360301811261265257600080fd5b9190910192915050565b60006020828403121561266e57600080fd5b6110ed826122ce565b60006001600160a01b03808916835267ffffffffffffffff8816602084015286604084015280861660608401525060a060808301526126ba60a08301848661257d565b98975050505050505050565b600083516126d88184602088016120b8565b8351908301906126338183602088016120b8565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516127248160178501602088016120b8565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516127618160288401602088016120b8565b01602801949350505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261279f60808301846120e4565b9695505050505050565b6000602082840312156127bb57600080fd5b81516110ed81611fcd565b60008160001904831182151516156127e0576127e0612508565b500290565b6000816127f4576127f4612508565b506000190190565b60006020828403121561280e57600080fd5b81516110ed8161231f565b600082516126528184602087016120b856fea264697066735822122046f6f0c1ca8966f003a4a7f550f91caab47aa54d7bd215b153ee3eb0ab1ad67764736f6c634300080a0033","abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"ApprovalToCurrentOwner","type":"error"},{"inputs":[],"name":"ApproveToCaller","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"string","name":"donationId","type":"string"}],"name":"DonationBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"uint128","name":"destinationId","type":"uint128"},{"indexed":true,"internalType":"bytes32","name":"groupId","type":"bytes32"},{"indexed":false,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"expiry","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"string","name":"donationId","type":"string"}],"name":"DonationMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint128","name":"destinationId","type":"uint128"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"DonationsSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"TTLUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WORKER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"donationId","type":"string"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"string[]","name":"donationIds","type":"string[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint128","name":"_destinationId","type":"uint128"},{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"donate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"metadata","outputs":[{"internalType":"uint128","name":"destinationId","type":"uint128"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"uint256","name":"_batchNr","type":"uint256"},{"components":[{"internalType":"uint128","name":"destinationId","type":"uint128"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"string","name":"donationId","type":"string"}],"internalType":"struct Donations.DonationParams[]","name":"_params","type":"tuple[]"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"processedDonationsGroups","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_ttl","type":"uint64"}],"name":"setTTL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"","type":"address"},{"internalType":"uint128","name":"","type":"uint128"}],"name":"transferableAmounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ttl","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}]}